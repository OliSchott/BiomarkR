BigPlot
for (i in 1:length(Splines)){
Splines[[i]] <- Splines[[i]] + coord_cartesian(ylim = c(-0.25,0.25))
}
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 2, nrow =2, common.legend = TRUE, align = "hv", legend = "right")
BigPlot
## get significant modules
SigModules <-layout_df %>% filter(depth == 2) %>% pull(name)
## Calculate and plot Splines that significantly correlate with gestational age
Splines <- list()
for (i in 1:length(SigModules)){
## get module
Module <- SigModules[[i]]
## get Proteins in Module
PoIs <- AgeMEGENAResults$Summary$modules[[Module]]
SplineResults <- SplineRegression(AgeData, PoIs = PoIs, plotname = Module, Timecol = "GestationalAge", split_status = T, alpha = 0.01, show_all_proteins = F, col_pellet = "custom_vibrant")
PlinePlot <- SplineResults$Plot
## put PlinePlot in Splines
Splines[[Module]] <- PlinePlot
}
## make sure all plots in Spline have the same y range
## get range of y values
yValues <- data.frame()
for (i in 1:length(Splines)){
## get range of y values
range <- Splines[[i]]$layers[[4]]$data
## put range in yValues
yValues <- rbind(yValues, range)
}
ymax <- max(yValues$upper)
ymin <- min(yValues$lower)
range <- c(ymin,ymax)
## apply range to all plots in Splines
for (i in 1:length(Splines)){
Splines[[i]] <- Splines[[i]] + coord_cartesian(ylim = c(-0.25,0.25))
}
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 2, nrow =2, common.legend = TRUE, align = "hv", legend = "right")
BigPlot
## get significant modules
SigModules <-layout_df %>% filter(depth == 2) %>% pull(name)
## Calculate and plot Splines that significantly correlate with gestational age
Splines <- list()
for (i in 1:length(SigModules)){
## get module
Module <- SigModules[[i]]
## get Proteins in Module
PoIs <- AgeMEGENAResults$Summary$modules[[Module]]
SplineResults <- SplineRegression(AgeData, PoIs = PoIs, plotname = Module, Timecol = "GestationalAge", split_status = T, alpha = 0.01, show_all_proteins = F, col_pellet = "custom_vibrant")
PlinePlot <- SplineResults$Plot
## put PlinePlot in Splines
Splines[[Module]] <- PlinePlot
}
## make sure all plots in Spline have the same y range
## get range of y values
yValues <- data.frame()
for (i in 1:length(Splines)){
## get range of y values
range <- Splines[[i]]$layers[[4]]$data
## put range in yValues
yValues <- rbind(yValues, range)
}
ymax <- max(yValues$upper)
ymin <- min(yValues$lower)
range <- c(ymin,ymax)
## apply range to all plots in Splines
for (i in 1:length(Splines)){
Splines[[i]] <- Splines[[i]] + coord_cartesian(ylim = c(-0.1,0.1))
}
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 2, nrow =2, common.legend = TRUE, align = "hv", legend = "right")
BigPlot
for (i in 1:length(names(FilteredSRINGResults))){
module <- names(FilteredSRINGResults[i])
plot(FilteredSRINGResults[[module]]$ProcessPlot)
}
names(FilteredSRINGResults)
for (i in 1:length(names(FilteredSRINGResults))){
module <- names(FilteredSRINGResults[i])
plot(FilteredSRINGResults[[module]]$ProcessPlot)
}
names(FilteredSRINGResults)
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Immunity_Report\KEGG_Results)")
KEGGData <- AgeData %>%
filter(GestationalAge %in% c("very-pre-term", "pre-term")) %>%
## call SIDS Case
mutate(Status = ifelse(Status == "SIDS", "Case", "Control"))
SigModules <- names(FilteredSRINGResults)
for (i in 1:length(SigModules)){
## make folder with module name
dir.create(SigModules[i])
print(SigModules[i])
BiomarkR::KeggEnrichmetn(KEGGData,
PoIs = AgeMEGENAResults$Summary$modules[[SigModules[i]]],
folder = SigModules[i])
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Immunity_Report\KEGG_Results)")
}
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Immunity_Report\KEGG_Results)")
KEGGData <- AgeData %>%
filter(GestationalAge %in% c("very-pre-term", "pre-term")) %>%
## call SIDS Case
mutate(Status = ifelse(Status == "SIDS", "Case", "Control"))
SigModules <- names(FilteredSRINGResults)
for (i in 1:length(SigModules)){
## make folder with module name
dir.create(SigModules[i])
print(SigModules[i])
BiomarkR::KeggEnrichmetn(KEGGData,
PoIs = AgeMEGENAResults$Summary$modules[[SigModules[i]]],
folder = SigModules[i])
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Immunity_Report\KEGG_Results)")
}
## KEGGEnrichment
## add roxygen comments
#' @title KEGGEnrichment
#' @description KEGG enrichment analysis for the specified dataset.
#' @param dataset The dataset to be tested
#' @param PoIs A vector containing the Proteins of interest. Example: c("Q8TF72_SHROOM3" , "Q9ULZ3_PYCARD")
#' @param plotname The name to be displayed on created plots
#' @param folder The folder to save the pathway plots
#' @return A list object containing the results of the KEGG enrichment analysis, the KEGG enrichment plot. The pictures of the pathways are saved in the specified folder
#' @export
KeggEnrichmetn <- function(dataset, PoIs, folder = NA, plotname = ""){
GoIs <- stringr::str_split_i(PoIs, "_", 2)
## encode GoIs
gene_ids <- clusterProfiler::bitr(GoIs, fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db::org.Hs.eg.db)
# Extract Entrez IDs
gene_ids <- gene_ids$ENTREZID
KeggBackground <- unique(dataset$Protein)
BackgroundGoIs <- stringr::str_split_i(KeggBackground, "_", 2)
KeggBackground_ids <- clusterProfiler::bitr(BackgroundGoIs, fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db::org.Hs.eg.db)
# Extract Entrez IDs
KeggBackground_ids <- KeggBackground_ids$ENTREZID
KEGG <- clusterProfiler::enrichKEGG(gene = gene_ids, organism = 'hsa', keyType = 'kegg',
qvalueCutoff = 0.01,
pAdjustMethod = "BH",
universe = KeggBackground_ids)
## skip rest of the function if KEGG == NULL
if(is.null(KEGG)){
print("No enriched KEGG pathways")
return(NULL)
}
## make KEGG plot
KEGGTable <- KEGG@result %>% dplyr::as_tibble() %>%
dplyr::filter(!category == "Metabolism") %>%
dplyr::filter(qvalue <0.05)
## skip if nrow of KEGGTable == 0
if(nrow(KEGGTable) == 0){
print("No enriched KEGG pathways")
return(NULL)
}
KeggPlotData <- KEGGTable %>% dplyr::select(Description, GeneRatio, qvalue) %>%
dplyr::arrange(qvalue) %>% utils::head(10) %>%
dplyr::mutate(GenesFound = stringr::str_split_i(GeneRatio, "/", 1)) %>%
dplyr::mutate(GenesTotal = stringr::str_split_i(GeneRatio, "/", 2)) %>%
## make Genesfound and Genetotal numeric
dplyr::mutate(GenesFound = as.numeric(GenesFound), GenesTotal = as.numeric(GenesTotal)) %>%
## calculate gene ratio
dplyr::mutate(GeneRatio = GenesFound/GenesTotal)
KEGGPlot <- ggplot2::ggplot(KeggPlotData, ggplot2::aes(x = GeneRatio, y = stats::reorder(Description, GeneRatio),  size = GeneRatio))+
ggplot2::geom_point(ggplot2::aes(col = -log10(qvalue)))+
ggplot2::xlim(0,NA) +
ggplot2::ylab("") +
ggplot2::xlab("Gene ratio")+
ggplot2::ggtitle(paste("KEGG enrichment", plotname))+
ggplot2::theme_light(base_size = 13)
## make pathway plots
gene_ids <- clusterProfiler::bitr(GoIs, fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db::org.Hs.eg.db) %>%
dplyr::rename(Gene = SYMBOL, ID = ENTREZID)
gene_ids <- gene_ids %>% dplyr::distinct(Gene, .keep_all = TRUE)
WtestResults <- WTest(dataset %>% dplyr::filter(Protein %in% PoIs))
PathwayData <- WtestResults$raw %>%
dplyr::mutate(Gene = stringr::str_split_i(Protein,"_", 2)) %>%
dplyr::select(Gene,estimate) %>%
base::merge(gene_ids, by = "Gene") %>%
dplyr::select(ID, estimate) %>%
tibble::column_to_rownames(var= "ID")
Pathways <-  KEGGTable %>% dplyr::as_tibble() %>%
dplyr::arrange(qvalue) %>% utils::head(10) %>%
dplyr::select(ID)
## set wd to folder
if(!is.na(folder)){
base::setwd(folder)
}
## make KEGG plots with colored fold changes and save them to the folder
for(i in 1:base::nrow(Pathways)){
pathview::pathview(PathwayData, pathway.id = Pathways$ID[i], kegg.native = TRUE,
limit = list(gene = base::max(base::abs(PathwayData)), cpd = 1),
low = list(gene = "blue", cpd = "blue"),
mid = list(gene = "gray", cpd = "gray"),
high = list(gene = "red", cpd = "red"))
}
## delete everything in folder that does not have "pathview" in its name
if(!is.na(folder)){
files <- base::list.files()
files <- files[!base::grepl("pathview", files)]
base::file.remove(files)
}
## write KEGGTable to the folder
if(!is.na(folder)){
utils::write.csv(KEGGTable, file = base::paste0("KEGGTable.csv"), row.names = FALSE)
}
return(base::list(KEGGPlot = KEGGPlot,
KeggData = KEGGTable))
}
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Immunity_Report\KEGG_Results)")
KEGGData <- AgeData %>%
filter(GestationalAge %in% c("very-pre-term", "pre-term")) %>%
## call SIDS Case
mutate(Status = ifelse(Status == "SIDS", "Case", "Control"))
SigModules <- names(FilteredSRINGResults)
for (i in 1:length(SigModules)){
## make folder with module name
dir.create(SigModules[i])
print(SigModules[i])
KeggEnrichmetn(KEGGData,
PoIs = AgeMEGENAResults$Summary$modules[[SigModules[i]]],
folder = SigModules[i])
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Immunity_Report\KEGG_Results)")
}
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Immunity_Report\KEGG_Results)")
KEGGData <- AgeData %>%
filter(GestationalAge %in% c("very-pre-term", "pre-term")) %>%
## call SIDS Case
mutate(Status = ifelse(Status == "SIDS", "Case", "Control"))
SigModules <- names(FilteredSRINGResults)
for (i in 1:length(SigModules)){
## make folder with module name
dir.create(SigModules[i])
print(SigModules[i])
KeggEnrichmetn(KEGGData,
PoIs = AgeMEGENAResults$Summary$modules[[SigModules[i]]],
folder = SigModules[i])
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Immunity_Report\KEGG_Results)")
}
filepathPicture <- r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Immunity_Report\KEGG_Results\c1_4\hsa04613.pathview.png)"
## include Picture
knitr::include_graphics(filepathPicture)
filepath <- r"(C:\Users\CH254567\OneDrive - Boston Children's Hospital\Desktop\Blood cell markers.csv)"
## load data
blood_cell_markers <- read_csv(filepath)
TestData <- AgeData %>% mutate(Gene= str_split_i(Protein, "_", 2))
NeutrophilMarkers <- blood_cell_markers %>%
filter(`Cell Type` == "Neutrophil") %>%
filter(Gene %in% TestData$Gene)
GoodMarkers <- NeutrophilMarkers %>%
arrange(`Log2(FC)`) %>%
filter(`Log2(FC)` > 3) %>%
merge(TestData, by = "Gene") %>%
pull(Protein) %>% unique()
PoIs  <- GoodMarkers
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
arrange(Status) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
colors <- assign_colors(PlotData %>% arrange(Status) %>% pull(Status) %>% unique(), palette = "custom_vibrant")
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
scale_fill_manual(values = colors) +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
## use "custom_vibrant" as a color pellet
WTestResults <- WTest(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")) %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_4))
AgeMEGENAResults$Summary$modules$c1_4
WTestResults <- WTest(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")) %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_4))
WTestResults$Vulcanoplot
PoIs <- c("P13010_XRCC5","P26583_HMGB2","P10412_H1.4")
HeatMap(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = PoIs, show_row_names = T, ColPalette = pellet, fontsize = 13)
HeatMap(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = PoIs, show_row_names = T, ColPalette = pellet, fontsize = 13)
BoxPlotsFeatures <- function(dataset, PoIs, plotname = "", pellet = "Set1") {
dataset <- dataset %>% arrange(Status)
## generate colors
colors <- assign_colors(unique(dataset$Status), palette = pellet)
if ("Protein" %in% colnames(dataset)) {
BoxPlotData <- dataset %>%
dplyr::filter(Protein %in% PoIs)
Boxplot <- ggplot2::ggplot(data = BoxPlotData, ggplot2::aes(x = Status, y = Intensity)) +
ggplot2::geom_violin(aes(fill = Status)) +
ggplot2::geom_jitter() +
ggplot2::facet_wrap(~Protein) +
ggplot2::ggtitle(paste("Expressions of Proteins", plotname)) +
ggplot2::theme(legend.position = "none") +
ggplot2::ylab("Normalized Intensity") +
ggplot2::xlab("") +
## use colors
ggplot2::scale_fill_manual(values = colors) +
ggplot2::theme_light(base_size = 16) +
## rotate x axis labesl 45 degrees
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1))
}
return(Boxplot)
}
BoxPlotsFeatures(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")) %>%
mutate(Status = ifelse(Status == "Case", "SIDS", Status)) %>% normalizeIntensityOnFeature(), PoIs = c("P13010_XRCC5", "P26583_HMGB2", "P10412_H1.4"),pellet = pellet)
GLM <- GLM(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = WTestResults$Significant$Protein, crossvalidation = T, plotname = "Biomarker panel for pre-term (< 36 Weeks GA) SIDS risk")
AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term"))
GLM <- GLM(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = WTestResults$Significant$Protein, crossvalidation = T, plotname = "Biomarker panel for pre-term (< 36 Weeks GA) SIDS risk")
GLM <- GLM(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = PoIs, crossvalidation = T, plotname = "Biomarker panel for pre-term (< 36 Weeks GA) SIDS risk")
GLM$ROC_Plot +
## make fontsize bigger
theme(text = element_text(size = 20))+
## make grid lines thicker
theme(panel.grid.major = element_line(size = 1))
?graph_from_data_frame
library(igraph)
?as_tbl_graph
library(tidygraph)
?geom_circle
AgeMEGENAResults$Summary$modules$c1_110
STRING(AgeMEGENAResults$Summary$modules$c1_110, STRINGBackground = unique(AgeData$Protein))
## STRING enrichment of all modules
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Immunity_Report\STRING_Results)")
Modules <- SigModules
STRINGResults <- list()
for (i in 1:length(Modules)){
## get module
Module <- Modules[[i]]
## get Proteins in Module
PoIs <- AgeMEGENAResults$Summary$modules[[Module]]
## perform STRING enrichment
STRINGResults[[Module]] <- STRING(PoIs, STRINGBackground = unique(AgeData$Protein), plotname = Module)
}
## save results as RDS
saveRDS(STRINGResults, file = "STRINGResults.rds")
ANOVADAta <- AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term"))
ANOVA <- Anova(Intensity ~ Status * GestationalAge)
ANOVA <- Anova(Intensity ~ Status * GestationalAge, ANOVADAta)
ANOVA <- rstatix::Anova(Intensity ~ Status * GestationalAge, ANOVADAta)
ANOVA <- rstatix::anova_test(Intensity ~ GestationalAge + Status, ANOVADAta)
ANOVAResults <- ANOVADAta %>%
group_by(Protein) %>%
rstatix::anova_test(Intensity ~  GestationalAge + Status) %>%
rstatix::adjust_pvalue(method = "BH") %>%
rstatix::add_significance(p.col = "p.adj")
summary(ANOVAResults)
ANOVAResults <- ANOVADAta %>%
group_by(Protein) %>%
rstatix::anova_test(Intensity ~ Status) %>%
rstatix::adjust_pvalue(method = "BH") %>%
rstatix::add_significance(p.col = "p.adj")
ANOVAResults <- ANOVADAta %>%
group_by(Protein) %>%
rstatix::anova_test(Intensity ~  GestationalAge * Status) %>%
rstatix::adjust_pvalue(method = "BH") %>%
rstatix::add_significance(p.col = "p.adj")
summary(ANOVAResults)
WTest(KEGGData)
WtestResults <- WTest(KEGGData)
summary(WtestResults$raw)
WtestResults <- WTest(KEGGData) %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_4)
summary(WtestResults$raw)
WtestResults <- WTest(KEGGData %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_4))
summary(WtestResults$raw)
head(WtestResults$raw)
x <- WtestResults$raw
View(x)
WtestResults$Vulcanoplot
"P13010_XRCC5" %in% AgeMEGENAResults$Summary$modules
Modules <- AgeMEGENAResults$Summary$modules
for(i in 1:length(AgeMEGENAResults$Summary$modules)){
print(i)
}
Module <- AgeMEGENAResults$Summary$modules[i]
Module <- AgeMEGENAResults$Summary$modules[[i]]
names(AgeMEGENAResults$Summary$modules)
Name <- names(AgeMEGENAResults$Summary$modules)[i]
print(Name)
"P13010_XRCC5" %in% Module
for(i in 1:length(AgeMEGENAResults$Summary$modules)){
Name <- names(AgeMEGENAResults$Summary$modules)[i]
print(Name)
Module <- AgeMEGENAResults$Summary$modules[[i]]
"P13010_XRCC5" %in% Module
}
for(i in 1:length(AgeMEGENAResults$Summary$modules)){
Name <- names(AgeMEGENAResults$Summary$modules)[i]
print(Name)
Module <- AgeMEGENAResults$Summary$modules[[i]]
print("P13010_XRCC5" %in% Module)
}
AgeMEGENAResults$Summary$modules$c1_16
View(x)
PoIs <- c("P26583_HMGB2","P10412_H1.4")
HeatMap(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = PoIs, show_row_names = T, ColPalette = pellet, fontsize = 13)
GLM <- GLM(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = PoIs, crossvalidation = T, plotname = "Biomarker panel for pre-term (< 36 Weeks GA) SIDS risk")
GLM$ROC_Plot +
## make fontsize bigger
theme(text = element_text(size = 20))+
## make grid lines thicker
theme(panel.grid.major = element_line(size = 1))
AgeMEGENAResults$Summary$modules$c1_2
ModuleData <- data.frame()
Resutls <- data.frame(Module)
View(Resutls)
Resutls <- data.frame(Protein = Module)
View(Resutls)
ModuleData <- data.frame()
for(i in 1:length(AgeMEGENAResults$Summary$modules)){
Name <- names(AgeMEGENAResults$Summary$modules)[i]
print(Name)
Module <- AgeMEGENAResults$Summary$modules[[i]]
Resutls <- data.frame(Protein = Module) %>%
mutate(module = Name)
ModuleData <- rbind(ModuleData, Resutls)
}
View(ModuleData)
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Immunity_Report)")
write.csv(ModuleData, "MEGENA_ProteinModules.csv", row.names = F)
AgeData %>% mutate(Status = GestationalAge) %>% KruskalTest()
X <- AgeData %>% mutate(Status = GestationalAge) %>% KruskalTest()
View(x)
View(AgeData)
Sig <- X$Significant
View(Sig)
AgeData$GestationalAge <- as.factor(AgeData$GestationalAge, levels = c("very-pre-term","pre-term","early-term","full-term"))
AgeData$GestationalAge <- factor(AgeData$GestationalAge, levels = c("very-pre-term","pre-term","early-term","full-term"))
HeatMap(AgeData, PoIs = X$Significant$Protein)
HeatMap(AgeData %>% mutate(Status = GestationalAge), PoIs = X$Significant$Protein)
HeatMap(AgeData %>% mutate(Status = GestationalAge), PoIs = X$Significant$Protein, method = "supervised")
HeatMap(AgeData %>% mutate(Status = GestationalAge), PoIs = X$Significant$Protein, method = "supervised", show_row_names = T)
HeatMap(AgeData %>% mutate(Status = GestationalAge), PoIs = X$Significant$Protein, method = "supervised", show_row_names = T, cluster_columns = F)
HeatMap(AgeData %>% mutate(Status = GestationalAge), PoIs = X$Significant$Protein, method = "supervised", show_row_names = T, cluster_columns = F)
HeatMap <- HeatMap(AgeData %>% mutate(Status = GestationalAge), PoIs = X$Significant$Protein, method = "supervised", show_row_names = T, cluster_columns = F)
ComplexHeatmap::row_dend(HeatMap)
Dend <- ComplexHeatmap::row_dend(HeatMap)
Dend[1]
Dend[[1]]
View(Dend)
ComplexHeatmap::row_order(Heatap)
Dend <- ComplexHeatmap::row_order(HeatMap)
## extract row dendrogram from HeatMap
dendrogram <- as.dendrogram(HeatMap$RowDendrogram)
## extract row dendrogram from HeatMap
ComplexHeatmap::row_dend(HeatMap) -> row_dend
## extract protein names from dendrogram
protein_names <- rownames(HeatMap)[ComplexHeatmap::row_order(HeatMap)]
rownames(HeatMap)
## extract protein names from dendrogram
protein_names <- HeatMap@matrix
## extract row dendrogram from HeatMap
ComplexHeatmap::column_order(HeatMap)
## extract row dendrogram from HeatMap
ComplexHeatmap::row_order(HeatMap)
## extract protein names from dendrogram
protein_names <- HeatMap@matrix[ComplexHeatmap::row_order(HeatMap)]
## extract protein names from dendrogram
protein_names <- HeatMap@matrix@row_dend@labels
HeatMap@row_order
## extract row dendrogram from HeatMap
RowOrder ,- ComplexHeatmap::row_order(HeatMap)
## extract row dendrogram from HeatMap
RowOrder <- ComplexHeatmap::row_order(HeatMap)
## extract protein names from dendrogram
protein_names <- ComplexHeatmap::row_labels(RowOrder)
## extract protein names from dendrogram
row.names(HeatMap@matrix)
## extract protein names from dendrogram
row.names(HeatMap@matrix) %>% reorder(RowOrder) -> RowOrder
## extract protein names from dendrogram
row.names(HeatMap@matrix)[RowOrder]
RowDend <- ComplexHeatmap::row_dend(HeatMap)
## extract the row names of the the proteins by dendrogram
RowOrder <- ComplexHeatmap::row_order(HeatMap)
split1_row_names <- rownames(mat)[RowOrder[[1]]]
split1_row_names <- rownames(HeatMap@matrix)[RowOrder[[1]]]
split1_row_names <- rownames(HeatMap@matrix)[RowOrder[1]]
split1_row_names <- rownames(HeatMap@matrix)[RowOrder]
# Draw the heatmap
ht_drawn <- draw(HeatMap)
?draw
library(ComplexHeatmap)
# Draw the heatmap
ht_drawn <- draw(HeatMap)
# Extract the row order (row indices) per split
row_order_list <- row_order(ht_drawn)
# Get the actual row names per cluster
split1_row_names <- rownames(mat)[row_order_list[[1]]]
split2_row_names <- rownames(mat)[row_order_list[[2]]]
# Get the actual row names per cluster
split1_row_names <- rownames(HeatMap@matrix)[row_order_list[[1]]]
# Extract the row dendrogram
row_dend <- row_dend(HeatMap)
clusters <- cutree(as.hclust(row_dend), k = 2)
clusters
clusters %>% data.frame()
clusters <- cutree(as.hclust(row_dend), k = 2) %>% data.frame()
View(clusters)
clusters %>% filter(. == 2)
clusters %>% filter(. == 1)
row.names(clusters %>% filter(. == 1))
row.names(clusters %>% filter(. == 1)) %in% AgeMEGENAResults$Summary$modules$c1_16
row.names(clusters %>% filter(. == 2)) %in% AgeMEGENAResults$Summary$modules$c1_2
roxygen2::roxygenize(r"(C:\Users\CH254567\OneDrive\Working\Programs\BiomarkR)")
library(BiomarkR)
detach("package:BiomarkR", unload = TRUE)
remotes::install_github("OliSchott\BiomakrR")
remotes::install_github("OliSchott/BiomakrR")
remotes::install_github("OliSchott/BiomarkR")
