ggpubr::ggarrange(plotlist = PCAs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
PCAs <- WTestResultList %>%
map("PCA") %>% map("ScorePlot_12")
ggpubr::ggarrange(plotlist = PCAs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
ggpubr::ggarrange(plotlist = PCAs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
ggpubr::ggarrange(plotlist = PCAs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
ggpubr::ggarrange(plot_list = PCAs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
PCAs <- WTestResultList %>%
map("PCA") %>% map("ScorePlot_12")
ggpubr::ggarrange(plot_list = PCAs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
?ggarrange
ggpubr::ggarrange(plotlist = PCAs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
## Loop through the Gestational ages and perform Analysis
## create folders for the Output to be saved
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Biomarker)")
dir.create("SIDS_VS_Control_in_gestationalAges", showWarnings = F)
setwd("SIDS_VS_Control_in_gestationalAges")
## Create output list
WTestResultList <- list()
## define Gestational age groups
GestAges <- unique(as.character(AgeData$GestationalAge))
for (i in 1:length(GestAges)) {
GestAge <- GestAges[i]
WTestData <- AgeData %>%
dplyr::filter(GestationalAge == GestAge) %>%
arrange(Status)
WTestResults <- BiomarkR::WTest(dataset = WTestData, plotname = paste0("SIDS vs Control ", GestAge), p.adj.method = "none")
Vulcanoplot <- WTestResults$Vulcanoplot
Heatmap <- BiomarkR::HeatMap(WTestData, PoIs = WTestResults$Significant$Protein, plotname = paste0("Heatmap_ ", GestAge), show_row_names = T, fontsize = 6)
Results <- WTestResults$Significant
AUCs <- BiomarkR::AUCs(WTestData, PoIs = WTestResults$Significant$Protein)
PCA <- BiomarkR::PCA(WTestData %>% filter(Protein %in% Results$Protein) %>%
BiomarkR::ImputeFeatureIntensity(), plotname = paste("PCA", GestAge))
## Optional STring of Up and down regulated Proteins
# UpProt <- Results %>% filter(estimate > 0) %>% pull(Protein)
# DownProt <- Results %>% filter(estimate < 0) %>% pull(Protein)
# StringResultsUp <- STRING(UpProt, STRINGBackground = unique(AgeData$Protein), plotname = paste("STRING Up", GestAge))
#  StringResultsDown <- STRING(DownProt, STRINGBackground = unique(AgeData$Protein), plotname = paste("STRING Down", GestAge))
# StringResultsCombined <- STRING(unique(Results$Protein), STRINGBackground = unique(AgeData$Protein), plotname = paste("STRING Combined", GestAge))
## store results in Output list
WTestResultList[[GestAge]] <- list(Vulcanoplot = Vulcanoplot,
Heatmap = Heatmap,
Results = Results,
AUCs = AUCs,
# StringResultsUp = StringResultsUp,
# StringResultsDown = StringResultsDown,
# StringResultsCombined=StringResultsCombined,
PCA = PCA)
## save Results## save Results## save Results
write.csv(Results, file = paste0("Results ", GestAge, ".csv"))
## save VulconaPlot as png
ggsave(paste0("Vulcanoplot ", GestAge, ".png"), plot = Vulcanoplot)
## Save HeatMap as png
png(paste0("heatmap_plot", GestAge,".png"), width = 800, height = 600, res = 150) # Adjust resolution as needed
draw(Heatmap)
dev.off()
## Save PCA$ScorePlot2D as png
plot <- PCA$ScorePlot_12 +
## make points bigger
geom_point(size = 5) +
## make font bigger
theme(text = element_text(size = 20))
ggsave(paste0("PCA ", GestAge, ".png"), plot = plot)
## Save AUCs
write.csv(AUCs$results %>% data.frame(), file= paste0("AUCs", GestAge, ".csv"))
}
## get number of "significant" proteins in each gestational age
WTestResultList %>%
map("Results") %>%
map("Protein") %>%
map_dbl(length) %>%
## rearrange chronologically
.[c(3,2,4,1)] %>%
## make nice table
knitr::kable(caption = "Number of significant Protins in each gestational age group", col.names = c("Gestational Age Group", "N"))
WTestResultList$`very-pre-term`$Vulcanoplot
WTestResultList %>%
map("Results") %>%
map("Protein")
## get number of "significant" proteins in each gestational age
WTestResultList %>%
map("Results") %>%
map("Protein") %>%
map_dbl(length) %>%
## rearrange chronologically
.[c(3,2,4,1,5)] %>%
## make nice table
knitr::kable(caption = "Number of significant Protins in each gestational age group", col.names = c("Gestational Age Group", "N"))
## get number of "significant" proteins in each gestational age
WTestResultList %>%
map("Results") %>%
map("Protein") %>%
map_dbl(length) %>%
## rearrange chronologically
.[c(5,3,2,4,1)] %>%
## make nice table
knitr::kable(caption = "Number of significant Protins in each gestational age group", col.names = c("Gestational Age Group", "N"))
## get number of "significant" proteins in each gestational age
WTestResultList %>%
map("Results") %>%
map("Protein") %>%
map_dbl(length) %>%
## rearrange chronologically
.[c(5,4,3,2,1)] %>%
## make nice table
knitr::kable(caption = "Number of significant Protins in each gestational age group", col.names = c("Gestational Age Group", "N"))
## plot Heat maps in each gestational age group
WTestResultList %>%
map("Heatmap")
## plot Heat maps in each gestational age group
WTestResultList %>%
.[c(5,4,3,2,1)] %>%
map("Heatmap")
## get number of "significant" proteins in each gestational age
WTestResultList %>%
map("Results") %>%
map("Protein") %>%
map_dbl(length) %>%
## rearrange chronologically
.[c(5,3,4,2,1)] %>%
## make nice table
knitr::kable(caption = "Number of significant Protins in each gestational age group", col.names = c("Gestational Age Group", "N"))
## plot Heat maps in each gestational age group
WTestResultList %>%
.[c(5,3,4,2,1)] %>%
map("Heatmap")
PCAs <- WTestResultList %>%
map("PCA") %>% map("ScorePlot_12")
ggpubr::ggarrange(plotlist = PCAs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
PCAs <- WTestResultList %>%
map("PCA") %>% map("ScorePlot_12") %>%  .[c(5,3,4,2,1)]
ggpubr::ggarrange(plotlist = PCAs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
## compare AUCs of significant proteins in different gestational age groups
AUCsList <- WTestResultList %>%
map("AUCs") %>%
map("results")
## make Data frame
AUCs <- do.call(rbind, AUCsList) %>%
rownames_to_column(var = "GestationalAge") %>%
mutate(GestationalAge = str_split_i(GestationalAge,"\\.",1))
View(AUCs)
AUCPlots <- WTestResultList %>% map("AUCs")
View(AUCPlots)
AUCPlots <- WTestResultList %>% map("AUCs") %>% map("plot")
ggpubr::ggarrange(plotlist = AUCPlots, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
AUCPlots <- WTestResultList %>% map("AUCs")
AUCPlots <- WTestResultList %>% map("AUCs") %>% map("VulcanoPlot")
ggpubr::ggarrange(plotlist = AUCPlots, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
ggpubr::ggarrange(plotlist = AUCPlots, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "none")
AUCsList <- list()
i = 1
GestAge <- GestAges[i]
## filter data
AUCData <- AgeData %>% filter(GestationalAge == GestAge)
AUCResults <- BiomarkR::AUCs(AUCData, PoIs = unique(AUCData$Protin))
AUCResults <- BiomarkR::AUCs(AUCData %>% NaCutoff(30), PoIs = unique(AUCData$Protin))
## filter data
AUCData <- AgeData %>% filter(GestationalAge == GestAge)
AUCResults <- BiomarkR::AUCs(AUCData, PoIs = unique(AUCData$Protin))
AUCResults <- BiomarkR::AUCs(AUCData %>% nObsPerGroup(10), PoIs = unique(AUCData$Protin))
AUCResults <- BiomarkR::AUCs(AUCData %>% nObsPerGroup(10, groupVar = Status), PoIs = unique(AUCData$Protin))
for (i in 1:length(GestAges)) {
GestAge <- GestAges[i]
## filter data
AUCData <- AgeData %>% filter(GestationalAge == GestAge)
AUCResults <- BiomarkR::AUCs(AUCData, PoIs = unique(AUCData$Protin))
AUCsList[[GestAge]] <- AUCs
}
i = 1
GestAge <- GestAges[i]
GestAge
## filter data
AUCData <- AgeData %>% filter(GestationalAge == GestAge)
View(AUCData)
AUCResults <- BiomarkR::AUCs(AUCData, PoIs = unique(AUCData$Protein))
AUCResults <- BiomarkR::AUCs(AUCData %>% NaCutoff(50), PoIs = unique(AUCData$Protein))
AUCResults <- BiomarkR::AUCs(AUCData %>% NaCutoff(70), PoIs = unique(AUCData$Protein))
## filter data
AUCData <- AgeData %>% filter(GestationalAge == GestAge) %>% NaCutoff(50)
## filter data
AUCData <- AgeData %>% filter(GestationalAge == GestAge) %>% NaCutoff(70)
AUCResults <- BiomarkR::AUCs(AUCData, PoIs = unique(AUCData$Protein))
## filter data
AUCData <- AgeData %>% filter(GestationalAge == GestAge) %>% nObsPerGroup(groupVar = Status, n = 3)
AUCResults <- BiomarkR::AUCs(AUCData, PoIs = unique(AUCData$Protein))
AUCsList[[GestAge]] <- AUCResults
View(AUCsList)
AUCsList <- list()
for (i in 1:length(GestAges)) {
GestAge <- GestAges[i]
## filter data
AUCData <- AgeData %>% filter(GestationalAge == GestAge) %>% nObsPerGroup(groupVar = Status, n = 3)
AUCResults <- BiomarkR::AUCs(AUCData, PoIs = unique(AUCData$Protein))
AUCsList[[GestAge]] <- AUCResults
}
AUCs <- WTestResultList %>%
map("VulcanoPlot") %>%  .[c(5,3,4,2,1)]
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
View(AUCs)
View(AUCsList)
AUCs <- WTestResultList %>%
map("VulcanoPlot") %>%  .[c(5,3,4,2,1)]
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
View(AUCs)
AUCs <- WTestResultList %>%
map("VulcanoPlot")
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
AUCs <- AUCsList %>%
map("VulcanoPlot") %>%  .[c(5,3,4,2,1)]
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "none")
AUCsList <- list()
for (i in 1:length(GestAges)) {
GestAge <- GestAges[i]
## filter data
AUCData <- AgeData %>% filter(GestationalAge == GestAge) %>% nObsPerGroup(groupVar = Status, n = 3)
AUCResults <- BiomarkR::AUCs(AUCData, PoIs = unique(AUCData$Protein), plotname = paste(GestAge))
AUCsList[[GestAge]] <- AUCResults
}
AUCs <- AUCsList %>%
map("VulcanoPlot") %>%  .[c(5,3,4,2,1)]
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "none")
AUCs <- AUCsList %>%
map("VulcanoPlot" + theme(text = element_text(size = 7))) %>%  .[c(5,3,4,2,1)]
AUCs <- AUCsList %>%
map(~.$VulcanoPlot) %>%  .[c(5,3,4,2,1)]
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "none")
AUCs <- AUCsList %>%
map(~.$VulcanoPlot + + theme(text = element_text(size = 7))) %>%  .[c(5,3,4,2,1)]
AUCs <- AUCsList %>%
map(~ .$VulcanoPlot + theme(text = element_text(size = 7))) %>%  .[c(5,3,4,2,1)]
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "none")
AUCs <- AUCsList %>%
map(~ .$VulcanoPlot +
theme(text = element_text(size = 7))+
xlim(c(-1,1))) %>%  .[c(5,3,4,2,1)]
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "none")
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "none")
AUCs <- AUCsList %>%
map(~ .$VulcanoPlot +
theme(text = element_text(size = 7))+
xlim(c(-1,1))) %>%  .[c(5,3,4,2,1)]
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "none")
AUCs <- AUCsList %>%
map(~ .$VulcanoPlot +
theme(text = element_text(size = 7))+
xlim(c(-1,1))) %>%  .[c(5,3,4,2,1)]
ggpubr::ggarrange(plotlist = AUCs, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "none")
## Check if proteins occur more than once in the significant results
Proteins <- WTestResultList %>%
map("Results") %>%
map("Protein")
# Create an UpSet plot
UpSetPlot <- UpSetR::upset(UpSetR::fromList(Proteins),
order.by = "freq",
main.bar.color = "steelblue",
sets.bar.color = "gold",
text.scale = 1.5,
decreasing = T)
UpSetPlot
## get intersection of significant porteins
Proteins <- WTestResultList %>%
map("Results") %>%
map("Protein")
## create combinataions of gestages
Combinations2 <- combn(GestAges, m = 2, simplify = T)
Combinations3 <- combn(GestAges, m = 3, simplify = T)
## go through combinations and get incersecting proteins
IntersectingProteins2 <- list()
for(i in 1:ncol(Combinations2)){
Group1 <- Combinations2[1,i]
Group2 <- Combinations2[2,i]
title <- paste0("Intersect__",Group1,"__",Group2)
## get intersection of proteins
IntersectingProteins2[[title]] <- Reduce(intersect, Proteins[Combinations2[,i]])
}
IntersectingProteins3 <- list()
for(i in 1:ncol(Combinations3)){
Group1 <- Combinations3[1,i]
Group2 <- Combinations3[2,i]
Group3 <- Combinations3[3,i]
title <- paste0("Intersect__",Group1,"__",Group2,"__",Group3)
## get intersection of proteins
IntersectingProteins3[[title]] <- Reduce(intersect, Proteins[Combinations3[,i]])
}
## select nonly non empty entries
IntersectingProteins2 <- IntersectingProteins2[sapply(IntersectingProteins2, length) > 0]
IntersectingProteins3 <- IntersectingProteins3[sapply(IntersectingProteins3, length) > 0]
## combine the lists
IntersectingProteins <- c(IntersectingProteins2, IntersectingProteins3)
## make dataframe containing the groups and the proteins
IntersectingProteinsDF <- data.frame(
Group = rep(names(IntersectingProteins), lengths(IntersectingProteins)),
Proteins = unlist(IntersectingProteins)
)
CollapsedTable <- IntersectingProteinsDF %>%
group_by(Group) %>%
summarise(Proteins = paste(Proteins, collapse = ", "))
CollapsedTable %>% knitr::kable()
KruskalResults <- KruskalTest(AgeData %>% mutate(Status= GestationalAge))
KruskalResults$Significant %>% select(Protein, p.adj) %>%
## make nice table
knitr::kable()
PoIs <- KruskalResults$Significant$Protein[1:9]
AgeData %>% filter(Protein %in% PoIs) %>% normalizeIntensityOnFeature() %>%
ggplot(aes(x = GestationalAge, y = Intensity, fill = GestationalAge)) +
## wrap panel to protein
facet_wrap(~Protein) +
geom_boxplot() +
ggtitle("Expression of Kruskal sig. Proteins over gestational age 1/2") + theme_minimal() +
## draw borders around panels
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
## rotate x-axis label by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## name x and y axis
xlab("Gestational Age Group") + ylab("Normalized Intensity")
PoIs <- c("P02771_AFP", "P00915_CA1", "Q86X55_CARM1")
AgeData %>% filter(Protein %in% PoIs) %>% normalizeIntensityOnFeature() %>%
ggplot(aes(x = GestationalAge, y = Intensity, fill = GestationalAge)) +
## wrap panel to protein
facet_wrap(~Protein) +
geom_boxplot() +
ggtitle("Expression of Kruskal sig. Proteins over gestational age 2/2") + theme_minimal() +
## draw borders around panels
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
## rotate x-axis label by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## name x and y axis
xlab("Gestational Age Group") + ylab("Normalized Intensity")
ANOVAResults <- AgeData %>%
group_by(Protein) %>%
rstatix::anova_test(Intensity ~  GestationalAge + Status) %>%
rstatix::adjust_pvalue(method = "BH") %>%
rstatix::add_significance(p.col = "p.adj")
ANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(GestationalAge < 0.05 & Status < 0.05)
PoIs <- c("P80511_S100A12", "P43490_NAMPT")
colors <- assign_colors(unique(AgeData %>% arrange(Status) %>% pull(Status)))
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
## use colors
scale_fill_manual(values = colors) +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
InteractionANOVAResults <- AgeData %>%
group_by(Protein) %>%
rstatix::anova_test(Intensity ~  GestationalAge * Status) %>%
rstatix::adjust_pvalue(method = "BH") %>%
rstatix::add_significance(p.col = "p.adj")
InteractionANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(`GestationalAge:Status` < 0.05)
InteractionANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(`GestationalAge:Status` < 0.05)
PoIs  <- c("P06737_PYGL", "P12111_COL6A3", "P13010_XRCC5", "P83881_RPL36A", "Q93008_USP9X")
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
scale_fill_manual(values = colors) +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
InteractionANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(Status < 0.05) %>%
knitr::kable()
PoIs  <- InteractionANOVAResults %>% data.frame()%>% filter(Effect == "Status") %>% filter(p.adj < 0.05) %>% arrange(p.adj) %>% head(9) %>% pull(Protein)
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
scale_fill_manual(values = colors) +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
LiberalANOVAResults <- AgeData %>%
group_by(Protein) %>%
rstatix::anova_test(Intensity ~  GestationalAge * Status)
BothANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(Status < 0.05 & GestationalAge < 0.05) %>%
arrange(Status)
BothANOVAProteins <- BothANOVAResults %>% pull(Protein)
## include graphic
knitr::include_graphics(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Biomarker\ANOVAResults\string_network_vector_graphic.svg)")
StringResults <- STRING(BothANOVAProteins, STRINGBackground = unique(CorrectedData$Protein))
StringResults$ProcessPlot
StringResults$FunctionPlot
LiberalANOVAProteins <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(`GestationalAge:Status` < 0.05) %>%
arrange(`GestationalAge:Status`)
View(LiberalANOVAProteins)
LiberalANOVAProteins %>% pull(Protein)
STRINGResults <- BiomarkR::STRING(LiberalANOVAProteins %>% pull(Protein), STRINGBackground = unqiue(AgeData$Protein))
STRINGResults <- BiomarkR::STRING(LiberalANOVAProteins %>% pull(Protein), STRINGBackground = unique(AgeData$Protein))
STRINGResults
## include png
filepath <- r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Biomarker\ANOVAResults\InteractionSignificantProteins.png)"
## load plot
png::readPNG(filepath) %>%
grid::rasterGrob(interpolate = TRUE) %>%
grid::grid.draw()
## load plot
png::readPNG(filepath)
```{r}
## load plot
knitr::include_graphics(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Biomarker\ANOVAResults\InteractionSignificantProteins.png)")
STRINGResults <- BiomarkR::STRING(LiberalANOVAProteins %>% pull(Protein), STRINGBackground = unique(DataQuantRaw$Protein))
STRINGResults
plot_list <- EffectAnalysisList %>% map(~ .$EffectPlot + theme(text = element_text(size = 7)))
# Arrange plots in a panel
ggpubr::ggarrange(plotlist = plot_list, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "left")
# Arrange plots in a panel
ggpubr::ggarrange(plotlist = plot_list, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "left")
AgeData %>%
## plot Gestational age over Age at collection
ggplot(aes(x = GestationalAge, y = AgeAtCollection)) +
geom_point()
AgeData %>%
pivot_wider(names_from = Protein, values_from = Intensity) %>%
## plot Gestational age over Age at collection
ggplot(aes(x = GestationalAge, y = AgeAtCollection)) +
geom_point()
CorrectedData %>%
pivot_wider(names_from = Protein, values_from = Intensity) %>%
## plot Gestational age over Age at collection
ggplot(aes(x = GestationalAge, y = AgeAtCollection)) +
geom_point()
CorrectedData %>%
pivot_wider(names_from = Protein, values_from = Intensity) %>%
filter(!GestationalAge == -9) %>%
## plot Gestational age over Age at collection
ggplot(aes(x = GestationalAge, y = AgeAtCollection)) +
geom_point()
ANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(Status < 0.05)
ANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(Status < 0.05) %>% arrange(-Status)
ANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(Status < 0.05) %>% arrange(Status)
ANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(GestationalAge < 0.05) %>% arrange(GestationalAge)
ANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(GestationalAge < 0.05 & Status < 0.05)
remotes::install_github("OliSchott/BiomarkR")
library(BiomarkR)
