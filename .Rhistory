AUCResults <- AUCs(TestData, PoIs = unique(TestData$Peptide), plotname = "AUCs of the Data peptide data you sent me"
AUCResults <- AUCs(TestData, PoIs = unique(TestData$Peptide, plotname = "AUCs of the Data peptide data you sent me")
AUCResults <- AUCs(TestData, PoIs = unique(TestData$Peptide), plotname = "AUCs of the Data peptide data you sent me")
## Calculating the AUCs for a list of PoIs
## add roxygen comments
#' @title AUCs
#' @description Calculates the AUCs for a list of PoIs in the provided dataset.
#' @param dataset The dataset to be tested
#' @param PoIs A vector containing the Proteins of interest. Example: c(""Q8TF72_SHROOM3" , "Q9ULZ3_PYCARD") or (unique(dataset$Protein))
#' @param plotname The name to be displayed on created plots
#' @return A list object containing the results of the AUCs and a plot
#' @export
AUCs <- function(dataset, PoIs, plotname = "") {
dataset <- dataset %>% dplyr::arrange(Status)
## Calculate difference betwen mean exrpession in status
### Check if dataset has more than 2 unique entries in Status
if(length(unique(dataset$Status)) > 2){
stop("More than 2 unique entries in Status")
} else {
Status1 <- unique(dataset$Status)[1]
Status2 <- unique(dataset$Status)[2]
}
# Create an empty data frame to store results
AUCResults <- data.frame(PoI = character(0), AUC = numeric(0))
# Loop through each PoI (Protein or Peptide of Interest)
for (i in 1:length(PoIs)) {
PoI <- PoIs[i]
# Filter dataset based on whether it's Protein or Peptide
if ("Protein" %in% colnames(dataset)) {
ROCData <- dplyr::filter(dataset, Protein %in% PoI)
}
if ("Peptide" %in% colnames(dataset)) {
ROCData <- dplyr::filter(dataset, Peptide %in% PoI)
}
# Ensure Status is treated as a factor
ROCData$Status <- ROCData$Status %>% as.factor()
# Calculate ROC curve and AUC
ROC <- pROC::roc(data = ROCData, response = "Status", predictor = "Intensity")
# Extract AUC value
AUC <- ROC$auc
# Populate AUCResults data frame
AUCResults[i, 1] <- PoI
AUCResults[i, 2] <- AUC
# Arrange AUCResults by decreasing AUC values
AUCResults <- dplyr::arrange(AUCResults, desc(AUC))
}
# Create AUC plot using ggplot2
AUCPlot <- ggplot2::ggplot(data = AUCResults) +
ggplot2::geom_col(mapping = ggplot2::aes(x = reorder(PoI, -AUC), y = AUC)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +
ggplot2::ggtitle(label = plotname) +
ggplot2::xlab(label = "PoI") +
ggplot2::geom_hline(yintercept = 0.5)
if("Protein" %in% colnames(dataset)){
Diff <- dataset %>%
group_by(Protein) %>%
summarise(Diff = mean(Intensity[Status == Status1], na.rm = T) - mean(Intensity[Status == Status2], na.rm = T))
}
if("Peptide" %in% colnames(dataset)){
Diff <- dataset %>%
group_by(Peptide) %>%
summarise(Diff = mean(Intensity[Status == Status1], na.rm = T) - mean(Intensity[Status == Status2], na.rm = T))
}
colnames(AUCResults)[1] <- ifelse("Protein" %in% colnames(dataset), "Protein", "Peptide")
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(Protein,'_', 2),
str_split_i(Peptide,'_', 2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
VulcanoPlot <- ## volcano plot of Results
ggplot2::ggplot(Vulcanoplotdata, aes(x = Diff, y = AUC)) +
ggplot2::geom_point(aes(col = ifelse(Direction == "Up", "blue", "red"))) +
ggrepel::geom_text_repel(aes(label = Gene), box.padding = 0.5) +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## fix y axis from 0 to 1
ggplot2::scale_y_continuous(limits = c(0.5, 1)) +
## rename axis
ggplot2::xlab(paste("Fold Change in ", Status1)) +
ggplot2::ylab("AUC") +
## add title
ggplot2::ggtitle(plotname) +
## remove legend
ggplot2::theme(legend.position = "none")
# Create output list containing results and plot
Output <- list()
Output$results <- AUCResults
Output$plot <- AUCPlot
Output$VulcanoPlot <- VulcanoPlot
return(Output)
}
AUCResults <- AUCs(TestData, PoIs = unique(TestData$Peptide), plotname = "AUCs of the Data peptide data you sent me")
AUCResults <- AUCs(TestData, PoIs = unique(TestData$Peptide), plotname = "AUCs | normal VS AD")
AUCResults$VulcanoPlot
View(AUCResults)
Intersting <- AUCResults$results %>%
filter(grepl("ARPC1B", Peptide))
View(Intersting)
View(DataQuant)
X <- AUCResults$results
View(X)
View(Vulcanoplotdata)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(Protein,'_', 2),
str_split_i(Peptide,'_', 2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
dataset <- dataset %>% dplyr::arrange(Status)
## Calculate difference betwen mean exrpession in status
### Check if dataset has more than 2 unique entries in Status
if(length(unique(dataset$Status)) > 2){
stop("More than 2 unique entries in Status")
} else {
Status1 <- unique(dataset$Status)[1]
Status2 <- unique(dataset$Status)[2]
}
# Create an empty data frame to store results
AUCResults <- data.frame(PoI = character(0), AUC = numeric(0))
# Loop through each PoI (Protein or Peptide of Interest)
for (i in 1:length(PoIs)) {
PoI <- PoIs[i]
# Filter dataset based on whether it's Protein or Peptide
if ("Protein" %in% colnames(dataset)) {
ROCData <- dplyr::filter(dataset, Protein %in% PoI)
}
if ("Peptide" %in% colnames(dataset)) {
ROCData <- dplyr::filter(dataset, Peptide %in% PoI)
}
# Ensure Status is treated as a factor
ROCData$Status <- ROCData$Status %>% as.factor()
# Calculate ROC curve and AUC
ROC <- pROC::roc(data = ROCData, response = "Status", predictor = "Intensity")
# Extract AUC value
AUC <- ROC$auc
# Populate AUCResults data frame
AUCResults[i, 1] <- PoI
AUCResults[i, 2] <- AUC
# Arrange AUCResults by decreasing AUC values
AUCResults <- dplyr::arrange(AUCResults, desc(AUC))
}
# Create AUC plot using ggplot2
AUCPlot <- ggplot2::ggplot(data = AUCResults) +
ggplot2::geom_col(mapping = ggplot2::aes(x = reorder(PoI, -AUC), y = AUC)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +
ggplot2::ggtitle(label = plotname) +
ggplot2::xlab(label = "PoI") +
ggplot2::geom_hline(yintercept = 0.5)
if("Protein" %in% colnames(dataset)){
Diff <- dataset %>%
group_by(Protein) %>%
summarise(Diff = mean(Intensity[Status == Status1], na.rm = T) - mean(Intensity[Status == Status2], na.rm = T))
}
if("Peptide" %in% colnames(dataset)){
Diff <- dataset %>%
group_by(Peptide) %>%
summarise(Diff = mean(Intensity[Status == Status1], na.rm = T) - mean(Intensity[Status == Status2], na.rm = T))
}
colnames(AUCResults)[1] <- ifelse("Protein" %in% colnames(dataset), "Protein", "Peptide")
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(Protein,'_', 2),
str_split_i(Peptide,'_', 2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
View(Vulcanoplotdata)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(Protein,'_', 2),
str_split_i(Peptide,'_', 2)))
View(Vulcanoplotdata)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC))
View(Vulcanoplotdata)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(Protein,pattern ='_', 2),
str_split_i(Peptide,pattern = '_', 2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
View(Vulcanoplotdata)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(.$Protein,pattern ='_', 2),
str_split_i(.$Peptide,pattern = '_', 2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
View(Vulcanoplotdata)
?str_split_i
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(string = Protein,pattern ='_', 2),
str_split_i(string = Peptide,pattern = '_', 2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
View(Vulcanoplotdata)
"Protein" %in% colnames(dataset)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(string = Protein,pattern ='_',i = 2),
str_split_i(string = Peptide,pattern = '_',i = 2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
View(Vulcanoplotdata)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(string = "Protein",pattern ='_',i = 2),
str_split_i(string = "Peptide",pattern = '_',i = 2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
View(Vulcanoplotdata)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(ifelse("Protein" %in% colnames(dataset),
Gene = str_split_i(string = Protein,pattern ='_',i = 2),
Gene =  str_split_i(string = Peptide,pattern = '_',i = 2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(ifelse("Protein" %in% colnames(dataset),
Gene = str_split_i(string = Protein,pattern ='_',i = 2),
Gene = str_split_i(string = Peptide,pattern = '_',i = 2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(ifelse("Protein" %in% colnames(dataset),
Gene = str_split_i(Protein,'_',2),
Gene = str_split_i(Peptide,'_',2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(Protein,'_',2),
str_split_i(Peptide,'_',2))) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
View(Vulcanoplotdata)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make Gene column
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset), stringr::str_split_i(Protein, pattern = "_", 2), stringr::str_split_i(Peptide, pattern = "_", 2)))
View(Vulcanoplotdata)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide"))
View(Vulcanoplotdata)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make gene column for later plot annotation
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(Protein,'_',2),
str_split_i(Peptide,'_',2)))
View(Vulcanoplotdata)
str_split_i(PoIs, "_", 2)
View(Diff)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make gene column for later plot annotation
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
str_split_i(Protein,'_',2),
str_split_i(.$Peptide,'_',2)))
View(Vulcanoplotdata)
Vulcanoplotdata$Peptide
str_split_i(Vulcanoplotdata$Peptide,"_",2)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make gene column for later plot annotation
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
stringr::str_split_i(Protein,'_',2),
stringr::str_split_i(Peptide,'_',2)))
View(Vulcanoplotdata)
"Protein" %in% colnames(dataset)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make gene column for later plot annotation
dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
stringr::str_split_i(Protein,'_',2),
stringr::str_split_i(Peptide,'_',2))) %>%
## make direction column for coloring
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
View(Vulcanoplotdata)
Dylan <- merge(Diff, AUCResults, by = "Peptide")
X <- Dylan %>% dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
stringr::str_split_i(Protein,'_',2),
stringr::str_split_i(Peptide,'_',2)))
View(X)
View(Dylan)
X <- Dylan %>% dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
stringr::str_split_i(Protein,'_',2),
stringr::str_split_i(Peptide,'_',2)))
View(X)
View(Dylan)
X <- Dylan %>% dplyr::mutate(Gene = str_split_i(Peptide, "_", 2))
View(X)
"Protein" %in% colnames(dataset)
X <- Dylan %>% dplyr::mutate(Gene = ifelse("Protein" %in% colnames(dataset),
stringr::str_split_i(Protein,'_',2),
stringr::str_split_i(Peptide,'_',2)))
View(X)
X <- Dylan %>% dplyr::mutate(Gene = ifelse("Protein" %in% colnames(.),
stringr::str_split_i(Protein,'_',2),
stringr::str_split_i(Peptide,'_',2)))
View(X)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make gene column for later plot annotation
dplyr::mutate(Gene = str_split_i(Protein, "_", 2) %>%
## make direction column for coloring
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
VulcanoPlot <- ## volcano plot of Results
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make gene column for later plot annotation
dplyr::mutate(Gene = str_split_i(Protein, "_", 2))
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make gene column for later plot annotation
if("Protein" %in% colnames(dataset)){
dplyr::mutate(Gene = str_split_i(Protein, "_", 2)) %>%
}else(
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make gene column for later plot annotation
if("Protein" %in% colnames(dataset)){
dplyr::mutate(Gene = str_split_i(Protein, "_", 2))
}else{
dplyr::mutate(Gene = str_split_i(Peptide, "_", 2))
} %>%
## make direction column for coloring
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
"Protein" %in% colnames(dataset)
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make gene column for later plot annotation
if("Protein" %in% colnames(dataset)){
dplyr::mutate(Gene = str_split_i(Protein, "_", 2))
}else{
dplyr::mutate(Gene = str_split_i(Peptide, "_", 2))
} %>%
## make direction column for coloring
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
## Calculating the AUCs for a list of PoIs
## add roxygen comments
#' @title AUCs
#' @description Calculates the AUCs for a list of PoIs in the provided dataset.
#' @param dataset The dataset to be tested
#' @param PoIs A vector containing the Proteins of interest. Example: c(""Q8TF72_SHROOM3" , "Q9ULZ3_PYCARD") or (unique(dataset$Protein))
#' @param plotname The name to be displayed on created plots
#' @return A list object containing the results of the AUCs and a plot
#' @export
AUCs <- function(dataset, PoIs, plotname = "") {
dataset <- dataset %>% dplyr::arrange(Status)
## Calculate difference betwen mean exrpession in status
### Check if dataset has more than 2 unique entries in Status
if(length(unique(dataset$Status)) > 2){
stop("More than 2 unique entries in Status")
} else {
Status1 <- unique(dataset$Status)[1]
Status2 <- unique(dataset$Status)[2]
}
# Create an empty data frame to store results
AUCResults <- data.frame(PoI = character(0), AUC = numeric(0))
# Loop through each PoI (Protein or Peptide of Interest)
for (i in 1:length(PoIs)) {
PoI <- PoIs[i]
# Filter dataset based on whether it's Protein or Peptide
if ("Protein" %in% colnames(dataset)) {
ROCData <- dplyr::filter(dataset, Protein %in% PoI)
}
if ("Peptide" %in% colnames(dataset)) {
ROCData <- dplyr::filter(dataset, Peptide %in% PoI)
}
# Ensure Status is treated as a factor
ROCData$Status <- ROCData$Status %>% as.factor()
# Calculate ROC curve and AUC
ROC <- pROC::roc(data = ROCData, response = "Status", predictor = "Intensity")
# Extract AUC value
AUC <- ROC$auc
# Populate AUCResults data frame
AUCResults[i, 1] <- PoI
AUCResults[i, 2] <- AUC
# Arrange AUCResults by decreasing AUC values
AUCResults <- dplyr::arrange(AUCResults, desc(AUC))
}
# Create AUC plot using ggplot2
AUCPlot <- ggplot2::ggplot(data = AUCResults) +
ggplot2::geom_col(mapping = ggplot2::aes(x = reorder(PoI, -AUC), y = AUC)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +
ggplot2::ggtitle(label = plotname) +
ggplot2::xlab(label = "PoI") +
ggplot2::geom_hline(yintercept = 0.5)
if("Protein" %in% colnames(dataset)){
Diff <- dataset %>%
group_by(Protein) %>%
summarise(Diff = mean(Intensity[Status == Status1], na.rm = T) - mean(Intensity[Status == Status2], na.rm = T))
}
if("Peptide" %in% colnames(dataset)){
Diff <- dataset %>%
group_by(Peptide) %>%
summarise(Diff = mean(Intensity[Status == Status1], na.rm = T) - mean(Intensity[Status == Status2], na.rm = T))
}
colnames(AUCResults)[1] <- ifelse("Protein" %in% colnames(dataset), "Protein", "Peptide")
if("Protein" %in% colnames(dataset)){
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Protein" %in% colnames(dataset),"Protein", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make gene column for later plot annotation
dplyr::mutate(Gene = str_split_i(Protein, "_", 2)) %>%
## make direction column for coloring
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
}
if("Peptide" %in% colnames(dataset)){
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = ifelse("Peptide" %in% colnames(dataset),"Peptide", "Peptide")) %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
## make gene column for later plot annotation
dplyr::mutate(Gene = str_split_i(Peptide, "_", 2)) %>%
## make direction column for coloring
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
}
VulcanoPlot <- ## volcano plot of Results
ggplot2::ggplot(Vulcanoplotdata, aes(x = Diff, y = AUC)) +
ggplot2::geom_point(aes(col = ifelse(Direction == "Up", "blue", "red"))) +
ggrepel::geom_text_repel(aes(label = Gene), box.padding = 0.5) +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## fix y axis from 0 to 1
ggplot2::scale_y_continuous(limits = c(0.5, 1)) +
## rename axis
ggplot2::xlab(paste("Fold Change in ", Status1)) +
ggplot2::ylab("AUC") +
## add title
ggplot2::ggtitle(plotname) +
## remove legend
ggplot2::theme(legend.position = "none")
# Create output list containing results and plot
Output <- list()
Output$results <- AUCResults
Output$plot <- AUCPlot
Output$VulcanoPlot <- VulcanoPlot
return(Output)
}
AUCResults <- AUCs(TestData, PoIs = unique(TestData$Peptide), plotname = "AUCs | normal VS AD")
AUCResults$VulcanoPlot
