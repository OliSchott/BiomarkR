"Group" = c("very-pre-term", "pre-term", "early-term", "full-term", "late-term")
))
## binning gestational age
AgeData <- CorrectedData %>%
filter(Status %in% c("SIDS", "Healthy Control", "Demise Control")) %>%
## combine controls and call them control
mutate(Status = ifelse(Status %in% c("Healthy Control", "Demise Control"), "Control", Status)) %>%
mutate(GestationalAge = case_when(
GestationalAge <= 31 ~ "very-pre-term",
GestationalAge > 31 & GestationalAge < 37 ~ "pre-term",
GestationalAge >= 37 & GestationalAge < 39 ~ "early-term",
GestationalAge >= 39 & GestationalAge < 41 ~ "full-term",
GestationalAge >= 41 ~ "late-term"
))
## Make GestationalAge a factor and get it into the right order
AgeData$GestationalAge <- factor(AgeData$GestationalAge, levels = c("very-pre-term", "pre-term", "early-term", "full-term", "late-term"))
## plot AgeData
colors <- assign_colors(AgeData %>% arrange(Status) %>% pull(Status) %>% unique())
AgeData %>% pivot_wider(names_from = Protein, values_from = Intensity) %>%
## plot distributions of gestational age
group_by(GestationalAge, Status) %>%
summarise(n = n()) %>%
ggplot(aes(x = GestationalAge, y = n, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = colors) +
theme_minimal() +
ggtitle("Distribution of the Gestational Age groups") +
xlab("Gestational Age Group") + ylab("Number of Samples")
EffectAnalysisList <- list()
GestAges <- unique(AgeData$GestationalAge)
for(i in 1:length(GestAges)){
## choose Gestational age
GestAge <- GestAges[[i]]
## filter dataset
EffectData <- AgeData %>% filter(GestationalAge == GestAge)
## perform effect analysis
EffectResults <- EffectAnalysis(EffectData, plotname = GestAge)
EffectPlot <- EffectResults$EffectPlot + ggtitle(paste(GestAge))
EffectCorrelationPlot <- EffectResults$EffectCorrelationsPlot
## put Results in List
EffectAnalysisList[[paste(GestAge)]] <- list(EffectPlot = EffectPlot, EffectCorrelationPlot= EffectCorrelationPlot)
}
plot_list <- EffectAnalysisList %>% map(~ .$EffectPlot + theme(text = element_text(size = 7)))
# Arrange plots in a panel
ggpubr::ggarrange(plotlist = plot_list, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "left")
KruskalResults <- KruskalTest(AgeData %>% mutate(Status = GestationalAge))
HeatMap(AgeData %>% mutate(Status = GestationalAge), PoIs = KruskalResults$Significant$Protein, plotname = "Kruskal Wallis Test", method = "supervised", cluster_columns = F, show_row_names = T)
KruskalResults <- KruskalTest(AgeData %>% mutate(Status = GestationalAge), p.adj.method = "none")
HeatMap(AgeData %>% mutate(Status = GestationalAge), PoIs = KruskalResults$Significant$Protein, plotname = "Kruskal Wallis Test", method = "supervised", cluster_columns = F, show_row_names = F)
## load MEGENA results
AgeMEGENAResults <- readRDS(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Biomarker\OntogonyResults\AgeMEGENAResults.rds)")
AgeMEGENAResults$HirarchyPlot
AgeMEGENAResults$CorrelationResults$Plot$GestationalAge
ModuleFinder <- function(Protein, Modules){
## loop through modules
for(i in 1:length(Modules)){
Module <- Modules[[i]]
if(Protein %in% Module){
return(names(Modules)[i])
}
}
}
## get modules for all proteins
## make dataframe with 2 columns
ModuleResults <- data.frame(Protein = character(), Module = character())
for(j in 1:length(KruskalResults$Significant$Protein)){
PoI <- KruskalResults$Significant$Protein[[j]]
Module <- ModuleFinder(PoI, AgeMEGENAResults$Summary$modules)
## If Module is Null say NA
if(is.null(Module)){
Module <- NA
}
## put PoI and Module in ModuleResults
ModuleResults <- rbind(ModuleResults, data.frame(Protein = PoI, Module = Module))
}
ModuleResults <- ModuleResults %>% distinct()
## plot moduleresults
ModuleResults %>%
group_by(Module) %>%
summarise(n = n()) %>%
knitr::kable()
## get significant modules
SigModules <- c("c1_3", "c1_4", "c1_6", "c1_9", "c1_8","c1_11")
## Calculate and plot Splines that significantly correlate with gestational age
Splines <- list()
for (i in 1:length(SigModules)){
## get module
Module <- SigModules[[i]]
## get Proteins in Module
PoIs <- AgeMEGENAResults$Summary$modules[[Module]]
SplineResults <- SplineRegression(AgeData %>% filter(Status =="Control"), PoIs = PoIs, plotname = Module, Timecol = "GestationalAge", B = 100, alpha = 0.05,show_all_proteins = F)
PlinePlot <- SplineResults$Plot
## put PlinePlot in Splines
Splines[[Module]] <- PlinePlot
}
## make sure all plots in Spline have the same y range
## get range of y values
yValues <- data.frame()
for (i in 1:length(Splines)){
## get range of y values
range <- Splines[[i]]$layers[[4]]$data
## put range in yValues
yValues <- rbind(yValues, range)
}
ymax <- max(yValues$upper)
ymin <- min(yValues$lower)
range <- c(ymin,ymax)
## apply range to all plots in Splines
for (i in 1:length(Splines)){
Splines[[i]] <- Splines[[i]] + ylim(range)
}
## pick colors
colors <- assign_colors(Splines)
## assign colors to modules
for(i in 1:length(Splines)){
## make spline in C1_3 green
Splines[[i]]$layers[[4]]$aes_params$colour <- colors[[i]]
Splines[[i]]$layers[[4]]$aes_params$fill <- colors[[i]]
Splines[[i]]$layers[[3]]$aes_params$size = 2
}
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
Splines$c1_3$data
## extract data from all splines
SplineData <- data.frame()
for (i in 1:length(names(Splines))){
print(i)
}
Data <- Splines[[i]]$data
View(Data)
Data <- Data %>% mutate(Module = names(Splines)[i])
## extract data from all splines
SplineData <- data.frame()
for (i in 1:length(names(Splines))){
Data <- Splines[[i]]$data
Data <- Data %>% mutate(Module = names(Splines)[i])
SplineData <- rbind(SplineData, Data)
}
View(SplineData)
##
Pltdata <- SplineData %>%
filter(data == "Protein")
View(Pltdata)
## plot different Modules
ggplot(Pltdata, aes(x = as.numeric(GestationalaGe), y = meanFit, color = Module)) +
geom_line()
## plot different Modules
ggplot(Pltdata, aes(x = as.numeric(GestationalAge), y = meanFit, color = Module)) +
geom_line()
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module)) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2)
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = GestationalAge, y = meanFit, color = Module)) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2)
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module)) +
## add ribbons for lower and upper
geom_ribbon(aes(x = GestationalAge, ymin = lower, ymax = upper, fill = Module), alpha = 0.2)
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module)) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2)
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module)) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge)
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module)) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal()
##
Pltdata <- SplineData
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module)) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal()
##
Pltdata <- SplineData %>%
filter(data == "Protein")
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module)) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal()
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module)) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("Intensity") +
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module)) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("normalized Intensity")
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module)) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("Normalized Intensity") +
## make fint size bigger
theme(text = element_text(size = 20))
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module), size =2) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("Normalized Intensity") +
## make fint size bigger
theme(text = element_text(size = 20))
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module), linewidth =2) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("Normalized Intensity") +
## make fint size bigger
theme(text = element_text(size = 20))
colors <- assign_colors(Splines)
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module), linewidth =2) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("Normalized Intensity") +
## make fint size bigger
theme(text = element_text(size = 20)) +
## use colors
scale_color_manual(values = colors)
BigPlot
## get significant modules
SigModules <- c("c1_3", "c1_4", "c1_6", "c1_9", "c1_8","c1_11")
## Calculate and plot Splines that significantly correlate with gestational age
Splines <- list()
for (i in 1:length(SigModules)){
## get module
Module <- SigModules[[i]]
## get Proteins in Module
PoIs <- AgeMEGENAResults$Summary$modules[[Module]]
SplineResults <- SplineRegression(AgeData %>% filter(Status =="Control"), PoIs = PoIs, plotname = Module, Timecol = "GestationalAge", B = 100, alpha = 0.05,show_all_proteins = F)
PlinePlot <- SplineResults$Plot
## put PlinePlot in Splines
Splines[[Module]] <- PlinePlot
}
## make sure all plots in Spline have the same y range
## get range of y values
yValues <- data.frame()
for (i in 1:length(Splines)){
## get range of y values
range <- Splines[[i]]$layers[[4]]$data
## put range in yValues
yValues <- rbind(yValues, range)
}
ymax <- max(yValues$upper)
ymin <- min(yValues$lower)
range <- c(ymin,ymax)
## apply range to all plots in Splines
for (i in 1:length(Splines)){
Splines[[i]] <- Splines[[i]] + ylim(range)
}
## pick colors
colors <- assign_colors(Splines)
## assign colors to modules
for(i in 1:length(Splines)){
## make spline in C1_3 green
Splines[[i]]$layers[[4]]$aes_params$colour <- colors[[i]]
Splines[[i]]$layers[[4]]$aes_params$fill <- colors[[i]]
Splines[[i]]$layers[[3]]$aes_params$size = 2
}
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
BigPlot
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module), linewidth =2) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.5) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("Normalized Intensity") +
## make fint size bigger
theme(text = element_text(size = 20)) +
## use colors
scale_color_manual(values = colors)
colors
## pick colors
colors <- assign_colors(names(Splines))
## assign colors to modules
for(i in 1:length(Splines)){
## make spline in C1_3 green
Splines[[i]]$layers[[4]]$aes_params$colour <- colors[[i]]
Splines[[i]]$layers[[4]]$aes_params$fill <- colors[[i]]
Splines[[i]]$layers[[3]]$aes_params$size = 2
}
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
BigPlot
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module), linewidth =2) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.5) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("Normalized Intensity") +
## make fint size bigger
theme(text = element_text(size = 20)) +
## use colors
scale_color_manual(values = colors)
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module), linewidth =2) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = colors), alpha = 0.5) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("Normalized Intensity") +
## make fint size bigger
theme(text = element_text(size = 20)) +
## use colors
scale_color_manual(values = colors)
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module), linewidth =2) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper), alpha = 0.5) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("Normalized Intensity") +
## make fint size bigger
theme(text = element_text(size = 20)) +
## use colors
scale_color_manual(values = colors)
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module), linewidth =2) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("Normalized Intensity") +
## make fint size bigger
theme(text = element_text(size = 20)) +
## use colors
scale_color_manual(values = colors)
## plot different Modules
ggplot(Pltdata) +
geom_line(aes(x = as.numeric(GestationalAge), y = meanFit, color = Module), linewidth =2) +
## add ribbons for lower and upper
geom_ribbon(aes(x = as.numeric(GestationalAge), ymin = lower, ymax = upper, fill = Module), alpha = 0.2) +
## use entries in GestationalAge as x axis label
scale_x_continuous(breaks = as.numeric(Pltdata$GestationalAge), labels = Pltdata$GestationalAge) +
theme_minimal() +
## rename x and y axis
xlab("Gestational Age") +
ylab("Normalized Intensity") +
## make fint size bigger
theme(text = element_text(size = 20)) +
## use colors
scale_color_manual(values = colors) +
## rotate x axis labels by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## load STRING results
STRINGResults <- readRDS(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Biomarker\OntogonyResults\STRINGResults.rds)")
STRINGResults$c1_3$ProcessPlot
STRINGResults$c1_6$ProcessPlot
STRINGResults$c1_9$ProcessPlot
STRINGResults$c1_11$ProcessPlot
## get significant modules
SigModules <- c("c1_3","c1_4","c1_6","c1_8" ,"c1_9","c1_11")
## Calculate and plot Splines that significantly correlate with gestational age
Splines <- list()
for (i in 1:length(SigModules)){
## get module
Module <- SigModules[[i]]
## get Proteins in Module
PoIs <- AgeMEGENAResults$Summary$modules[[Module]]
SplineResults <- SplineRegression(AgeData, PoIs = PoIs, plotname = Module, Timecol = "GestationalAge", split_status = T, alpha = 0.01, show_all_proteins = T)
PlinePlot <- SplineResults$Plot
## put PlinePlot in Splines
Splines[[Module]] <- PlinePlot
}
## make sure all plots in Spline have the same y range
## get range of y values
yValues <- data.frame()
for (i in 1:length(Splines)){
## get range of y values
range <- Splines[[i]]$layers[[4]]$data
## put range in yValues
yValues <- rbind(yValues, range)
}
ymax <- max(yValues$upper)
ymin <- min(yValues$lower)
range <- c(ymin,ymax)
## apply range to all plots in Splines
for (i in 1:length(Splines)){
Splines[[i]] <- Splines[[i]] + coord_cartesian(ylim = c(-1, 1))
}
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
BigPlot
## get module
Module <- "c1_58"
X <- SplineRegression(AgeData, PoIs = AgeMEGENAResults$Summary$modules[[Module]], plotname = Module, Timecol = "GestationalAge", split_status = T, alpha = 0.05, show_all_proteins = T)
Plot  <- X$Plot +  coord_cartesian(ylim = c(-1, 1))
Plot
## deselect C1_58 and C1_4
Splines <- Splines[-c(2,4)]
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 2, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
BigPlot
BigPlot
for (i in 1:length(Splines)){
Splines[[i]] <- Splines[[i]] +
coord_cartesian(ylim = c(-1, 1)) +
## make font bigger
theme(text = element_text(size = 20))
}
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 3, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
BigPlot
BigPlot
BigPlot
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 2, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 2, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
BigPlot
BigPlot
for (i in 1:length(Splines)){
Splines[[i]] <- Splines[[i]] +
coord_cartesian(ylim = c(-1, 1)) +
## make font bigger
theme(text = element_text(size = 20)) +
## remove x axis label
theme(axis.title.x=element_blank())
}
## arrange Splines using ggpubr
BigPlot <- ggpubr::ggarrange(plotlist = Splines, ncol = 2, nrow = 2, common.legend = TRUE, align = "hv", legend = "right")
BigPlot
BigPlot
BigPlot
