if(length(unique(dataset$Status)) > 2){
stop("More than 2 unique entries in Status")
} else {
Status1 <- unique(dataset$Status)[1]
Status2 <- unique(dataset$Status)[2]
}
# Create an empty data frame to store results
AUCResults <- data.frame(PoI = character(0), AUC = numeric(0))
# Loop through each PoI (Protein or Peptide of Interest)
for (i in 1:length(PoIs)) {
PoI <- PoIs[i]
# Filter dataset based on whether it's Protein or Peptide
if ("Protein" %in% colnames(dataset)) {
ROCData <- dplyr::filter(dataset, Protein %in% PoI)
}
if ("Peptide" %in% colnames(dataset)) {
ROCData <- dplyr::filter(dataset, Peptide %in% PoI)
}
# Ensure Status is treated as a factor
ROCData$Status <- ROCData$Status %>% as.factor()
# Calculate ROC curve and AUC
ROC <- pROC::roc(data = ROCData, response = "Status", predictor = "Intensity")
# Extract AUC value
AUC <- ROC$auc
# Populate AUCResults data frame
AUCResults[i, 1] <- PoI
AUCResults[i, 2] <- AUC
# Arrange AUCResults by decreasing AUC values
AUCResults <- dplyr::arrange(AUCResults, desc(AUC))
}
# Create AUC plot using ggplot2
AUCPlot <- ggplot2::ggplot(data = AUCResults) +
ggplot2::geom_col(mapping = ggplot2::aes(x = reorder(PoI, -AUC), y = AUC)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +
ggplot2::ggtitle(label = plotname) +
ggplot2::xlab(label = "PoI") +
ggplot2::geom_hline(yintercept = 0.5)
if("Protein" %in% colnames(dataset)){
Diff <- dataset %>%
group_by(Protein) %>%
summarise(Diff = mean(Intensity[Status == Status1], na.rm = T) - mean(Intensity[Status == Status2], na.rm = T))
}
if("Peptide" %in% colnames(dataset)){
Diff <- dataset %>%
group_by(Peptide) %>%
summarise(Diff = mean(Intensity[Status == Status1], na.rm = T) - mean(Intensity[Status == Status2], na.rm = T))
}
colnames(AUCResults)[1] <- "Protein"
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = "Protein") %>%
## Add AUC to 0.5 if value is less than 0.5
dplyr::mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
dplyr::mutate(Gene = str_split_i(Protein, "_", 2)) %>%
dplyr::mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
dplyr::arrange(desc(AUC))
VulcanoPlot <- ## volcano plot of Results
ggplot2::ggplot(Vulcanoplotdata, aes(x = Diff, y = AUC)) +
ggplot2::geom_point(aes(col = ifelse(Direction == "Up", "blue", "red"))) +
ggrepel::geom_text_repel(aes(label = Gene), box.padding = 0.5) +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## fix y axis from 0 to 1
ggplot2::scale_y_continuous(limits = c(0.5, 1)) +
## rename axis
ggplot2::xlab(paste("Fold Change in ", Status1)) +
ggplot2::ylab("AUC") +
## add title
ggplot2::ggtitle(plotname) +
## remove legend
ggplot2::theme(legend.position = "none")
# Create output list containing results and plot
Output <- list()
Output$results <- AUCResults
Output$plot <- AUCPlot
Output$VulcanoPlot <- VulcanoPlot
return(Output)
}
AUCResults <- AUCs(CorrectedData, PoIs = unique(CorrectedData$Protein))
AUCResults$VulcanoPlot
BiomarkR::BoxPlotsFeatures(CorrectedData, PoIs = AUCResults$results$Protein %>% head(6))
PrimaryEffects$PCA$ScorePlot2D
PrimaryEffects$EffectPlot
PrimaryEffects$EffectCorrelationsPlot
View(DataClinRaw)
View(DataClinRaw)
### import raw data
DataQuantRaw <- BiomarkR::ImportMSData(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP_Plasma\HSP_perCA_Plasma_Diann_Results\report.pg_matrix.tsv)", programm = "diann", SampleID = T)
DataQuant <- DataQuantRaw %>%
## filter out the following samples c("AEZCV","BQUWN", "USOEI"))
filter(Sample != "AEZCV" & Sample != "BQUWN" & Sample != "USOEI") %>%
RemoveOutliers(Stdev = 1.5)
source("C:/Users/CH254567/OneDrive/Working/Programs/BiomarkR/R/R.R", echo=TRUE)
## add roxygen comments
#' @title WTest
#' @description This function performs differential expression analysis using a Wilcox test.
#' @param dataset The dataset to be tested
#' @param plotname The name to be displayed on created plots
#' @param method The method to be used for the Heatmap (unsupervised, supervised)
#' @param clustDist The distance metric to be used for clustering in the Heatmap ("euclidean", "maximum", "man-hattan", "canberra", "binary", "minkowski", "pearson", "spearman", "kendall")
#' @param p.adj.method The method to be used for p-value adjustment ("BH", "holm", "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", "none")
#' @return A list object containing the results of the Wilcox test, the significant features and a volcano plot
#' @export
WTest <- function(dataset, plotname = "", method = "unsupervised", clustDist = "euclidean", p.adj.method = "BH") {
datasetW <- dataset %>% dplyr::arrange(Status)
Status1 <- unique(datasetW$Status)[1] %>% as.character()
Status2 <- unique(datasetW$Status)[2] %>% as.character()
## error if there are more than 2 groups
if(length(unique(datasetW$Status)) > 2) {
stop("Only two groups (Status) are allowed for Wilcox-Test")
}
## Running the W-Test
if("Protein" %in% colnames(dataset)) {
## Making sure we have at least 2 Observations per group
filter <- datasetW %>%
dplyr::select(c("Sample", "Status", "Protein", "Intensity")) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "Intensity") %>%
dplyr::group_by(Protein) %>%
dplyr::summarise(
ObsInStatus1 = sum(!is.na(.data[[Status1]])),
ObsInStatus2 = sum(!is.na(.data[[Status2]]))
) %>%
dplyr::mutate(possible = ifelse(ObsInStatus1 < 2 | ObsInStatus2 < 2, FALSE, TRUE)) %>%
dplyr::filter(possible)
WResults <- datasetW %>%
dplyr::filter(Protein %in% filter$Protein) %>%
dplyr::group_by(Protein) %>%
rstatix::wilcox_test(Intensity ~ Status, detailed = TRUE) %>%
rstatix::adjust_pvalue(method = p.adj.method) %>%
dplyr::mutate(
UniprotID = stringr::str_split_i(Protein, pattern = "_", 1),
Gene = stringr::str_split_i(Protein, pattern = "_", 2),
log10adjustP = -1 * log10(p.adj)
)
## Create dataframe of significant Proteins in global environment
WilcoxSignificantFeatures <- WResults %>%
dplyr::filter(p.adj < 0.05) %>%
dplyr::arrange(p.adj) %>%
as.data.frame() %>%
dplyr::mutate(Protein = paste0(UniprotID, "_", Gene))
print(paste(nrow(WilcoxSignificantFeatures), "Significant proteins have been identified"))
FoldChangeData <- dataset %>%
dplyr::group_by(Status, Protein) %>%
dplyr::summarise(meanInt = mean(Intensity, na.rm = TRUE)) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "meanInt") %>%
dplyr::mutate(FC = (.[[Status1]] - .[[Status2]]))
VulconaoPlotData <- merge(WResults, FoldChangeData, by = "Protein") %>%
dplyr::mutate(Direction = ifelse(p.adj > 0.05, "NotSignificant", ifelse(FC < 0, "Down", "Up")))
## Volcano plot of results
vulcanoPlot <- ggplot2::ggplot(data = VulconaoPlotData) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "NotSignificant"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "NotSignificant")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Up"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Up")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Down"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Down")
) +
ggplot2::scale_fill_manual(values = c("Up" = "red", "Down" = "blue", "NotSignificant" = "grey")) +
ggplot2::geom_hline(yintercept = -log10(0.05), alpha = 0.7, linetype = 2) +
ggplot2::geom_hline(yintercept = -log10(0.01), alpha = 0.7, linetype = 2, col = "red") +
## Add Protein names using ggrepel
ggrepel::geom_text_repel(
data = subset(VulconaoPlotData, log10adjustP > 1.3),
ggplot2::aes(label = Gene, x = FC, y = log10adjustP),
box.padding = 0.3,
point.padding = 0.3,
segment.color = "grey50",
segment.size = 0.1,
segment.alpha = 0.1,
size = 3,
angle = 30
) +
ggplot2::ggtitle(paste("Volcano plot Wilcox Test", plotname)) +
ggplot2::xlab(paste("Fold change in", unique(WResults$group1))) +
ggplot2::theme_light(base_size = 13) +
## rename y axis
ggplot2::ylab(ifelse(p.adj.method != "none", "log10 (p.adj)", "log10 (p)"))
}
if("Peptide" %in% colnames(dataset)) {
## Making sure we have at least 2 Observations per group
filter <- datasetW %>%
dplyr::select(c("Sample", "Status", "Peptide", "Intensity")) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "Intensity") %>%
dplyr::group_by(Peptide) %>%
dplyr::summarise(
ObsInStatus1 = sum(!is.na(.data[[Status1]])),
ObsInStatus2 = sum(!is.na(.data[[Status2]]))
) %>%
dplyr::mutate(possible = ifelse(ObsInStatus1 < 2 | ObsInStatus2 < 2, FALSE, TRUE)) %>%
dplyr::filter(possible)
WResults <- datasetW %>%
dplyr::filter(Peptide %in% filter$Peptide) %>%
dplyr::group_by(Peptide) %>%
rstatix::wilcox_test(Intensity ~ Status, detailed = TRUE) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2)) %>%
dplyr::mutate(p.adj = p * length(unique(Gene))) %>%
dplyr::mutate(
UniprotID = stringr::str_split_i(Peptide, pattern = "_", 1),
Gene = stringr::str_split_i(Peptide, pattern = "_", 2),
log10adjustP = -1 * log10(p.adj)
)
## Create dataframe of significant Peptides in global environment
WilcoxSignificantFeatures <- WResults %>%
dplyr::filter(p.adj < 0.05) %>%
dplyr::arrange(p.adj) %>%
as.data.frame()
print(paste(nrow(WilcoxSignificantFeatures), "Significant Peptides have been identified"))
FoldChangeData <- dataset %>%
dplyr::group_by(Status, Peptide) %>%
dplyr::summarise(meanInt = mean(Intensity, na.rm = TRUE)) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "meanInt") %>%
dplyr::mutate(FC = (.[[Status1]] - .[[Status2]]))
VulconaoPlotData <- merge(WResults, FoldChangeData, by = "Peptide") %>%
dplyr::mutate(Direction = ifelse(p.adj > 0.05, "NotSignificant", ifelse(FC < 0, "Down", "Up")))
## Volcano plot of results
vulcanoPlot <- ggplot2::ggplot(data = VulconaoPlotData) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "NotSignificant"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "NotSignificant")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Up"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Up")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Down"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Down")
) +
ggplot2::scale_fill_manual(values = c("Up" = "red", "Down" = "blue", "NotSignificant" = "grey")) +
ggplot2::geom_hline(yintercept = -log10(0.05), alpha = 0.7, linetype = 2) +
ggplot2::geom_hline(yintercept = -log10(0.01), alpha = 0.7, linetype = 2, col = "red") +
ggplot2::geom_text(
data = subset(VulconaoPlotData, log10adjustP > 1.3),
ggplot2::aes(label = Gene, x = FC, y = log10adjustP),
vjust = 0.5, hjust = -0.2, size = 3, angle = 30
) +
ggplot2::ggtitle(paste("Volcano plot Wilcox Test", plotname)) +
ggplot2::xlab(paste("Fold change in", unique(WResults$group1))) +
ggplot2::theme_light(base_size = 13) +
ggplot2::ylab(ifelse(p.adj.method != "none", "log10 (p.adj)", "log10 (p)"))
}
## plotting Heatmap using sigificant Proteins or peptides
## NOTE clustering distance c("euclidean", "maximum", "man-hattan", "canberra", "binary", "minkowski", "pearson", "spearman", "kendall")
if("Protein" %in% colnames(dataset)){
Heatmap <- HeatMap(datasetW, PoIs = WilcoxSignificantFeatures$Protein, method = method, clustDist = clustDist, show_column_names = F, show_row_names = F, plotname = plotname)
}
if("Peptide" %in% colnames(dataset)){
Heatmap <- HeatMap(datasetW, PoIs = WilcoxSignificantFeatures$Peptide, method = method, clustDist = clustDist, show_column_names = F, show_row_names = F,plotname = plotname)
}
## Preparing Output object
Output <- list()
Output$raw <- WResults
Output$Significant <- WilcoxSignificantFeatures
Output$Vulcanoplot <- vulcanoPlot
Output$Heatmap <- Heatmap
return(Output)
}
## exclude code from final document
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(include = TRUE)
## exclude messages and warnings
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(BiomarkR)
### import raw data
DataQuantRaw <- BiomarkR::ImportMSData(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP_Plasma\HSP_perCA_Plasma_Diann_Results\report.pg_matrix.tsv)", programm = "diann", SampleID = T)
DataQuant <- DataQuantRaw %>%
## filter out the following samples c("AEZCV","BQUWN", "USOEI"))
filter(Sample != "AEZCV" & Sample != "BQUWN" & Sample != "USOEI") %>%
RemoveOutliers(Stdev = 1.5)
OutlierPlot <- DataQuant$OutlierPlot
DataQuant <- DataQuant$Dataset
DataClinRaw <- read_tsv(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP_Plasma\DataClinWithSampleIDs)") %>%
mutate(Sample = str_split_i(Sample, "__", 2)) %>%
mutate(Status = ifelse(`X...SPG` == "control", "Control", "HSP"))
colnames(DataClinRaw)[8] <- "Age"
colnames(DataClinRaw)[3] <- "SPG"
TotalProt <- length(unique(DataQuant$Protein))
CompletenessAnalysis <- BiomarkR::CompletenessAnalysis(DataQuant)
CompletenessAnalysis$Plot
## plot distribution of Protein Intensities
DataQuant %>%  ggplot(aes(x = Intensity)) +
geom_density() +
## overlay normal distribution
stat_function(fun = dnorm, args = list(mean = mean(DataQuant$Intensity, na.rm = T), sd = sd(DataQuant$Intensity, na.rm = T)), color = "red") +
theme_minimal() +
ggtitle("Density of Intensity") +
## add axis titles
labs(x = "Log2 Intensity",
y = "Density")
## plot distribution of Protein Intensities
DataQuant %>% NaCutoff(70) %>%  ggplot(aes(x = Intensity)) +
geom_density() +
## overlay normal distribution
stat_function(fun = dnorm, args = list(mean = mean(DataQuant$Intensity, na.rm = T), sd = sd(DataQuant$Intensity, na.rm = T)), color = "red") +
theme_minimal() +
ggtitle("Density of Intensity") +
## add axis titles
labs(x = "Log2 Intensity",
y = "Density")
## combine with clinical Data
DataQuant <- DataQuant %>% NaCutoff(70)
DataCombined <- merge(DataQuant, DataClinRaw, by = "Sample")
PrimaryEffects <- EffectAnalysis(DataCombined)
PrimaryEffects$EffectPlot
PrimaryEffects$EffectCorrelationsPlot
## Correct Data for plate, age and sex
CorrectedData <- DataCombined %>% NaCutoff(70) %>%
filter(!is.na(Intensity)) %>%
dplyr::group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Plate + Sex )))
EffectAnalysis(CorrectedData)$EffectPlot
## Plot Boxplot of Age per status
CorrectedData %>% ggplot(aes(x = Status, y = Age, fill = Status)) +
geom_violin() +
theme_minimal() +
ggtitle("Age Distribution per Status") +
labs(x = "Status",
y = "Age [Months]") +
ggsignif::geom_signif(comparisons = list(c("Control", "HSP")))
WtestResutls <- BiomarkR::WTest(CorrectedData, p.adj.method = "bonferroni")
WtestResutls$Vulcanoplot
## add roxygen comments
#' @title WTest
#' @description This function performs differential expression analysis using a Wilcox test.
#' @param dataset The dataset to be tested
#' @param plotname The name to be displayed on created plots
#' @param method The method to be used for the Heatmap (unsupervised, supervised)
#' @param clustDist The distance metric to be used for clustering in the Heatmap ("euclidean", "maximum", "man-hattan", "canberra", "binary", "minkowski", "pearson", "spearman", "kendall")
#' @param p.adj.method The method to be used for p-value adjustment ("BH", "holm", "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", "none")
#' @return A list object containing the results of the Wilcox test, the significant features and a volcano plot
#' @export
WTest <- function(dataset, plotname = "", method = "unsupervised", clustDist = "euclidean", p.adj.method = "BH") {
datasetW <- dataset %>% dplyr::arrange(Status)
Status1 <- unique(datasetW$Status)[1] %>% as.character()
Status2 <- unique(datasetW$Status)[2] %>% as.character()
## error if there are more than 2 groups
if(length(unique(datasetW$Status)) > 2) {
stop("Only two groups (Status) are allowed for Wilcox-Test")
}
## Running the W-Test
if("Protein" %in% colnames(dataset)) {
## Making sure we have at least 2 Observations per group
filter <- datasetW %>%
dplyr::select(c("Sample", "Status", "Protein", "Intensity")) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "Intensity") %>%
dplyr::group_by(Protein) %>%
dplyr::summarise(
ObsInStatus1 = sum(!is.na(.data[[Status1]])),
ObsInStatus2 = sum(!is.na(.data[[Status2]]))
) %>%
dplyr::mutate(possible = ifelse(ObsInStatus1 < 2 | ObsInStatus2 < 2, FALSE, TRUE)) %>%
dplyr::filter(possible)
WResults <- datasetW %>%
dplyr::filter(Protein %in% filter$Protein) %>%
dplyr::group_by(Protein) %>%
rstatix::wilcox_test(Intensity ~ Status, detailed = TRUE) %>%
rstatix::adjust_pvalue(method = p.adj.method) %>%
dplyr::mutate(
UniprotID = stringr::str_split_i(Protein, pattern = "_", 1),
Gene = stringr::str_split_i(Protein, pattern = "_", 2),
log10adjustP = -1 * log10(p.adj)
)
## Create dataframe of significant Proteins in global environment
WilcoxSignificantFeatures <- WResults %>%
dplyr::filter(p.adj < 0.05) %>%
dplyr::arrange(p.adj) %>%
as.data.frame() %>%
dplyr::mutate(Protein = paste0(UniprotID, "_", Gene))
print(paste(nrow(WilcoxSignificantFeatures), "Significant proteins have been identified"))
FoldChangeData <- dataset %>%
dplyr::group_by(Status, Protein) %>%
dplyr::summarise(meanInt = mean(Intensity, na.rm = TRUE)) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "meanInt") %>%
dplyr::mutate(FC = (.[[Status1]] - .[[Status2]]))
VulconaoPlotData <- merge(WResults, FoldChangeData, by = "Protein") %>%
dplyr::mutate(Direction = ifelse(p.adj > 0.05, "NotSignificant", ifelse(FC < 0, "Down", "Up")))
## Volcano plot of results
vulcanoPlot <- ggplot2::ggplot(data = VulconaoPlotData) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "NotSignificant"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "NotSignificant")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Up"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Up")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Down"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Down")
) +
ggplot2::scale_fill_manual(values = c("Up" = "red", "Down" = "blue", "NotSignificant" = "grey")) +
ggplot2::geom_hline(yintercept = -log10(0.05), alpha = 0.7, linetype = 2) +
ggplot2::geom_hline(yintercept = -log10(0.01), alpha = 0.7, linetype = 2, col = "red") +
## Add Protein names using ggrepel
ggrepel::geom_text_repel(
data = subset(VulconaoPlotData, log10adjustP > 1.3),
ggplot2::aes(label = Gene, x = FC, y = log10adjustP),
box.padding = 0.3,
point.padding = 0.3,
segment.color = "grey50",
segment.size = 0.1,
segment.alpha = 0.1,
size = 3,
angle = 30
) +
ggplot2::ggtitle(paste("Volcano plot Wilcox Test", plotname)) +
ggplot2::xlab(paste("Fold change in", unique(WResults$group1))) +
ggplot2::theme_light(base_size = 13) +
## rename y axis
ggplot2::ylab(ifelse(p.adj.method != "none", "log10 (p.adj)", "log10 (p)"))
}
if("Peptide" %in% colnames(dataset)) {
## Making sure we have at least 2 Observations per group
filter <- datasetW %>%
dplyr::select(c("Sample", "Status", "Peptide", "Intensity")) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "Intensity") %>%
dplyr::group_by(Peptide) %>%
dplyr::summarise(
ObsInStatus1 = sum(!is.na(.data[[Status1]])),
ObsInStatus2 = sum(!is.na(.data[[Status2]]))
) %>%
dplyr::mutate(possible = ifelse(ObsInStatus1 < 2 | ObsInStatus2 < 2, FALSE, TRUE)) %>%
dplyr::filter(possible)
WResults <- datasetW %>%
dplyr::filter(Peptide %in% filter$Peptide) %>%
dplyr::group_by(Peptide) %>%
rstatix::wilcox_test(Intensity ~ Status, detailed = TRUE) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2)) %>%
dplyr::mutate(p.adj = p * length(unique(Gene))) %>%
dplyr::mutate(
UniprotID = stringr::str_split_i(Peptide, pattern = "_", 1),
Gene = stringr::str_split_i(Peptide, pattern = "_", 2),
log10adjustP = -1 * log10(p.adj)
)
## Create dataframe of significant Peptides in global environment
WilcoxSignificantFeatures <- WResults %>%
dplyr::filter(p.adj < 0.05) %>%
dplyr::arrange(p.adj) %>%
as.data.frame()
print(paste(nrow(WilcoxSignificantFeatures), "Significant Peptides have been identified"))
FoldChangeData <- dataset %>%
dplyr::group_by(Status, Peptide) %>%
dplyr::summarise(meanInt = mean(Intensity, na.rm = TRUE)) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "meanInt") %>%
dplyr::mutate(FC = (.[[Status1]] - .[[Status2]]))
VulconaoPlotData <- merge(WResults, FoldChangeData, by = "Peptide") %>%
dplyr::mutate(Direction = ifelse(p.adj > 0.05, "NotSignificant", ifelse(FC < 0, "Down", "Up")))
## Volcano plot of results
vulcanoPlot <- ggplot2::ggplot(data = VulconaoPlotData) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "NotSignificant"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "NotSignificant")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Up"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Up")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Down"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Down")
) +
ggplot2::scale_fill_manual(values = c("Up" = "red", "Down" = "blue", "NotSignificant" = "grey")) +
ggplot2::geom_hline(yintercept = -log10(0.05), alpha = 0.7, linetype = 2) +
ggplot2::geom_hline(yintercept = -log10(0.01), alpha = 0.7, linetype = 2, col = "red") +
ggplot2::geom_text(
data = subset(VulconaoPlotData, log10adjustP > 1.3),
ggplot2::aes(label = Gene, x = FC, y = log10adjustP),
vjust = 0.5, hjust = -0.2, size = 3, angle = 30
) +
ggplot2::ggtitle(paste("Volcano plot Wilcox Test", plotname)) +
ggplot2::xlab(paste("Fold change in", unique(WResults$group1))) +
ggplot2::theme_light(base_size = 13) +
ggplot2::ylab(ifelse(p.adj.method != "none", "log10 (p.adj)", "log10 (p)"))
}
## plotting Heatmap using sigificant Proteins or peptides
## NOTE clustering distance c("euclidean", "maximum", "man-hattan", "canberra", "binary", "minkowski", "pearson", "spearman", "kendall")
if("Protein" %in% colnames(dataset)){
Heatmap <- HeatMap(datasetW, PoIs = WilcoxSignificantFeatures$Protein, method = method, clustDist = clustDist, show_column_names = F, show_row_names = F, plotname = plotname)
}
if("Peptide" %in% colnames(dataset)){
Heatmap <- HeatMap(datasetW, PoIs = WilcoxSignificantFeatures$Peptide, method = method, clustDist = clustDist, show_column_names = F, show_row_names = F,plotname = plotname)
}
## Preparing Output object
Output <- list()
Output$raw <- WResults
Output$Significant <- WilcoxSignificantFeatures
Output$Vulcanoplot <- vulcanoPlot
Output$Heatmap <- Heatmap
return(Output)
}
WtestResutls <- WTest(CorrectedData, p.adj.method = "none")
WtestResutls$Vulcanoplot
