plotly::layout(title = paste("PLS-DA Score Plot 3D", plotname), scene = list(xaxis = list(title = "LV1"), yaxis = list(title = "LV2"), zaxis = list(title = "LV3")))
ScorePlot3D
## Create Loading Plot
loadings <- round(PLSDAModel$finalModel$loadings, digits = 2)
loadings <- cbind(PoIs, loadings) %>% as.data.frame()
## Create 2D Loading Plot
LoadingPlot2D <- ggplot2::ggplot(loadings, ggplot2::aes(x = `Comp 1`, y = `Comp 2`)) +
ggplot2::geom_point() +
ggrepel::geom_text_repel(ggplot2::aes(label = PoIs), box.padding = 0.5) +
ggplot2::labs(title = paste("PLS-DA Loading Plot 2D", plotname), x = "Protein", y = "LV1") +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust = 1))
LoadingPlot2D
## Create 3D Loading Plot
LoadingPlot3D <- plotly::plot_ly(loadings, x = ~`Comp 1`, y = ~`Comp 2`, z = ~`Comp 3`, text = ~PoIs, type = "scatter3d") %>%
plotly::layout(
title = paste("PLS-DA Loading Plot 3D", plotname),
scene = list(xaxis = list(title = "LV1"), yaxis = list(title = "LV2"), zaxis = list(title = "LV3"))
)
## Create Confusion Matrix
ConfusionMatrix <- caret::confusionMatrix(predict(PLSDAModel, dplyr::select(MLData, -Sample)), MLData$Status)
## get ROC values
ROCTest <- pROC::roc(MLData$Status, predict(PLSDAModel, dplyr::select(MLData, -Sample)))
## get confusion matrix
ConfusionMatrix <- caret::confusionMatrix(predict(PLSDAModel, dplyr::select(MLData, -Sample)), MLData$Status)
## get confusion matrix
ConfusionMatrix <- caret::confusionMatrix(PLSDAModel)
ConfusionMatrix
## get ROC values
ROCTest <- pROC::roc(MLData$Status, predict(PLSDAModel, dplyr::select(MLData, -Sample)))
kffs(CorrectedData, method = "SVM")
X <- kffs(CorrectedData, method = "SVM")
X$Features
PCA(CorrectedData %>% filter(Protein %in% X$Features$Feature))
PCA(CorrectedData %>% filter(Protein %in% KruskalResults$Significant$Protein))
PCA(CorrectedData %>% filter(Protein %in% KruskalResults$Significant$Protein))$ScorePlot2D
HeatMap <- HeatMap(CorrectedData, PoIs = unique(KruskalResults$Significant$Protein), method = "supervised", show_column_names = F, Anntotation = "Sex")
HeatMap <- HeatMap(CorrectedData, PoIs = unique(KruskalResults$Significant$Protein), method = "supervised", show_column_names = F, Annotation = "Sex")
HeatMap
colnames(dataClin)
HeatMap <- HeatMap(CorrectedData, PoIs = unique(KruskalResults$Significant$Protein), method = "supervised", show_column_names = F, Annotation = c("Sex", "MoCA"))
HeatMap
## prepare Data
CorrectedData_MCI_plus_AD_vs_normal <- CorrectedData %>%
filter(Status %in% c("MCI", "AD", "Normal")) %>%
mutate(Status = ifelse(Status == "Normal", "Normal", "MCI_OR_AD"))
X <- TwoWayComaprison(CorrectedData_MCI_plus_AD_vs_normal)
dataset <- CorrectedData_MCI_plus_AD_vs_normal
## Error when Data has more than 2 groups
if(length(unique(dataset$Status)) > 2){
stop("Data has more than 2 groups in Status")
}
## Wilcox Test
WilcoxResults <- WTest(dataset, plotname = plotname)
## PCA
PCAResutls <- PCA(dataset %>% filter(Protein %in% unique(KruskalResults$Significant$Protein)), plotname = plotname)
## UMAP
UMAPResults <- UMAP(dataset %>% filter(Protein %in% unique(KruskalResults$Significant$Protein)), plotname = plotname)
## Gene Ontology Analysis (if there are significant results)
if(length(unique(WilcoxResults$Significant$Protein > 0))){
## Setting up Protein Lists
PoIsUp <- WilcoxResults$Significant %>%
dplyr::filter(estimate > 0) %>%
dplyr::pull(Protein)
PoIsDown <- WilcoxResults$Significant %>%
dplyr::filter(estimate < 0) %>%
dplyr::pull(Protein)
## String analysis
StringResultsUP <- STRING(PoIsUp, plotname = paste("Upregulated Proteins", plotname), STRINGBackground = unique(dataset$Protein))
StringResultsDown <- STRING(PoIsDown, plotname = paste("Downregulated Proteins", plotname), STRINGBackground = unique(dataset$Protein))
}
## create Output List
OutputList <- list(WilcoxResults = WilcoxResults)
## add PCA and umap if availabe
if(exists("PCAResutls")){
OutputList$PCAResutls <- PCAResutls
OutputList$UMAPResults <- UMAPResults
}
## add STRING results if available
if(exists("StringResultsUP")){
OutputList$StringResults$Up<- StringResultsUP
OutputList$StringResults$Down <- StringResultsDown
}
OutputList$WilcoxResults$Vulcanoplot
OutputList$PCAResutls$ScorePlot2D
OutputList$PCAResutls$ScorePlot3D
## prepare Data
CorrectedData_MCI_plus_AD_vs_normal <- CorrectedData %>%
filter(Status %in% c("MCI", "AD", "Normal")) %>%
mutate(Status = ifelse(Status == "Normal", "Normal", "MCI_OR_AD"))
X <- TwoWayComaprison(CorrectedData_MCI_plus_AD_vs_normal)
## TwoWayComparison
## Advanced function that combines the Wilcox test, PCA and STRING analysis
## add roxygen comments
#' @title TwoWayComaprison
#' @description Two way comparison of the specified dataset.
#' @param dataset The dataset to be tested
#' @param plotname The name to be displayed on the resulting plots
#' @return A list object containing the results of the Wilcox test, the PCA as well a UMAP analysis and the STRING analysis if there are significant results
#' @export
TwoWayComaprison <- function(dataset, plotname = ""){
## Error when Data has more than 2 groups
if(length(unique(dataset$Status)) > 2){
stop("Data has more than 2 groups in Status")
}
## Wilcox Test
WilcoxResults <- WTest(dataset, plotname = plotname)
## PCA
PCAResutls <- PCA(dataset %>% filter(Protein %in% unique(KruskalResults$Significant$Protein)), plotname = plotname)
## UMAP
UMAPResults <- UMAP(dataset %>% filter(Protein %in% unique(KruskalResults$Significant$Protein)), plotname = plotname)
## Gene Ontology Analysis (if there are significant results)
if(length(unique(WilcoxResults$Significant$Protein > 0))){
## Setting up Protein Lists
PoIsUp <- WilcoxResults$Significant %>%
dplyr::filter(estimate > 0) %>%
dplyr::pull(Protein)
PoIsDown <- WilcoxResults$Significant %>%
dplyr::filter(estimate < 0) %>%
dplyr::pull(Protein)
## String analysis
StringResultsUP <- STRING(PoIsUp, plotname = paste("Upregulated Proteins", plotname), STRINGBackground = unique(dataset$Protein))
StringResultsDown <- STRING(PoIsDown, plotname = paste("Downregulated Proteins", plotname), STRINGBackground = unique(dataset$Protein))
}
## create Output List
OutputList <- list(WilcoxResults = WilcoxResults)
## add PCA and umap if availabe
if(exists("PCAResutls")){
OutputList$PCAResutls <- PCAResutls
OutputList$UMAPResults <- UMAPResults
}
## add STRING results if available
if(exists("StringResultsUP")){
OutputList$StringResults$Up<- StringResultsUP
OutputList$StringResults$Down <- StringResultsDown
}
## return Output List
return(OutputList)
}
X <- TwoWayComaprison(CorrectedData_MCI_plus_AD_vs_normal)
MCI_plus_AD_vs_normal <- TwoWayComaprison(CorrectedData_MCI_plus_AD_vs_normal)
MCI_plus_AD_vs_normal$WilcoxResults$Vulcanoplot
MCI_plus_AD_vs_normal$UMAPResults$ScorePlot3D
MCI_plus_AD_vs_normal$WilcoxResults$Heatmap
MCI_plus_AD_vs_normal$WilcoxResults$Vulcanoplot
MCI_plus_AD_vs_normal$WilcoxResults$Heatmap
CorrectedDataNormal_plus_MCI_AD <- CorrectedData %>%
filter(Status %in% c("MCI", "AD", "Normal")) %>%
mutate(Status = ifelse(Status %in% c("MCI", "AD"), "MCI_OR_AD", "Normal"))
CorrectedDataNormal_plus_MCI_vs_AD <- CorrectedData %>%
filter(Status %in% c("MCI", "AD", "Normal")) %>%
mutate(Status = ifelse(Status %in% c("MCI", "Normal"), "MCI_OR_Normal", "AD"))
Normal_plus_MCI_vs_AD <- TwoWayComaprison(CorrectedDataNormal_plus_MCI_vs_AD)
CorrectedDataAD_vs_MCI <- CorrectedData %>%
filter(Status %in% c("MCI", "AD"))
AD_vs_MCI <- TwoWayComaprison(CorrectedDataAD_vs_MCI)
AUCs(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
AUCResults <- AUCs(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
AUCResults <- AUCs(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
AUCResults$plot
BoxPlotsFeatures(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
BoxPlotsFeatures(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein) %>% head(9))
BoxPlotsFeatures(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein) %>% head(6))
BoxPlotsFeatures(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(AUCResults$results$PoI) %>% head(6))
HeatMap <- HeatMap(CorrectedData, PoIs = unique(KruskalResults$Significant$Protein), method = "supervised", show_column_names = F)
HeatMap
library(stringr)
library(tidyverse)
library(BiomarkR)
## importing quantitative data
filepath <- r"(C:\Users\CH254567\OneDrive\Working\TestData\Alzheimers.pg_matrix.tsv)"
data <- ImportMSData(filepath = filepath, programm = "DIA-NN", feature = "Protein") %>%
## extracting sample names
mutate(Sample = str_split_i(Sample, pattern = "_", 10))
data$OutlierPlot
## importing clinical data
filepathClin <- r"(C:\Users\CH254567\OneDrive\Working\TestData\AlzheimersClinical.xlsx)"
dataClin <- readxl::read_excel(filepathClin) %>%
## extracting sample names
mutate(Sample = RANDOMIZER) %>%
select(-RANDOMIZER)
## merge clinical and MS data
dataCombined <- merge(data, dataClin, by = "Sample") %>%
## create Status column
mutate(Status = CognitiveStatus) %>%
## filter out normal_young
filter(Status != "Normal_young")
CompletnessResuslts <- CompletenessAnalysis(data = dataCombined)
CompletnessResuslts$Plot
data_norm <- dataCombined %>% NaCutoff(50) %>% normalizeIntensityOnSample(method = "median", plot = FALSE) %>% RemoveOutliers(Stdev = 3)
data_norm$OutlierPlot
DataFinal <- data_norm$Dataset
EffectResults <- EffectAnalysis(data = DataFinal)
EffectResults$plot
PCAResults <- PCA(DataFinal %>% mutate(Status = Sex))
PCAResults$ScorePlot2D
CorrectedData <- DataFinal %>%
filter(!is.na(Intensity)) %>%
group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Sex))+ mean(Intensity)) %>%
ungroup()
PCAResultsCorrected <- PCA(CorrectedData %>% mutate(Status = Sex))
PCAResultsCorrected$ScorePlot2D
EffectResultsCorrected <- EffectAnalysis(data = CorrectedData)
EffectResultsCorrected$plot
KruskalResults <- KruskalTest(data = CorrectedData)
KruskalResults$Heatmap
HeatMap <- HeatMap(CorrectedData, PoIs = unique(KruskalResults$Significant$Protein), method = "supervised", show_column_names = F)
HeatMap
PathwayResults <- STRING(PoIs = unique(KruskalResults$Significant$Protein), STRINGBackground = unique(CorrectedData$Protein))
PathwayResults$FunctionPlot
## prepare Data
CorrectedData_MCI_plus_AD_vs_normal <- CorrectedData %>%
filter(Status %in% c("MCI", "AD", "Normal")) %>%
mutate(Status = ifelse(Status == "Normal", "Normal", "MCI_OR_AD"))
MCI_plus_AD_vs_normal <- TwoWayComaprison(CorrectedData_MCI_plus_AD_vs_normal)
?filter
detach("package:BiomarkR", unload = TRUE)
devtools::build(r"(C:\Users\CH254567\OneDrive\Working\Programs\BiomarkR)")
install.packages(r"(C:\Users\CH254567\OneDrive\Working\Programs\BiomarkR_0.0.0.9000.tar.gz)")
library(BiomarkR)
## prepare Data
CorrectedData_MCI_plus_AD_vs_normal <- CorrectedData %>%
filter(Status %in% c("MCI", "AD", "Normal")) %>%
mutate(Status = ifelse(Status == "Normal", "Normal", "MCI_OR_AD"))
MCI_plus_AD_vs_normal <- TwoWayComaprison(CorrectedData_MCI_plus_AD_vs_normal)
MCI_plus_AD_vs_normal$WilcoxResults$Vulcanoplot
MCI_plus_AD_vs_normal$WilcoxResults$Heatmap
AUCResults <- AUCs(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
AUCResults$plot
BoxPlotsFeatures(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(AUCResults$results$PoI) %>% head(6))
GBM(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
GBM(CorrectedData_MCI_plus_AD_vs_normal %>% ImputeFeatureIntensity(), PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
SVM(CorrectedData_MCI_plus_AD_vs_normal %>% ImputeFeatureIntensity(), PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
data$OutlierPlot
AUCResults <- AUCs(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
AUCResults <- AUCs(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
```{r message=FALSE, warning=FALSE, include=FALSE, echo=TRUE}
AUCResults <- AUCs(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
AUCResults <- AUCs(CorrectedData_MCI_plus_AD_vs_normal, PoIs = unique(MCI_plus_AD_vs_normal$WilcoxResults$Significant$Protein))
## exclude code from final document
knitr::opts_chunk$set(echo = TRUE)
## exclude messages and warnings
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
## Clear environment
## importing libraries
library(tidyverse)
library(BiomarkR)
library(readxl)
library(ComplexHeatmap)
library(dendextend)
library(caret)
library(pROC)
library(rstatix)
## importing the data
data <- read.csv(r"(U:\Oli\From_Dylan\CohortDataSep9th2024\df.csv)")
## Reorder columsn
DataRaw <- data %>% select(c(SampleID, Patient, Visit, Plate,Protein,Intensity)) %>%
mutate(Sample = SampleID) %>%
mutate(Status = Visit) %>%
select(-c(SampleID, Visit))
EffectAnalysis(DataRaw)$EffectPlot
PCA <- PCA(DataRaw %>% mutate(Status = Plate))
PCA$ScorePlot2D
## Correcting for the batch effect
CorrectedData <- DataRaw %>%
NaCutoff(30) %>%
group_by(Protein) %>%
filter(!is.na(Intensity)) %>%
mutate(Intensity = residuals(lm(Intensity ~ Plate))) %>%
ungroup()
PCACorrected <- PCA(CorrectedData %>% mutate(Status = Plate))
PCACorrected$ScorePlot2D
EffectAnalysis(CorrectedData)$EffectPlot
## defininf TTest Fucntion
TTest <- function(dataset, plotname = "", method = "unsupervised", clustDist = "euclidean"){
## Normalize data for T-Test
datasetT <- dataset
## setting up clinical variables
Status1 <- unique(datasetT$Status)[1] %>% as.character()
Status2 <- unique(datasetT$Status)[2] %>% as.character()
## error if there are more than 2 groups
if(length(unique(datasetT$Status)) > 2){
stop("Only two groups (Status) are allowed for T-Test")
}
## Running the T-Test
if("Protein" %in% colnames(dataset)){
## Making sure we have at least 2 Observations per group
## Here its important that we remove any clinical factor. Thus we only select the columns we really need!
filter <- datasetT %>%
select(c("Sample", "Status", "Protein", "Intensity")) %>%
#First we spread (i.e. back to Wide format, but instead by clinical group)
pivot_wider(names_from = "Status", values_from = "Intensity")  %>%
group_by(Protein) %>%
summarise(ObsInStatus1 = sum(!is.na(.data[[Status1]])),
ObsInStatus2 = sum(!is.na(.data[[Status2]]))) %>%
#Create a column where we say that all values need at least 2 to be considered for the statistical test.
mutate(possible = ifelse(ObsInStatus1 < 2 | ObsInStatus2 < 2 , FALSE, TRUE)) %>%
filter(possible)
Tresults <- datasetT %>% filter(Protein %in% filter$Protein) %>%
group_by(Protein) %>%
t_test(Intensity ~ Status, detailed = T) %>%
adjust_pvalue(method = "BH") %>%
#Split the Protein name in Uniprot and Gene
mutate(UniprotID = str_split_i(Protein, pattern = "_", 1)) %>%
mutate(Gene = str_split_i(Protein, pattern = "_", 2)) %>%
#Determine Fold change. Since we work with log-transformed values we can just substract
mutate(FC = estimate1 - estimate2) %>%
#Create log10 p-vals
mutate(log10adjustP = -1*log10(p.adj)) %>%
#Determine if up or down regulated
mutate(Direction = ifelse(p.adj > 0.05, "NotSignificant", ifelse(FC < 0, "Down", "Up")))
## Create dataframe of significant Proteins in global environment
TSignificantFeatures <- Tresults %>%
filter(p.adj < 0.05) %>% arrange(p.adj) %>%
data.frame() %>%
mutate(Protein = paste0(UniprotID, "_", Gene))
print(paste(nrow(TSignificantFeatures), "Significant proteins have been identified"))
## Volcano plot of results
vulcanoPlot <- ggplot(data = Tresults) +
## add non significant Poitns
geom_point(size = 3.5, shape = 21,
data = subset(Tresults ,(Direction == "NotSignificant")),
aes(x = FC, y = log10adjustP, fill = "NotSignificant"))+
## add Up Poitns
geom_point(size = 3.5, shape = 21,
data = subset(Tresults ,(Direction == "Up")),
aes(x = FC, y = log10adjustP, fill = "Up"))+
## add Down Poitns
geom_point(size = 3.5, shape = 21,
data = subset(Tresults ,(Direction == "Down")),
aes(x = FC, y = log10adjustP, fill = "Down"))+
## add colours to fills
scale_fill_manual(values = c("Up" = "red", "Down" = "blue", "NotSignificant" = "grey")) +
## add lines for 5 an 1 % significance
## 5 % significance
geom_hline(yintercept = -log10(0.05), alpha = 0.7, linetype = 2) +
## 1 % significance
geom_hline(yintercept = -log10(0.01), alpha = 0.7, linetype = 2, col = "red") +
## Add Point lalbes
geom_text(data = subset(Tresults, log10adjustP > 1.3), aes(label = Gene, x = FC, y = log10adjustP), vjust = 0.5, hjust = -0.2, size = 3, angle = 30) +
## Add title
ggtitle(paste("Volcano plot TTest", plotname)) +
## Add x-Axis label
xlab(paste("Fold change in", unique(Tresults$group1)))+
theme_light(base_size = 13)
}
if("Peptide" %in% colnames(dataset)){
## Making sure we have at least 2 Observations per group
## Here its important that we remove any clinical factor. Thus we only select the columns we really need!
filter <- datasetT %>%
select(c("Sample", "Status", "Peptide", "Intensity")) %>%
#First we spread (i.e. back to Wide format, but instead by clinical group)
pivot_wider(names_from = "Status", values_from = "Intensity")  %>%
group_by(Peptide) %>%
summarise(ObsInStatus1 = sum(!is.na(.data[[Status1]])),
ObsInStatus2 = sum(!is.na(.data[[Status2]]))) %>%
#Create a column where we say that all values need at least 2 to be considered for the statistical test.
mutate(possible = ifelse(ObsInStatus1 < 2 | ObsInStatus2 < 2 , FALSE, TRUE)) %>%
filter(possible)
Tresults <- datasetT %>% filter(dataset$Peptide %in% filter$Peptide) %>%
group_by(Peptide) %>%
t_test(Intensity ~ Status, detailed = T) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2)) %>%
dplyr::mutate(p.adj = p * length(unique(Gene))) %>%
#Split the Peptide name in Uniprot and Gene
mutate(UniprotID = str_split_i(Peptide, pattern = "_", 1)) %>%
mutate(Gene = str_split_i(Peptide, pattern = "_", 2)) %>%
#Determine Fold change. Since we work with log-transformed values we can just substract
mutate(FC = estimate1 - estimate2) %>%
#Create log10 p-vals
mutate(log10adjustP = -1*log10(p.adj)) %>%
#Determine if up or down regulated
mutate(Direction = ifelse(p.adj > 0.05, "NotSignificant", ifelse(FC < 0, "Down", "Up")))
## Create dataframe of significant Peptides in global environment
TSignificantFeatures <- Tresults %>%
filter(p.adj < 0.05) %>% arrange(p.adj) %>%
data.frame()
print(paste(nrow(TSignificantFeatures), "Significant Peptides have been identified"))
## Volcano plot of results
vulcanoPlot <- ggplot(data = Tresults) +
## add non significant Poitns
geom_point(size = 3.5, shape = 21,
data = subset(Tresults ,(Direction == "NotSignificant")),
aes(x = FC, y = log10adjustP, fill = "NotSignificant"))+
## add Up Poitns
geom_point(size = 3.5, shape = 21,
data = subset(Tresults ,(Direction == "Up")),
aes(x = FC, y = log10adjustP, fill = "Up"))+
## add Down Poitns
geom_point(size = 3.5, shape = 21,
data = subset(Tresults ,(Direction == "Down")),
aes(x = FC, y = log10adjustP, fill = "Down"))+
## add colours to fills
scale_fill_manual(values = c("Up" = "red", "Down" = "blue", "NotSignificant" = "grey")) +
## add lines for 5 an 1 % significance
## 5 % significance
geom_hline(yintercept = -log10(0.05), alpha = 0.7, linetype = 2) +
## 1 % significance
geom_hline(yintercept = -log10(0.01), alpha = 0.7, linetype = 2, col = "red") +
## Add Point lalbes
geom_text(data = subset(Tresults, log10adjustP > 1.3), aes(label = Gene, x = FC, y = log10adjustP), vjust = 0.5, hjust = -0.2, size = 3, angle = 30) +
## Add title
ggtitle(paste("Volcano plot TTest", plotname)) +
## Add x-Axis label
xlab(paste("Fold change in", unique(Tresults$group1)))+
theme_light(base_size = 13)
}
## optional plotting of Heatmap
## NOTE clustering distance c("euclidean", "maximum", "man-hattan", "canberra", "binary", "minkowski", "pearson", "spearman", "kendall")
## creating heat map Data
if("Protein" %in% colnames(dataset)){
HeatMapData <- dataset %>%
filter(Protein %in% TSignificantFeatures$Protein) %>%
group_by(Protein) %>%
mutate(Intensity = scale(Intensity, center = TRUE, scale = TRUE))
## Quantitative heat map data
HeatMapDataQuant <- HeatMapData %>%
pivot_wider(names_from = "Protein", values_from = "Intensity") %>%
select(contains("_")) %>%
t() %>% as.matrix()
## clinical heat map data
HeatMapDataClin <- HeatMapData %>%
pivot_wider(names_from = "Protein", values_from = "Intensity") %>%
select(!contains("_"))
}
if("Peptide" %in% colnames(dataset)){
HeatMapData <- dataset %>%
filter(Peptide %in% TSignificantFeatures$Peptide) %>%
group_by(Peptide) %>%
mutate(Intensity = scale(Intensity, center = TRUE, scale = TRUE))
## Quantitative heat map data
HeatMapDataQuant <- HeatMapData %>%
pivot_wider(names_from = "Peptide", values_from = "Intensity") %>%
select(contains("_")) %>%
t() %>% as.matrix()
## clinical heat map data
HeatMapDataClin <- HeatMapData %>%
pivot_wider(names_from = "Peptide", values_from = "Intensity") %>%
select(!contains("_"))
}
## Annotations
## for now only status is annotated
## maybe i can find a general way to annotate all clinical variables
"colnames(HeatMapDataClin[1]) = HeatMapDataClin[1] works; need to find a way to generalize"
Annotation <- HeatmapAnnotation(
Status = HeatMapDataClin$Status
)
if(method == "supervised" | method == "Supervised"){
THeatMap <- ComplexHeatmap::Heatmap(HeatMapDataQuant,
## Annotation stuff
top_annotation = Annotation,
## clustering specifics
## Clustering columns
cluster_columns = TRUE,
clustering_distance_columns = clustDist,
## clustering Rows
cluster_rows = TRUE,
clustering_distance_rows = clustDist,
show_row_names = FALSE,
## specify pacient status as main cluster
column_split = HeatMapDataClin$Status,
## Changing Legend title
name = "z-score Int",
## naming Plot
column_title = paste(plotname,"Supervised Heat map clustered by", clustDist)
)
}
if(method == "unsupervised" | method == "Unsupervised"){
THeatMap <- ComplexHeatmap::Heatmap(HeatMapDataQuant,
## Annotations Stuff
top_annotation = Annotation,
## clustering specifics
## Clustering columns
cluster_columns = TRUE,
clustering_distance_columns = "euclidean",
## clustering Rows
cluster_rows = TRUE,
clustering_distance_rows = clustDist,
show_row_names = FALSE,
## Change legend title
name = "z-score Int",
## naming Plot
column_title = paste("Unsupervised Heat map", plotname, "clustered by", clustDist)
)
}
## Preparing Output object
Output <- list()
Output$raw <- Tresults
Output$Significant <- TSignificantFeatures
Output$Heatmap <- THeatMap
Output$Vulcanoplot <- vulcanoPlot
}
TTestResults <- TTest(CorrectedData)
TTestResults
WTestResults <- WTest(CorrectedData)
SigProt <- WTestResults$Significant %>% mutate(FC = estimate) %>% select(Protien, FC, p, p.adj)
```{r}
SigProt <- WTestResults$Significant %>% mutate(FC = estimate) %>%  select(Protein, FC, p.adj)
head(WTestResults$Significant)
WTestResults$Significant %>% head(10) %>% mutate(FC = estimate) %>%  select(Protein, FC, p.adj, p)
setwd("U:/Oli/From_Dylan/CohortDataSep9th2024")
SigProt <- WTestResults$Significant %>% head(10) %>% mutate(FC = estimate) %>%  select(Protein, FC, p.adj, p)
write.csv(SigPror, file = "WilcoxSignificantProteins.csv")
write.csv(SigProt, file = "WilcoxSignificantProteins.csv")
write.csv(SigProt, file = "WilcoxSignificantProteins.csv")
setwd("U:/Oli/From_Dylan/CohortDataSep9th2024")
write.csv(SigProt, file = "WilcoxSignificantProteinsWithPValues.csv")
cat .git/config
git remote add origin <https://github.com/OliSchott/BiomarkR.git>
