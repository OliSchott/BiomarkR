## correct for gestational age and Plate
mutate(Intensity = residuals(lm(Intensity ~ GestationalAge + Plate))) %>%
## add mean back to the data
mutate(Intensity = Intensity + mean(Intensity, na.rm = T)) %>%
## Ungroup
ungroup()
## Visualizing Batch correction
MainEffects <- EffectAnalysis(DataCombined)
PCARawData <- PCA(DataCombined %>% mutate(Status = Plate), plotname = "RawData")
PCACorrectedData <- PCA(CorrectedData %>% mutate(Status = Plate), plotname = "CorrectedData")
MainEffects$EffectPlot
PCARawData$ScorePlot2D
PCACorrectedData$ScorePlot2D
ScondaryEffects <- EffectAnalysis(CorrectedData)
ScondaryEffects$EffectPlot
## Violin plot
PlotData <- CorrectedData %>%
filter(Status %in% c("SIDS", "Healthy Control", "Demise Control")) %>%
mutate(Status = ifelse(Status == "SIDS", "SIDS", "Control"))
## Violin plots for gestational age, postnatal age and year of birth
ggplot(PlotData %>%
## filter out Sample that has -9 as gestational age
filter(GestationalAge != -9), aes(x = Status, y = GestationalAge, fill = Status)) + geom_violin() + ggtitle("Gestational Age") + theme(legend.position = "none")
ggplot(PlotData, aes(x = Status, y = PostnatalAge, fill = Status)) + geom_violin() + ggtitle("Postnatal Age") + theme(legend.position = "none")
ggplot(PlotData, aes(x = Status, y = YearofBirth, fill = Status)) + geom_violin() + ggtitle("Year of Birth") + theme(legend.position = "none")
## define color gradient from blue to red
ColorGradient <- colorRampPalette(c("blue", "red"))
## use color gradient in a ggplot
PCA <- PCA(CorrectedData %>% mutate(Status = CorrectedData$YearofBirth))
PCA$ScorePlot2D + scale_color_gradientn(colors = ColorGradient(100)) + ggtitle("Year of birth")
## use color gradient in a ggplot
PCA <- PCA(CorrectedData %>% mutate(Status = ifelse(SEX == 0, "Male", "Female")))
PCA$ScorePlot2D + ggtitle("Sex")
PCA <- PCA(CorrectedData %>% mutate(Status = PostnatalAge) %>%
## bin postnatal age and give them sensical names
mutate(Status = cut(Status, breaks = 3)))
PCA$ScorePlot2D + ggtitle("Postnatal age") +
## Call "Status" in the Legend "Posnatal Age"
scale_color_discrete(name = "Postnatal Age")
## Combine Control Data
ControlData <- CorrectedData %>%
filter(Status %in% c("Healthy Control", "Demise Control")) %>%
mutate(Status = "Control")
SIDSonlyData <- CorrectedData %>% filter(Status == "SIDS")
SIDSvsControlData <- rbind(SIDSonlyData, ControlData)
TwoWayComparisonSIDSVSControl <- WTest(SIDSvsControlData, plotname = "SIDS vs Control")
TwoWayComparisonSIDSVSControl$Vulcanoplot
## Make heatmap
SIDSOnlyHeatMap <- HeatMap(SIDSonlyData, PoIs = unique(SIDSonlyData$Protein) ,plotname = "SIDSOnlyHeatMap", show_row_names = F, show_column_names = FALSE)
SIDSOnlyHeatMap
## Get Dendrogram
SIDSOnlyDendrogram <- ComplexHeatmap::column_dend(SIDSOnlyHeatMap)
## Cut the Dendrogram into 4 groups
SIDSGroups <- cutree(SIDSOnlyDendrogram, k = 6) %>% data.frame() %>%
rownames_to_column(var = "Sample")
## Add the Samples to the group information
SIDSDataWithGroups <- merge(SIDSonlyData, SIDSGroups, bu = "Sample")
## Rename the columns
colnames(SIDSDataWithGroups)[ncol(SIDSDataWithGroups)] <- c("Group")
## Add the group information to the main data
CorrectedDataWithGroups <- merge(CorrectedData, SIDSGroups, by = "Sample")
colnames(CorrectedDataWithGroups)[ncol(CorrectedDataWithGroups)] <- c("Group")
## Renaming the Groups to "SIDS1" "SIDS2" etc
CorrectedDataWithGroups$Group <- paste0("SIDS", CorrectedDataWithGroups$Group)
SIDSOnlyHeatmapWithGroups <- HeatMap(CorrectedDataWithGroups %>% mutate(Status = Group), PoIs = unique(CorrectedDataWithGroups$Protein), plotname = "GroupedHeatMap", show_row_names = F, method = "supervised", cluster_columns = T, show_column_names = FALSE)
SIDSOnlyHeatmapWithGroups
##
CorrectedDataWithGroups <- CorrectedDataWithGroups %>%
## combine SIDS1 and SIDS6 and call it SIDS 1
mutate(Group = ifelse(Group %in% c("SIDS1","SIDS2", "SIDS4"), "SIDS1", Group)) %>%
## combine SIDS 2, 4, 5 and 6 and call it SIDS2
mutate(Group = ifelse(Group %in% c("SIDS5", "SIDS6"), "SIDS2", Group)) %>%
## combine SIDS 4 and 5 and call it SIDS3
mutate(Group = ifelse(Group %in% c("SIDS3"), "SIDS3", Group))
## Heatmap of the combined SIDS subgroups
HeatMap(CorrectedDataWithGroups %>% mutate(Status = Group), PoIs = unique(CorrectedDataWithGroups$Protein), plotname = "GroupedHeatMap", show_row_names = F, method = "supervised", cluster_columns = T, show_column_names = FALSE)
UMAPSIDSGroups <- UMAP(CorrectedDataWithGroups %>% mutate(Status = Group) %>% ImputeFeatureIntensity(), plotname = "GroupedData")
UMAPSIDSGroups$UMAPPlot3D
## Differential Expression Analysis
Test <- CorrectedDataWithGroups %>% mutate(Status = Group) %>% KruskalTest()
Test$Heatmap
## Combine SIDS and Control Data
SIDSGroupAndControlData <- rbind(CorrectedDataWithGroups %>%
mutate(Status = Group) %>%
select(- "Group"), ControlData)
MuliwayComparisonSIDSandControl <- KruskalTest(SIDSGroupAndControlData)
UMAPSIDSSIDSGroupsAndControls <- UMAP(SIDSGroupAndControlData %>% ImputeFeatureIntensity())
MuliwayComparisonSIDSandControl$Heatmap
UMAPSIDSSIDSGroupsAndControls$UMAPPlot3D
ControlOnlyHeatMap <- HeatMap(ControlData, PoIs = unique(ControlData$Protein) ,plotname = "ControlOnlyHeatMap", show_row_names = F)
ControlOnlyHeatMap
## Get Dendrogram
ControlOnlyDendrogram <- ComplexHeatmap::column_dend(ControlOnlyHeatMap)
## Cut the Dendrogram into 3 groups
ControlGroups <- cutree(ControlOnlyDendrogram, k = 8) %>% data.frame() %>%
rownames_to_column(var = "Sample")
## Add the Samples to the group information
ControlDataWithGroups <- merge(ControlData, ControlGroups, by = "Sample")
colnames(ControlDataWithGroups)[ncol(ControlDataWithGroups)] <- c("Group")
## Renaming the Groups to "Control1" "Control2" etc
ControlDataWithGroups$Group <- paste0("Control", ControlDataWithGroups$Group)
ControlOnlyHeatMapWithGroups <- HeatMap(ControlDataWithGroups %>% mutate(Status = Group), PoIs = unique(ControlDataWithGroups$Protein), plotname = "ControlGroupedHeatMap", show_row_names = F, method = "supervised", show_column_names = FALSE)
ControlOnlyHeatMapWithGroups
ControlDataWithGroups <- ControlDataWithGroups %>%
## filter out groups 3, 6, 7 and 8
filter(Group %in% c("Control1", "Control2", "Control4", "Control5")) %>%
## combine Control5 and Control3 and call it Control3
mutate(Group = ifelse(Group %in% c("Control2","Control5"), "Control2", Group)) %>%
## Call control4 control3
mutate(Group = ifelse(Group %in% c("Control4"), "Control3", Group))
HeatMap(ControlDataWithGroups %>% mutate(Status = Group), PoIs = unique(ControlDataWithGroups$Protein), plotname = "ControlGroupedHeatMap", show_row_names = F, method = "supervised", show_column_names = FALSE)
## prepare data
SIDSandControlDataWithGroups <- rbind(CorrectedDataWithGroups, ControlDataWithGroups)
CorrelationData <- SIDSandControlDataWithGroups %>%
## calculate mean expression values per group
group_by(Protein, Group) %>%
summarise(Intensity = mean(Intensity, na.rm = T)) %>%
## pivot wider
pivot_wider(names_from = Protein, values_from = Intensity) %>%
column_to_rownames("Group") %>%
t()
## calculate correlation
CorrelationMatrix <- cor(CorrelationData, method = "pearson", use = "pairwise.complete.obs")
## plot results and use color gradient
ComplexHeatmap::Heatmap(CorrelationMatrix, name = "Correlation")
## calculating pairwise comparison
ControlGroups <- c("Control2", "Control3", "Control1")
SIDSgroups <- c("SIDS3", "SIDS1", "SIDS2")
Results <- list()
for(i in 1: length(ControlGroups)){
Control = ControlGroups[i]
SIDS = SIDSgroups[i]
## filter data for comparison
Data <- rbind(SIDSandControlDataWithGroups %>%
filter(Group == Control),
SIDSandControlDataWithGroups %>%
filter(Group == SIDS))
Results[[paste0(Control," vs ",SIDS)]] <- WTest(Data, plotname = paste0(Control,"_",SIDS))
}
Results$`Control2 vs SIDS3`$Vulcanoplot
Results$`Control3 vs SIDS1`$Vulcanoplot
Results$`Control1 vs SIDS2`$Vulcanoplot
## regress out group effect
AllData <- rbind(SIDSandControlDataWithGroups)
NoGroupEffectData <- AllData %>%
group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Group)) + mean(Intensity, na.rm = T)) %>%
ungroup()
TwoWayComparisonSIDSVSControlNoGroupEffect <- BiomarkR::KruskalTest(NoGroupEffectData %>% mutate(Status = Group), plotname = "SIDS vs Control No Group Effect")
UMAPNoGroupEffectData <- UMAP(NoGroupEffectData %>% ImputeFeatureIntensity()%>% mutate(Status = Group))
UMAPNoGroupEffectData$UMAPPlot3D
## Correlation between the groups
CorrelationData <- NoGroupEffectData %>%
## calculate mean expressin values per group
group_by(Protein, Group) %>%
## get mean expression per group
summarise(Intensity = mean(Intensity, na.rm = T)) %>%
## preparea data for correlation analysis
pivot_wider(names_from = Protein, values_from = Intensity) %>%
column_to_rownames("Group") %>%
t()
CorrelationMatrix <- cor(CorrelationData, method = "pearson", use = "pairwise.complete.obs")
ComplexHeatmap::Heatmap(CorrelationMatrix, name = "Correlation")
## Distribution of gestaional age
DataClin %>% filter(GestationalAge != -9) %>%
filter(Status %in% c("SIDS", "Healthy Control")) %>%
ggplot(aes(x = GestationalAge)) +
geom_histogram() +
ggtitle("Distribution of the Gestational Age") +
theme_minimal()
## make nice table with the binning information
knitr::kable(tibble(
"Gestational Age" = c("28 - 32 weeks", "33 to 36 weeks", "37 to 39 weeks", "49 and 41 weeks", "above 40 weeks"),
"Group" = c("extreme-pre-term", "pre-term", "early-term", "full-term", "late-term")
))
## Correct Batch effect
CorrectedData <-
## Long form dataframe here
DataCombined %>%
## perform NA Cutoff
## (not strictly necessary, but we need a certain number of datapoints per Protein for the linear regression)
NaCutoff(70) %>% ## 70 for usual results
## filter out rows with NA in intensity
filter(!is.na(Intensity)) %>%
## group by protein
group_by(Protein) %>%
## correct for gestational age and Plate
mutate(Intensity = residuals(lm(Intensity ~ Plate))) %>%
## add mean back to the Intensity
mutate(Intensity = Intensity + mean(Intensity, na.rm = T)) %>%
## Ungroup
ungroup()
## binning gestational age
AgeData <- CorrectedData %>%
filter(Status %in% c("SIDS", "Healthy Control")) %>%
mutate(GestationalAge = case_when(
GestationalAge < 32 ~ "extreme-pre-term",
GestationalAge >= 32 & GestationalAge < 37 ~ "pre-term",
GestationalAge >= 37 & GestationalAge < 40 ~ "early-term",
GestationalAge >= 40 & GestationalAge < 41 ~ "full-term",
GestationalAge >= 41 ~ "late-term"
))
## Make GestationalAge a factor and get it into the right order
AgeData$GestationalAge <- factor(AgeData$GestationalAge, levels = c("extreme-pre-term", "pre-term", "early-term", "full-term", "late-term"))
## plot AgeData
AgeData %>% pivot_wider(names_from = Protein, values_from = Intensity) %>%
## plot distributions of gestational age
group_by(GestationalAge, Status) %>%
summarise(n = n()) %>%
ggplot(aes(x = GestationalAge, y = n, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
ggtitle("Distribution of the Gestational Age groups") +
xlab("Gestational Age Group") + ylab("Number of Samples")
##
WtestResultsEarlyTerm <- AgeData %>%
filter(GestationalAge %in% c("early-term", "pre-term","extreme-pre-term")) %>%
WTest(plotname = "Premature SIDS vs Control")
WtestResultsFullTerm <- AgeData %>%
filter(GestationalAge == "full-term") %>%
WTest(plotname = "Full Term SIDS vs Control")
WtestResultsEarlyTerm$Vulcanoplot
WtestResultsFullTerm$Vulcanoplot
## comparison between premature and mature sIDS
WtestResultsPrematureVsMatureSIDS <- AgeData %>% filter(Status == "SIDS") %>% mutate(GestationalAge = ifelse(GestationalAge %in% c("early-term", "pre-term","extreme-pre-term"), "premature", "mature")) %>% mutate(Status = GestationalAge) %>% WTest(plotname = "Premature vs mature SIDS")
WtestResultsPrematureVsMatureSIDS$Vulcanoplot
AgeData %>% filter(Protein %in% c("P00915_CA1", "P00918_CA2", "P07451_CA3")) %>% normalizeIntensityOnFeature() %>%
ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
## wrap panel to protein
facet_wrap(~Protein) +
geom_boxplot() +
ggtitle("Expression of CA1 in premature and mature SIDS and Controls") + theme_minimal() +
## draw borders around panels
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
## rotate x-axis label by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## plot AgeData
AgeData %>% pivot_wider(names_from = Protein, values_from = Intensity) %>%
## plot distributions of gestational age
group_by(GestationalAge, Status) %>%
summarise(n = n()) %>%
ggplot(aes(x = GestationalAge, y = n, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
ggtitle("Distribution of the Gestational Age groups") +
xlab("Gestational Age Group") + ylab("Number of Samples")
## Loop through the Gestational ages and perform Wilcox test
## Create output list
WTestResultList <- list()
## define Gestational age groups
GestAges <- unique(as.character(AgeData$GestationalAge))
for (i in 2:length(GestAges)) {
GestAge <- GestAges[i]
WTestData <- AgeData %>%
dplyr::filter(GestationalAge == GestAge)
WTestResults <- BiomarkR::WTest(dataset = WTestData, plotname = paste0("SIDS vs Control ", GestAge), p.adj.method = "none")
Vulcanoplot <- WTestResults$Vulcanoplot
Heatmap <- BiomarkR::HeatMap(WTestData, PoIs = WTestResults$Significant$Protein, plotname = paste0("Heatmap ", GestAge), show_row_names = T, fontsize = 6)
Results <- WTestResults$Significant
AUCs <- AUCs(WTestData, PoIs = WTestResults$Significant$Protein)
PCA <- PCA(WTestData %>%
ImputeFeatureIntensity(), plotname = paste("PCA", GestAge))
## store results in Output list
WTestResultList[[GestAge]] <- list(Vulcanoplot = Vulcanoplot,
Heatmap = Heatmap,
Results = Results,
AUCs = AUCs,
STRING = STRING,
PCA = PCA)
}
## get number of "significant" proteins in each gestational age
WTestResultList %>%
map("Results") %>%
map("Protein") %>%
map_dbl(length) %>%
## rearrange chronologically
.[c(3,2,4,1)] %>%
## make nice table
knitr::kable(caption = "Number of significant Protins in each gestational age group", col.names = c("Gestational Age Group", "N"))
## plot Heat maps in each gestational age group
WTestResultList %>%
map("Heatmap")
## compare AUCs of significant proteins in different gestational age groups
AUCsList <- WTestResultList %>%
map("AUCs") %>%
map("results")
## make Data frame
AUCs <- do.call(rbind, AUCsList) %>%
rownames_to_column(var = "GestationalAge") %>%
mutate(GestationalAge = str_split_i(GestationalAge,"\\.",1))
## plot AUCs
AUCs %>%
ggplot(aes(x = Protein, y = AUC, colour = GestationalAge)) +
geom_point() +
theme_minimal() +
## angle x axis text by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## delete x axis text
theme(axis.text.x = element_blank()) +
ggtitle("AUCs of significant proteins in different gestational age groups")
## Check if proteins occur more than once in the significant results
Proteins <- WTestResultList %>%
map("Results") %>%
map("Protein")
# Create an UpSet plot
UpSetPlot <- UpSetR::upset(UpSetR::fromList(Proteins),
order.by = "freq",
main.bar.color = "steelblue",
sets.bar.color = "gold",
text.scale = 1.5)
UpSetPlot
KruskalResults <- KruskalTest(AgeData %>% mutate(Status= GestationalAge))
KruskalResults$Significant %>% select(Protein, p.adj) %>%
## make nice table
knitr::kable()
PoIs <- KruskalResults$Significant$Protein %>% head(9)
AgeData %>% filter(Protein %in% PoIs) %>% normalizeIntensityOnFeature() %>%
ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
## wrap panel to protein
facet_wrap(~Protein) +
geom_boxplot() +
ggtitle("Expression of Kruskal sig. Proteins over gestational age 1/2") + theme_minimal() +
## draw borders around panels
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
## rotate x-axis label by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## name x and y axis
xlab("Gestational Age Group") + ylab("Normalized Intensity")
PoIs <- KruskalResults$Significant$Protein %>%
## select rows 9 to 18
tail(9)
AgeData %>% filter(Protein %in% PoIs) %>% normalizeIntensityOnFeature() %>%
ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
## wrap panel to protein
facet_wrap(~Protein) +
geom_boxplot() +
ggtitle("Expression of Kruskal sig. Proteins over gestational age 2/2") + theme_minimal() +
## draw borders around panels
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
## rotate x-axis label by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## name x and y axis
xlab("Gestational Age Group") + ylab("Normalized Intensity")
ANOVAResults <- AgeData %>%
group_by(Protein) %>%
rstatix::anova_test(Intensity ~  GestationalAge + Status) %>%
rstatix::adjust_pvalue(method = "BH") %>%
rstatix::add_significance(p.col = "p.adj")
ANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(GestationalAge < 0.05 & Status < 0.05)
PoIs <- c("P26583_HMGB2","P43490_NAMPT")
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
InteractionANOVAResults <- AgeData %>%
group_by(Protein) %>%
rstatix::anova_test(Intensity ~  GestationalAge * Status) %>%
rstatix::adjust_pvalue(method = "BH") %>%
rstatix::add_significance(p.col = "p.adj")
InteractionANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(`GestationalAge:Status` < 0.05)
PoIs  <- c("P53618_COPB1")
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
InteractionANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(Status < 0.05) %>%
knitr::kable()
PoIs  <- InteractionANOVAResults %>% data.frame()%>% filter(Effect == "Status") %>% filter(p.adj < 0.05) %>% arrange(p.adj) %>% head(9) %>% pull(Protein)
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
LiberalANOVAResults <- AgeData %>%
group_by(Protein) %>%
filter(GestationalAge != "late-term") %>%
rstatix::anova_test(Intensity ~  GestationalAge * Status)
BothANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(Status < 0.05 & GestationalAge < 0.05) %>%
arrange(Status)
BothANOVAProteins <- BothANOVAResults %>% pull(Protein)
## include graphic
knitr::include_graphics(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Biomarker\ANOVA_Significant_Proteins\string_network_vector_graphic.svg)")
StringResults <- STRING(BothANOVAProteins, STRINGBackground = unique(CorrectedData$Protein))
StringResults$ProcessPlot
## for convenience, we are going to define a function that plots the anova results
PlotResults <- function(PoIs , n = 9){
PoIs <- PoIs %>% head(n)
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
StatusANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(Status < 0.05) %>%
arrange(Status)
StatusANOVAProteins <- StatusANOVAResults %>% pull(Protein)
print(paste(length(StatusANOVAProteins),"Proteins were found to be significant"))
PlotResults(StatusANOVAProteins)
AllANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(Status < 0.05 & GestationalAge < 0.05 & `GestationalAge:Status` < 0.05) %>%
arrange(Status)
AllANOVAProteins <- AllANOVAResults %>% pull(Protein)
print(paste(length(AllANOVAProteins),"Proteins were found to be significant"))
PlotResults(AllANOVAProteins)
StatusAndInteractionANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(Status < 0.05 & `GestationalAge:Status` < 0.05) %>%
arrange(Status)
StatusAndInteractionProteins <- StatusAndInteractionANOVAResults %>% pull(Protein)
print(paste(length(StatusAndInteractionProteins),"Proteins were found to be significant"))
PlotResults(StatusAndInteractionProteins)
InteractionANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(`GestationalAge:Status` < 0.05) %>%
arrange(`GestationalAge:Status` )
InteractionANOVAProteins <- InteractionANOVAResults %>% pull(Protein)
print(paste(length(InteractionANOVAProteins),"Proteins were found to be significant"))
PlotResults(InteractionANOVAProteins)
StatusOrGAANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(`GestationalAge` < 0.05 | Status < 0.05 ) %>%
arrange(Status)
StatusOrGAANOVAANOVAProteins <- StatusOrGAANOVAResults %>% pull(Protein)
print(paste(length(StatusOrGAANOVAANOVAProteins),"Proteins were found to be significant"))
PlotResults(InteractionANOVAProteins)
##### Overlap of the ANOVA significant Proteins
## Make list of different ANOVASignificant proteins
AllSignificantProteins <- list(Status = StatusANOVAProteins,
AllTerms = AllANOVAProteins,StatusAndInteraction = StatusAndInteractionProteins, Interaction = InteractionANOVAProteins, StatusAndGA = BothANOVAProteins)
# Create an UpSet plot
UpSetPlot <- UpSetR::upset(UpSetR::fromList(AllSignificantProteins),
order.by = "freq",
main.bar.color = "steelblue",
sets.bar.color = "gold",
text.scale = 1.5)
UpSetPlot
