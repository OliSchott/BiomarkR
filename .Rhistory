## add vertical line at x = 450
geom_vline(xintercept = 24, linetype = "dashed", color = "red") +
## remove y axis
theme(axis.text.y = element_blank(), axis.title.y = element_blank()) +
## make semi transparent
scale_alpha_manual(values = c(0.5, 0.5)) +
## add highlight if found in both studies
geom_segment(data = Plotdata %>% filter(Study == "ALyme" & peptide %in% (Plotdata %>% filter(Study == "NLyme") %>% pull(peptide))), aes(x = start, xend = end, y = peptide, yend = peptide, color = "Both"), size = 4)
ggplot(Plotdata) +
geom_segment(aes(x = start, xend = end, y = peptide, yend = peptide, color = Study), size = 4) +
labs(title = "Peptide map of FCGBP in Lyme Disease", x = "Position in Protein", y = "Peptides") +
theme_minimal() +
## add vertical line at x = 450
geom_vline(xintercept = 450, linetype = "dashed", color = "black") +
## add vertical line at x = 450
geom_vline(xintercept = 24, linetype = "dashed", color = "black") +
## remove y axis
theme(axis.text.y = element_blank(), axis.title.y = element_blank()) +
## make semi transparent
scale_alpha_manual(values = c(0.5, 0.5)) +
## add highlight if found in both studies
geom_segment(data = Plotdata %>% filter(Study == "ALyme" & peptide %in% (Plotdata %>% filter(Study == "NLyme") %>% pull(peptide))), aes(x = start, xend = end, y = peptide, yend = peptide, color = "Both"), size = 4)
ggplot(Plotdata) +
geom_segment(aes(x = start, xend = end, y = peptide, yend = peptide, color = Study), size = 4) +
labs(title = "Peptide map of FCGBP in Lyme Disease", x = "Position in Protein", y = "Peptides") +
theme_minimal() +
## add vertical line at x = 450
geom_vline(xintercept = 450, linetype = "dashed", color = "black") +
## add vertical line at x = 450
geom_vline(xintercept = 24, linetype = "dashed", color = "black") +
## remove y axis
theme(axis.text.y = element_blank(), axis.title.y = element_blank()) +
## make semi transparent
scale_alpha_manual(values = c(0.5, 0.5)) +
## add highlight if found in both studies
geom_segment(data = Plotdata %>% filter(Study == "ALyme" & peptide %in% (Plotdata %>% filter(Study == "NLyme") %>% pull(peptide))), aes(x = start, xend = end, y = peptide, yend = peptide, color = "Both"), size = 4)
colnames(PeptideDataALyme)
## calculate average number of peptides in each sample in the ALyme
PeptideDataALyme %>%
group_by(Sample) %>%
summarise(NumPeptides = n()) %>%
summarise(AvgNumPeptides = mean(NumPeptides))
## calculate average number of peptides in each sample in the ALyme
PeptideDataALyme %>%
group_by(Sample) %>%
summarise(NumPeptides = n())
## calculate average number of peptides in each sample in the ALyme
PeptideDataALyme %>%
group_by(Sample) %>%
summarise(NumPeptides = n()) %>%
summarise(AvgNumPeptides = mean(NumPeptides))
## calculate average number of peptides in each sample in the NLyme
PeptideDataRawNLymeDiscovery %>%
group_by(Sample) %>%
summarise(NumPeptides = n()) %>%
summarise(AvgNumPeptides = mean(NumPeptides))
## calculate average number of peptides in each sample in the ALyme
PeptideDataALyme %>%
group_by(Sample) %>%
summarise(NumPeptides = n()) %>%
summarise(AvgNumPeptides = mean(NumPeptides))
## calculate average number of peptides in each sample in the NLyme
PeptideDataRawNLymeDiscovery %>%
group_by(Sample) %>%
summarise(NumPeptides = n()) %>%
summarise(AvgNumPeptides = mean(NumPeptides))
## calculate average number of peptides in each sample in the ALyme
PeptidesPerSampleALyme <- PeptideDataALyme %>%
group_by(Sample) %>%
summarise(NumPeptides = n())
## calculate average number of peptides in each sample in the NLyme
PeptidesPerSampleNLyme <- PeptideDataRawNLymeDiscovery %>%
group_by(Sample) %>%
summarise(NumPeptides = n())
## calculate average number of peptides in each sample in the ALyme
PeptidesPerSampleALyme <- PeptideDataALyme %>%
group_by(Sample) %>%
summarise(NumPeptides = n()) %>%
mutate(Study = "ALyme")
## calculate average number of peptides in each sample in the NLyme
PeptidesPerSampleNLyme <- PeptideDataRawNLymeDiscovery %>%
group_by(Sample) %>%
summarise(NumPeptides = n()) %>%
mutate(Study = "NLyme")
## combine resutls
PeptidesPerSample <- bind_rows(PeptidesPerSampleALyme, PeptidesPerSampleNLyme)
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal()
PeptidesPerSampleNLyme <- PeptideDataRawNLymeDiscovery %>%
group_by(Sample) %>%
summarise(NumPeptides = n())
## calculate average number of peptides in each sample in the NLyme
PeptidesPerSampleNLyme <- PeptideDataRawNLymeDiscovery %>%
##
filter(!is.na(Intensity)) %>%
group_by(Sample) %>%
summarise(NumPeptides = n()) %>%
mutate(Study = "NLyme")
## combine resutls
PeptidesPerSample <- bind_rows(PeptidesPerSampleALyme, PeptidesPerSampleNLyme)
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal()
## calculate average number of peptides in each sample in the ALyme
PeptidesPerSampleALyme <- PeptideDataALyme %>%
filter(!is.na(Intensity)) %>%
group_by(Sample) %>%
summarise(NumPeptides = n()) %>%
mutate(Study = "ALyme")
## calculate average number of peptides in each sample in the ALyme
PeptidesPerSampleALyme <- PeptideDataALyme %>%
filter(!is.na(Intensity)) %>%
group_by(Sample) %>%
summarise(NumPeptides = n()) %>%
mutate(Study = "ALyme")
## calculate average number of peptides in each sample in the NLyme
PeptidesPerSampleNLyme <- PeptideDataRawNLymeDiscovery %>%
##
filter(!is.na(Intensity)) %>%
group_by(Sample) %>%
summarise(NumPeptides = n()) %>%
mutate(Study = "NLyme")
## combine resutls
PeptidesPerSample <- bind_rows(PeptidesPerSampleALyme, PeptidesPerSampleNLyme)
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal()
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal() +
## add significane brackets
geom_signif(comparisons = list(c("ALyme", "NLyme")), map_signif_level = TRUE, textsize = 6, vjust = 0.5)
?geom_signif
?ggsignif
??geom_signif
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal() +
## add significane brackets
ggpubr::geom_signif(comparisons = list(c("ALyme", "NLyme")), map_signif_level = TRUE, textsize = 6, vjust = 0.5)
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal()
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal() +
ggsignif::geom_signif(comparisons = list(c("ALyme", "NLyme")), map_signif_level = TRUE, textsize = 6)
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal()
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal() +
geom_signif(comparisons = list(c("ALyme", "NLyme")), map_signif_level = TRUE, textsize = 6)
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal() +
ggsignif::geom_signif(comparisons = list(c("ALyme", "NLyme")), map_signif_level = TRUE, textsize = 6)
## boxplot of results
ggplot(PeptidesPerSample %>% group_by(Study)) +
geom_boxplot(aes(x = Study, y = NumPeptides)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal() +
ggsignif::geom_signif(comparisons = list(c("ALyme", "NLyme")), map_signif_level = TRUE, textsize = 6)
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides, group = Study)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal() +
ggsignif::geom_signif(comparisons = list(c("ALyme", "NLyme")), map_signif_level = TRUE, textsize = 6)
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides, group = Study)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal()
## boxplot of results
ggplot(PeptidesPerSample) +
geom_boxplot(aes(x = Study, y = NumPeptides, fill = Study)) +
labs(title = "Number of Peptides per Sample", x = "Study", y = "Number of Peptides") +
theme_minimal()
ggplot(Plotdata) +
geom_segment(aes(x = start, xend = end, y = peptide, yend = peptide, color = Study), size = 4) +
labs(title = "Peptide map of FCGBP in Lyme Disease", x = "Position in Protein", y = "Peptides") +
theme_minimal() +
## add vertical line at x = 450
geom_vline(xintercept = 450, linetype = "dashed", color = "black") +
## add vertical line at x = 450
geom_vline(xintercept = 24, linetype = "dashed", color = "black") +
## remove y axis
theme(axis.text.y = element_blank(), axis.title.y = element_blank()) +
## make semi transparent
scale_alpha_manual(values = c(0.5, 0.5)) +
## add highlight if found in both studies
geom_segment(data = Plotdata %>% filter(Study == "ALyme" & peptide %in% (Plotdata %>% filter(Study == "NLyme") %>% pull(peptide))), aes(x = start, xend = end, y = peptide, yend = peptide, color = "Both"), size = 4)
dataset <- PeptideDataRawALymeDiscovery
## creating heat map Data
if ("Protein" %in% colnames(dataset)) {
HeatMapData <- dataset %>%
dplyr::filter(Protein %in% PoIs) %>%
dplyr::group_by(Protein) %>%
dplyr::mutate(Intensity = scale(Intensity, center = TRUE, scale = TRUE))
## Quantitative heat map data
HeatMapDataQuant <- HeatMapData %>%
tidyr::pivot_wider(names_from = "Protein", values_from = "Intensity") %>%
column_to_rownames(var = "Sample") %>%
dplyr::select(dplyr::contains("_")) %>%
t() %>%
as.matrix()
## clinical heat map data
HeatMapDataClin <- HeatMapData %>%
tidyr::pivot_wider(names_from = "Protein", values_from = "Intensity") %>%
dplyr::select(!dplyr::contains("_"))
} else if ("Peptide" %in% colnames(dataset)) {
HeatMapData <- dataset %>%
dplyr::filter(Peptide %in% PoIs) %>%
dplyr::group_by(Peptide) %>%
dplyr::mutate(Intensity = scale(Intensity, center = TRUE, scale = TRUE))
## Quantitative heat map data
HeatMapDataQuant <- HeatMapData %>%
tidyr::pivot_wider(names_from = "Peptide", values_from = "Intensity") %>%
column_to_rownames(var = "Sample") %>%
dplyr::select(dplyr::contains("_")) %>%
t() %>%
as.matrix()
## clinical heat map data
HeatMapDataClin <- HeatMapData %>%
tidyr::pivot_wider(names_from = "Peptide", values_from = "Intensity") %>%
dplyr::select(!dplyr::contains("_"))
} else {
stop("Dataset must contain either 'Protein' or 'Peptide' column.")
}
PoIs <- unique(dataset$Peptide[1:10])
## creating heat map Data
if ("Protein" %in% colnames(dataset)) {
HeatMapData <- dataset %>%
dplyr::filter(Protein %in% PoIs) %>%
dplyr::group_by(Protein) %>%
dplyr::mutate(Intensity = scale(Intensity, center = TRUE, scale = TRUE))
## Quantitative heat map data
HeatMapDataQuant <- HeatMapData %>%
tidyr::pivot_wider(names_from = "Protein", values_from = "Intensity") %>%
column_to_rownames(var = "Sample") %>%
dplyr::select(dplyr::contains("_")) %>%
t() %>%
as.matrix()
## clinical heat map data
HeatMapDataClin <- HeatMapData %>%
tidyr::pivot_wider(names_from = "Protein", values_from = "Intensity") %>%
dplyr::select(!dplyr::contains("_"))
} else if ("Peptide" %in% colnames(dataset)) {
HeatMapData <- dataset %>%
dplyr::filter(Peptide %in% PoIs) %>%
dplyr::group_by(Peptide) %>%
dplyr::mutate(Intensity = scale(Intensity, center = TRUE, scale = TRUE))
## Quantitative heat map data
HeatMapDataQuant <- HeatMapData %>%
tidyr::pivot_wider(names_from = "Peptide", values_from = "Intensity") %>%
column_to_rownames(var = "Sample") %>%
dplyr::select(dplyr::contains("_")) %>%
t() %>%
as.matrix()
## clinical heat map data
HeatMapDataClin <- HeatMapData %>%
tidyr::pivot_wider(names_from = "Peptide", values_from = "Intensity") %>%
dplyr::select(!dplyr::contains("_"))
} else {
stop("Dataset must contain either 'Protein' or 'Peptide' column.")
}
View(HeatMapDataQuant)
View(HeatMapDataClin)
View(HeatMapDataQuant)
View(HeatMapDataQuant)
RankedIntensities(PeptideDataALyme)
RankedIntensities(PeptideDataALyme, feature = "peptide")
RankedIntensities(PeptideDataALyme )
filepath <- r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\Plate_Layout\PlateLookup.csv)"
GenerateSampleIDsFromFilePath(filepath = filepath)
GenerateSampleIDsFromFilePath(filepath = filepath)
filepath <- r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\PlateLookup.xlsx)"
GenerateSampleIDsFromFilePath(filepath = filepath)
PlateLookUp <- read.csv(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\PlateLookup with Sample IDs)")
PlateLookUp <- read.csv(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\PlateLookup with Sample IDs)")
DataClin <- read_excel(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\DataClin.csv)")
library(readxl)
DataClin <- read_excel(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\DataClin.csv)")
DataClin <- read_excel(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\DataClin.csv)")
DataClin <- read_excel(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\DataClin.csv)")
DataClin <- read_excel(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\DataClin.csv)")
DataClin <- dear.csv(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\DataClin.csv)")
DataClin <- read.csv(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\DataClin.csv)")
View(DataClin)
View(PlateLookUp)
PlateLookUp <- read_excel(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\PlateLookup with Sample IDs)")
View(PlateLookUp)
PlateLookUp <- read_excel(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\PlateLookup with Sample IDs)")
PlateLookUp <- read_tsv(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\PlateLookup with Sample IDs)")
View(PlateLookUp)
PlateLookUp <- read_tsv(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\PlateLookup with Sample IDs)") %>%
select(-c(row, column))
View(PlateLookUp)
DataClin <- read.csv(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\DataClin.csv)")
DataClinWithSampleID <- merge(DataClin, PlateLookUp, by = "Sample")
View(DataClinWithSampleID)
DataClinWithSampleID <- merge(DataClin, PlateLookUp, by = "Sample") %>%
select(c("Sample ID", !"Sample ID"))
View(DataClinWithSampleID)
colnames(DataClinWithSampleID)[1:2] <- c("Sample","Idendifier")
View(DataClinWithSampleID)
colnames(DataClinWithSampleID)[3] <- "Gene"
colnames(DataClinWithSampleID)[3] <- "MutatedGene"
View(DataClinWithSampleID)
PlateLookUp <- read_tsv(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\PlateLookup with Sample IDs)") %>%
select(-c(row, column))
DataClin <- read.csv(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP\DataClin.csv)")
DataClinWithSampleID <- merge(DataClin, PlateLookUp, by = "Sample") %>%
select(c("Sample ID", !"Sample ID"))
colnames(DataClinWithSampleID)[1:2] <- c("Sample","Idendifier")
View(DataClinWithSampleID)
setwd("G:/Shared drives/Path-Steen-OliverSchott/HSP")
write_excel_csv(DataClinWithSampleID, "DataClinWithSampleIDs")
library(tidyverse)
library(BiomarkR)
## load data
filepath <- r"("C:\Users\CH254567\OneDrive - Boston Children's Hospital\Desktop\test_ROCs\df.csv")"
## load data
filepath <- r"(C:\Users\CH254567\OneDrive - Boston Children's Hospital\Desktop\test_ROCs\df.csv)"
## load data
df <- read_excel(r"(C:\Users\CH254567\OneDrive - Boston Children's Hospital\Desktop\test_ROCs\df.csv)")
library(readxl)
## load data
df <- read_excel(r"(C:\Users\CH254567\OneDrive - Boston Children's Hospital\Desktop\test_ROCs\df.csv)")
## load data
df <- read.csv(r"(C:\Users\CH254567\OneDrive - Boston Children's Hospital\Desktop\test_ROCs\df.csv)")
t_results <- read.csv(r"(C:\Users\CH254567\OneDrive - Boston Children's Hospital\Desktop\test_ROCs\SP3_ttest_results_d37_VaxVSPlacebo.csv)")
View(df)
View(t_results)
X <- t_results %>% filter(p < 0.00)
View(t_results)
filter
?filter
X <- t_results %>% dplyr::filter(p < 0.00)
X <- t_results %>% dplyr::filter(p < 0.05)
PoIs <- X$Protein
AUCs(df, PoIs = PoIs)
Resutls < -AUCs(df, PoIs = PoIs)
Resutls <-AUCs(df, PoIs = PoIs)
View(Resutls)
Panel <- BiomarkerPanel(df, PoIs = PoIs, 5)
View(df)
?BiomarkerPanel
## load data
df <- read.csv(r"(C:\Users\CH254567\OneDrive - Boston Children's Hospital\Desktop\test_ROCs\df.csv)")
t_results <- read.csv(r"(C:\Users\CH254567\OneDrive - Boston Children's Hospital\Desktop\test_ROCs\SP3_ttest_results_d37_VaxVSPlacebo.csv)")
X <- t_results %>% dplyr::filter(p < 0.05)
dataset <- df
## Calculate difference betwen mean exrpession in status
### Check if dataset has more than 2 unique entries in Status
if(length(unique(dataset$Status)) > 2){
stop("More than 2 unique entries in Status")
} else {
Status1 <- unique(dataset$Status)[1]
Status2 <- unique(dataset$Status)[2]
}
# Create an empty data frame to store results
AUCResults <- data.frame(PoI = character(0), AUC = numeric(0))
# Loop through each PoI (Protein or Peptide of Interest)
for (i in 1:length(PoIs)) {
PoI <- PoIs[i]
# Filter dataset based on whether it's Protein or Peptide
if ("Protein" %in% colnames(dataset)) {
ROCData <- dplyr::filter(dataset, Protein %in% PoI)
}
if ("Peptide" %in% colnames(dataset)) {
ROCData <- dplyr::filter(dataset, Peptide %in% PoI)
}
# Ensure Status is treated as a factor
ROCData$Status <- ROCData$Status %>% as.factor()
# Calculate ROC curve and AUC
ROC <- pROC::roc(data = ROCData, response = "Status", predictor = "Intensity")
# Extract AUC value
AUC <- ROC$auc
# Populate AUCResults data frame
AUCResults[i, 1] <- PoI
AUCResults[i, 2] <- AUC
# Arrange AUCResults by decreasing AUC values
AUCResults <- dplyr::arrange(AUCResults, desc(AUC))
}
# Create AUC plot using ggplot2
AUCPlot <- ggplot2::ggplot(data = AUCResults) +
ggplot2::geom_col(mapping = ggplot2::aes(x = reorder(PoI, -AUC), y = AUC)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +
ggplot2::ggtitle(label = plotname) +
ggplot2::xlab(label = "PoI") +
ggplot2::geom_hline(yintercept = 0.5)
plotname = ""
# Create AUC plot using ggplot2
AUCPlot <- ggplot2::ggplot(data = AUCResults) +
ggplot2::geom_col(mapping = ggplot2::aes(x = reorder(PoI, -AUC), y = AUC)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +
ggplot2::ggtitle(label = plotname) +
ggplot2::xlab(label = "PoI") +
ggplot2::geom_hline(yintercept = 0.5)
if("Protein" %in% colnames(dataset)){
Diff <- dataset %>%
group_by(Protein) %>%
summarise(Diff = mean(Intensity[Status == Status1], na.rm = T) - mean(Intensity[Status == Status2], na.rm = T))
}
if("Peptide" %in% colnames(dataset)){
Diff <- dataset %>%
group_by(Peptide) %>%
summarise(Diff = mean(Intensity[Status == Status1], na.rm = T) - mean(Intensity[Status == Status2], na.rm = T))
}
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUROCs, by = "Protein") %>%
## Add AUC to 0.5 if value is less than 0.5
mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
arrange(desc(AUC))
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = "Protein") %>%
## Add AUC to 0.5 if value is less than 0.5
mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
arrange(desc(AUC))
colnames(AUCResults)
colnames(AUCResults)[1] <- "Protein"
## Combine the two dataframes
Vulcanoplotdata <- merge(Diff, AUCResults, by = "Protein") %>%
## Add AUC to 0.5 if value is less than 0.5
mutate(AUC = ifelse(AUC < 0.5, 0.5 + 0.5- AUC, AUC)) %>%
mutate(Direction = ifelse(Diff > 0, "Up", "Down")) %>%
arrange(desc(AUC))
VulcanoPlot <- ## volcano plot of Results
ggplot(Results, aes(x = Diff, y = AUC)) +
geom_point(aes(col = ifelse(Direction == "Up", "blue", "red"))) +
geom_text_repel(aes(label = Protein), box.padding = 0.5) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## rename axis
xlab(paste("Fold Change in ", Status1)) +
ylab("AUC") +
## add title
ggtitle(paste("AUCs of PoIs", plotname)) +
## remove legend
theme(legend.position = "none")
Vulcanoplotdata
VulcanoPlot <- ## volcano plot of Results
ggplot(Vulcanoplotdata, aes(x = Diff, y = AUC)) +
geom_point(aes(col = ifelse(Direction == "Up", "blue", "red"))) +
geom_text_repel(aes(label = Protein), box.padding = 0.5) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## rename axis
xlab(paste("Fold Change in ", Status1)) +
ylab("AUC") +
## add title
ggtitle(paste("AUCs of PoIs", plotname)) +
## remove legend
theme(legend.position = "none")
library(ggrepel)
VulcanoPlot <- ## volcano plot of Results
ggplot(Vulcanoplotdata, aes(x = Diff, y = AUC)) +
geom_point(aes(col = ifelse(Direction == "Up", "blue", "red"))) +
geom_text_repel(aes(label = Protein), box.padding = 0.5) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## rename axis
xlab(paste("Fold Change in ", Status1)) +
ylab("AUC") +
## add title
ggtitle(paste("AUCs of PoIs", plotname)) +
## remove legend
theme(legend.position = "none")
VulcanoPlot
remotes::install_github("OliSchott\BiomarkR")
remotes::install_github("OliSchott/BiomarkR")
detach("package:BiomarkR", unload = TRUE)
detach("package:BiomarkR", unload = TRUE)
remotes::install_github("OliSchott/BiomarkR")
library(tidyverse)
library(BiomarkR)
library(readxl)
## load data
df <- read.csv(r"(C:\Users\CH254567\OneDrive - Boston Children's Hospital\Desktop\test_ROCs\df.csv)")
t_results <- read.csv(r"(C:\Users\CH254567\OneDrive - Boston Children's Hospital\Desktop\test_ROCs\SP3_ttest_results_d37_VaxVSPlacebo.csv)")
X <- t_results %>% dplyr::filter(p < 0.05)
PoIs <- X$Protein
Resutls <-AUCs(df, PoIs = PoIs)
Resutls
Resutls <-AUCs(df, PoIs = unique(df$Protein))
Resutls
