n <- FisherResults$n
Results[[i]] <- data.frame(Protein, p, n)
}
if("Peptide" %in% colnames(dataset)){
PoIs <- unique(dataset$Peptide)
DataForFisher <- dataset %>%
dplyr::filter(Peptide %in% PoIs) %>%
dplyr::select(Sample, Peptide, Intensity, Status) %>%
tidyr::pivot_wider(names_from = Peptide, values_from = Intensity) %>%
tidyr::pivot_longer(cols = -c(Sample, Status), names_to = "Peptide", values_to = "Intensity")
## Create contingency table
ContingencyTable <- DataForFisher %>%
dplyr::group_by(Peptide, Status) %>%
dplyr::summarise(Count = dplyr::n(),
Missing = sum(is.na(Intensity)), .groups = 'drop') %>%
split(.$Peptide)
## Run Fisher Test
Results <- list()
for (i in 1:length(ContingencyTable)) {
ConfusionMatrix <- as.data.frame(ContingencyTable[[i]]) %>%
dplyr::select(-Peptide) %>%
tibble::column_to_rownames("Status") %>%
as.matrix()
FisherResults <- rstatix::fisher_test(ConfusionMatrix, detailed = TRUE)
Peptide <- ContingencyTable[[i]]$Peptide[1]
p <- FisherResults$p
n <- FisherResults$n
Results[[i]] <- data.frame(Peptide, p, n)
}
}
if("Protein" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>%
dplyr::group_by(Protein, Status) %>%
dplyr::summarise(Count = dplyr::n(), .groups = 'drop') %>%
group_by(Status, Protein) %>%
dplyr::mutate(Percentage = Count/sum(Count) * 100)
}
if("Peptide" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>%
dplyr::group_by(Peptide, Status) %>%
dplyr::summarise(Count = dplyr::n(), .groups = 'drop') %>%
group_by(Status, Peptide) %>%
dplyr::mutate(Percentage = Count/sum(Count) * 100)
}
Results <- dplyr::bind_rows(Results) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adjust.method) %>%
dplyr::arrange(p.adj) %>%
dplyr::mutate(log10adjustP = -log10(p.adj)) %>%
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2))
return(list(Results = Results,
Frequency = Frequency))
}
X <- FisherTest(DataQuant, p.adjust.method = "none")
if("Protein" %in% colnames(dataset)){
PoIs <- unique(dataset$Protein)
DataForFisher <- dataset %>%
dplyr::filter(Protein %in% PoIs) %>%
dplyr::select(Sample, Protein, Intensity, Status) %>%
tidyr::pivot_wider(names_from = Protein, values_from = Intensity) %>%
tidyr::pivot_longer(cols = -c(Sample, Status), names_to = "Protein", values_to = "Intensity")
## Create contingency table
ContingencyTable <- DataForFisher %>%
dplyr::group_by(Protein, Status) %>%
dplyr::summarise(Count = dplyr::n(),
Missing = sum(is.na(Intensity)), .groups = 'drop') %>%
split(.$Protein)
## Run Fisher Test
Results <- list()
for (i in 1:length(ContingencyTable)) {
ConfusionMatrix <- as.data.frame(ContingencyTable[[i]]) %>%
dplyr::select(-Protein) %>%
tibble::column_to_rownames("Status") %>%
as.matrix()
FisherResults <- rstatix::fisher_test(ConfusionMatrix, detailed = TRUE)
Protein <- ContingencyTable[[i]]$Protein[1]
p <- FisherResults$p
n <- FisherResults$n
Results[[i]] <- data.frame(Protein, p, n)
}
if("Peptide" %in% colnames(dataset)){
PoIs <- unique(dataset$Peptide)
DataForFisher <- dataset %>%
dplyr::filter(Peptide %in% PoIs) %>%
dplyr::select(Sample, Peptide, Intensity, Status) %>%
tidyr::pivot_wider(names_from = Peptide, values_from = Intensity) %>%
tidyr::pivot_longer(cols = -c(Sample, Status), names_to = "Peptide", values_to = "Intensity")
## Create contingency table
ContingencyTable <- DataForFisher %>%
dplyr::group_by(Peptide, Status) %>%
dplyr::summarise(Count = dplyr::n(),
Missing = sum(is.na(Intensity)), .groups = 'drop') %>%
split(.$Peptide)
## Run Fisher Test
Results <- list()
for (i in 1:length(ContingencyTable)) {
ConfusionMatrix <- as.data.frame(ContingencyTable[[i]]) %>%
dplyr::select(-Peptide) %>%
tibble::column_to_rownames("Status") %>%
as.matrix()
FisherResults <- rstatix::fisher_test(ConfusionMatrix, detailed = TRUE)
Peptide <- ContingencyTable[[i]]$Peptide[1]
p <- FisherResults$p
n <- FisherResults$n
Results[[i]] <- data.frame(Peptide, p, n)
}
}
if("Protein" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>%
dplyr::group_by(Protein, Status) %>%
dplyr::summarise(Count = dplyr::n(), .groups = 'drop') %>%
group_by(Status, Protein) %>%
dplyr::mutate(Percentage = Count/sum(Count) * 100)
}
if("Peptide" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>%
dplyr::group_by(Peptide, Status) %>%
dplyr::summarise(Count = dplyr::n(), .groups = 'drop') %>%
group_by(Status, Peptide) %>%
dplyr::mutate(Percentage = Count/sum(Count) * 100)
}
Results <- dplyr::bind_rows(Results) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adjust.method) %>%
dplyr::arrange(p.adj) %>%
dplyr::mutate(log10adjustP = -log10(p.adj)) %>%
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2))
return(list(Results = Results,
Frequency = Frequency))
}
X <- FisherTest(DataQuant, p.adjust.method = "none")
if("Peptide" %in% colnames(dataset)){
PoIs <- unique(dataset$Peptide)
DataForFisher <- dataset %>%
dplyr::filter(Peptide %in% PoIs) %>%
dplyr::select(Sample, Peptide, Intensity, Status) %>%
tidyr::pivot_wider(names_from = Peptide, values_from = Intensity) %>%
tidyr::pivot_longer(cols = -c(Sample, Status), names_to = "Peptide", values_to = "Intensity") %>%
nObsPerGroup(Status, n = 1)
## Create contingency table
ContingencyTable <- DataForFisher %>%
dplyr::group_by(Peptide, Status) %>%
dplyr::summarise(Count = dplyr::n(),
Missing = sum(is.na(Intensity)), .groups = 'drop') %>%
split(.$Peptide)
}
## Run Fisher Test
Results <- list()
for (i in 1:length(ContingencyTable)) {
ConfusionMatrix <- as.data.frame(ContingencyTable[[i]]) %>%
dplyr::select(-Peptide) %>%
tibble::column_to_rownames("Status") %>%
as.matrix() %>% t()
FisherResults <- rstatix::fisher_test(ConfusionMatrix, detailed = TRUE)
Peptide <- ContingencyTable[[i]]$Peptide[1]
p <- FisherResults$p
n <- FisherResults$n
Results[[i]] <- data.frame(Peptide, p, n)
}
if("Protein" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>%
dplyr::group_by(Protein, Status) %>%
dplyr::summarise(Count = dplyr::n(), .groups = 'drop') %>%
group_by(Status, Protein) %>%
dplyr::mutate(Percentage = Count/sum(Count) * 100)
Results <- dplyr::bind_rows(Results) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adjust.method) %>%
dplyr::arrange(p.adj) %>%
dplyr::mutate(log10adjustP = -log10(p.adj)) %>%
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2))
}
if("Peptide" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>%
dplyr::count(Peptide, Status) %>%
tidyr::pivot_wider(names_from = Status, values_from = n)
Results <- dplyr::bind_rows(Results) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adjust.method) %>%
dplyr::arrange(p.adj) %>%
dplyr::mutate(log10adjustP = -log10(p.adj)) %>%
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2))
}
View(Results)
X <- FisherTest(DataQuant, p.adjust.method = "BH")
Y <- X$Results
Z <- X$Frequency
FisherTest <- function(dataset, p.adjust.method = "BH"){
## Prepare Data
if("Protein" %in% colnames(dataset)){
PoIs <- unique(dataset$Protein)
DataForFisher <- dataset %>%
dplyr::filter(Protein %in% PoIs) %>%
dplyr::select(Sample, Protein, Intensity, Status) %>%
tidyr::pivot_wider(names_from = Protein, values_from = Intensity) %>%
tidyr::pivot_longer(cols = -c(Sample, Status), names_to = "Protein", values_to = "Intensity") %>%
nObsPerGroup(Status, n = 1)
## Create contingency table
ContingencyTable <- DataForFisher %>%
dplyr::group_by(Protein, Status) %>%
dplyr::summarise(Count = dplyr::n(),
Missing = sum(is.na(Intensity)), .groups = 'drop') %>%
split(.$Protein)
## Run Fisher Test
Results <- list()
for (i in 1:length(ContingencyTable)) {
ConfusionMatrix <- as.data.frame(ContingencyTable[[i]]) %>%
dplyr::select(-Protein) %>%
tibble::column_to_rownames("Status") %>%
as.matrix()
FisherResults <- rstatix::fisher_test(ConfusionMatrix, detailed = TRUE)
Protein <- ContingencyTable[[i]]$Protein[1]
p <- FisherResults$p
n <- FisherResults$n
Results[[i]] <- data.frame(Protein, p, n)
}
}
if("Peptide" %in% colnames(dataset)){
PoIs <- unique(dataset$Peptide)
DataForFisher <- dataset %>%
dplyr::filter(Peptide %in% PoIs) %>%
dplyr::select(Sample, Peptide, Intensity, Status) %>%
tidyr::pivot_wider(names_from = Peptide, values_from = Intensity) %>%
tidyr::pivot_longer(cols = -c(Sample, Status), names_to = "Peptide", values_to = "Intensity") %>%
nObsPerGroup(Status, n = 1)
## Create contingency table
ContingencyTable <- DataForFisher %>%
dplyr::group_by(Peptide, Status) %>%
dplyr::summarise(Count = dplyr::n(),
Missing = sum(is.na(Intensity)), .groups = 'drop') %>%
split(.$Peptide)
}
## Run Fisher Test
Results <- list()
for (i in 1:length(ContingencyTable)) {
ConfusionMatrix <- as.data.frame(ContingencyTable[[i]]) %>%
dplyr::select(-Peptide) %>%
tibble::column_to_rownames("Status") %>%
as.matrix() %>% t()
FisherResults <- rstatix::fisher_test(ConfusionMatrix, detailed = TRUE)
Peptide <- ContingencyTable[[i]]$Peptide[1]
p <- FisherResults$p
n <- FisherResults$n
Results[[i]] <- data.frame(Peptide, p, n)
}
## Create output
if("Protein" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>%
dplyr::group_by(Protein, Status) %>%
dplyr::summarise(Count = dplyr::n(), .groups = 'drop') %>%
group_by(Status, Protein) %>%
dplyr::mutate(Percentage = Count/sum(Count) * 100)
Results <- dplyr::bind_rows(Results) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adjust.method) %>%
dplyr::arrange(p.adj) %>%
dplyr::mutate(log10adjustP = -log10(p.adj)) %>%
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2))
}
if("Peptide" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>%
dplyr::count(Peptide, Status) %>%
tidyr::pivot_wider(names_from = Status, values_from = n)
Results <- dplyr::bind_rows(Results) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adjust.method) %>%
dplyr::arrange(p.adj) %>%
dplyr::mutate(log10adjustP = -log10(p.adj)) %>%
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2))
}
## return output
return(list(Results = Results,
Frequency = Frequency))
}
X <- FisherTest(DataQuant, p.adjust.method = "BH")
Y <- X$Results
Z <- X$Frequency
View(Results)
View(Z)
ConfusionMatrix <- as.data.frame(ContingencyTable[[i]]) %>%
dplyr::select(-Peptide) %>%
tibble::column_to_rownames("Status") %>%
as.matrix() %>% t()
FisherResults <- rstatix::fisher_test(ConfusionMatrix, detailed = TRUE)
FisherResults
ConfusionMatrix
BoxPlotsFeatures(DataQuant, "(UniMod:28)QLGLPGPPDVPDHAAYHPFRR_ITIH4_3")
X <- FisherTest(DataQuant %>% filter(grepl(Peptide, "UniMod")), p.adjust.method = "BH")
DataQuant %>% filter(grepl(Peptide, "UniMod"))
X <- FisherTest(DataQuant %>% filter(grepl(Peptide,pattern = "UniMod")), p.adjust.method = "BH")
Y <- X$Results
Z <- X$Frequency
Y
View(Y)
View(Z)
## calculate frequency of observations per group
Frequency <- DataForFisher %>% filter(!is.na(Intensity)) %>%
dplyr::count(Peptide, Status) %>%
tidyr::pivot_wider(names_from = Status, values_from = n)
Frequency
## Fisher Test
## add roxygen comments
#' @title FisherTest
#' @description This function performs a Fisher test for differential expression analysis.
#' @param dataset The dataset to be tested
#' @param plotname The name to be displayed on created plots
#' @return A list object containing the results of the Fisher test, the significant features and a volcano plot
#' @export
FisherTest <- function(dataset, p.adjust.method = "BH"){
## Prepare Data
if("Protein" %in% colnames(dataset)){
PoIs <- unique(dataset$Protein)
DataForFisher <- dataset %>%
dplyr::filter(Protein %in% PoIs) %>%
dplyr::select(Sample, Protein, Intensity, Status) %>%
tidyr::pivot_wider(names_from = Protein, values_from = Intensity) %>%
tidyr::pivot_longer(cols = -c(Sample, Status), names_to = "Protein", values_to = "Intensity") %>%
nObsPerGroup(Status, n = 1)
## Create contingency table
ContingencyTable <- DataForFisher %>%
dplyr::group_by(Protein, Status) %>%
dplyr::summarise(Count = dplyr::n(),
Missing = sum(is.na(Intensity)), .groups = 'drop') %>%
split(.$Protein)
## Run Fisher Test
Results <- list()
for (i in 1:length(ContingencyTable)) {
ConfusionMatrix <- as.data.frame(ContingencyTable[[i]]) %>%
dplyr::select(-Protein) %>%
tibble::column_to_rownames("Status") %>%
as.matrix()
FisherResults <- rstatix::fisher_test(ConfusionMatrix, detailed = TRUE)
Protein <- ContingencyTable[[i]]$Protein[1]
p <- FisherResults$p
n <- FisherResults$n
Results[[i]] <- data.frame(Protein, p, n)
}
}
if("Peptide" %in% colnames(dataset)){
PoIs <- unique(dataset$Peptide)
DataForFisher <- dataset %>%
dplyr::filter(Peptide %in% PoIs) %>%
dplyr::select(Sample, Peptide, Intensity, Status) %>%
tidyr::pivot_wider(names_from = Peptide, values_from = Intensity) %>%
tidyr::pivot_longer(cols = -c(Sample, Status), names_to = "Peptide", values_to = "Intensity") %>%
nObsPerGroup(Status, n = 1)
## Create contingency table
ContingencyTable <- DataForFisher %>%
dplyr::group_by(Peptide, Status) %>%
dplyr::summarise(Count = dplyr::n(),
Missing = sum(is.na(Intensity)), .groups = 'drop') %>%
split(.$Peptide)
}
## Run Fisher Test
Results <- list()
for (i in 1:length(ContingencyTable)) {
ConfusionMatrix <- as.data.frame(ContingencyTable[[i]]) %>%
dplyr::select(-Peptide) %>%
tibble::column_to_rownames("Status") %>%
as.matrix() %>% t()
FisherResults <- rstatix::fisher_test(ConfusionMatrix, detailed = TRUE)
Peptide <- ContingencyTable[[i]]$Peptide[1]
p <- FisherResults$p
n <- FisherResults$n
Results[[i]] <- data.frame(Peptide, p, n)
}
## Create output
if("Protein" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>% filter(!is.na(Intensity)) %>%
dplyr::group_by(Protein, Status) %>%
dplyr::summarise(Count = dplyr::n(), .groups = 'drop') %>%
group_by(Status, Protein) %>%
dplyr::mutate(Percentage = Count/sum(Count) * 100)
Results <- dplyr::bind_rows(Results) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adjust.method) %>%
dplyr::arrange(p.adj) %>%
dplyr::mutate(log10adjustP = -log10(p.adj)) %>%
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2))
}
if("Peptide" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>% filter(!is.na(Intensity)) %>%
dplyr::count(Peptide, Status) %>%
tidyr::pivot_wider(names_from = Status, values_from = n)
Results <- dplyr::bind_rows(Results) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adjust.method) %>%
dplyr::arrange(p.adj) %>%
dplyr::mutate(log10adjustP = -log10(p.adj)) %>%
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2))
}
## return output
return(list(Results = Results,
Frequency = Frequency))
}
FisherTest <- function(dataset, p.adjust.method = "BH"){
## Prepare Data
if("Protein" %in% colnames(dataset)){
PoIs <- unique(dataset$Protein)
DataForFisher <- dataset %>%
dplyr::filter(Protein %in% PoIs) %>%
dplyr::select(Sample, Protein, Intensity, Status) %>%
tidyr::pivot_wider(names_from = Protein, values_from = Intensity) %>%
tidyr::pivot_longer(cols = -c(Sample, Status), names_to = "Protein", values_to = "Intensity") %>%
nObsPerGroup(Status, n = 1)
## Create contingency table
ContingencyTable <- DataForFisher %>%
dplyr::group_by(Protein, Status) %>%
dplyr::summarise(Count = dplyr::n(),
Missing = sum(is.na(Intensity)), .groups = 'drop') %>%
split(.$Protein)
## Run Fisher Test
Results <- list()
for (i in 1:length(ContingencyTable)) {
ConfusionMatrix <- as.data.frame(ContingencyTable[[i]]) %>%
dplyr::select(-Protein) %>%
tibble::column_to_rownames("Status") %>%
as.matrix()
FisherResults <- rstatix::fisher_test(ConfusionMatrix, detailed = TRUE)
Protein <- ContingencyTable[[i]]$Protein[1]
p <- FisherResults$p
n <- FisherResults$n
Results[[i]] <- data.frame(Protein, p, n)
}
}
if("Peptide" %in% colnames(dataset)){
PoIs <- unique(dataset$Peptide)
DataForFisher <- dataset %>%
dplyr::filter(Peptide %in% PoIs) %>%
dplyr::select(Sample, Peptide, Intensity, Status) %>%
tidyr::pivot_wider(names_from = Peptide, values_from = Intensity) %>%
tidyr::pivot_longer(cols = -c(Sample, Status), names_to = "Peptide", values_to = "Intensity") %>%
nObsPerGroup(Status, n = 1)
## Create contingency table
ContingencyTable <- DataForFisher %>%
dplyr::group_by(Peptide, Status) %>%
dplyr::summarise(Count = dplyr::n(),
Missing = sum(is.na(Intensity)), .groups = 'drop') %>%
split(.$Peptide)
}
## Run Fisher Test
Results <- list()
for (i in 1:length(ContingencyTable)) {
ConfusionMatrix <- as.data.frame(ContingencyTable[[i]]) %>%
dplyr::select(-Peptide) %>%
tibble::column_to_rownames("Status") %>%
as.matrix() %>% t()
FisherResults <- rstatix::fisher_test(ConfusionMatrix, detailed = TRUE)
Peptide <- ContingencyTable[[i]]$Peptide[1]
p <- FisherResults$p
n <- FisherResults$n
Results[[i]] <- data.frame(Peptide, p, n)
}
## Create output
if("Protein" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>% filter(!is.na(Intensity)) %>%
dplyr::group_by(Protein, Status) %>%
dplyr::summarise(Count = dplyr::n(), .groups = 'drop') %>%
group_by(Status, Protein) %>%
dplyr::mutate(Percentage = Count/sum(Count) * 100)
Results <- dplyr::bind_rows(Results) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adjust.method) %>%
dplyr::arrange(p.adj) %>%
dplyr::mutate(log10adjustP = -log10(p.adj)) %>%
dplyr::mutate(Gene = stringr::str_split_i(Protein, pattern = "_", 2))
}
if("Peptide" %in% colnames(dataset)){
## calculate frequency of observations per group
Frequency <- DataForFisher %>% filter(!is.na(Intensity)) %>%
dplyr::count(Peptide, Status) %>%
tidyr::pivot_wider(names_from = Status, values_from = n)
Results <- dplyr::bind_rows(Results) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adjust.method) %>%
dplyr::arrange(p.adj) %>%
dplyr::mutate(log10adjustP = -log10(p.adj)) %>%
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2))
}
## return output
return(list(Results = Results,
Frequency = Frequency))
}
X <- FisherTest(DataQuant %>% filter(grepl(Peptide,pattern = "UniMod")), p.adjust.method = "BH")
Y <- X$Results
Z <- X$Frequency
View(Y)
View(Z)
BoxPlotsFeatures(DataQuant, "EVSADQVATVM")
BoxPlotsFeatures(DataQuant, "DYYM(UniMod:35)SWIR_IGHV3-11_2")
BoxPlotsFeatures(DataQuant, "(UniMod:26)CC(UniMod:4)QDGVTRLPMMR_C4B_2_2")
