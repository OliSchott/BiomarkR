ObsInStatus2 = sum(!is.na(.data[[Status2]]))
) %>%
dplyr::mutate(possible = ifelse(ObsInStatus1 < 2 | ObsInStatus2 < 2, FALSE, TRUE)) %>%
dplyr::filter(possible)
WResults <- datasetW %>%
dplyr::filter(Protein %in% filter$Protein) %>%
dplyr::group_by(Protein) %>%
rstatix::wilcox_test(Intensity ~ Status, detailed = TRUE) %>%
rstatix::adjust_pvalue(method = p.adj.method) %>%
dplyr::mutate(
UniprotID = stringr::str_split_i(Protein, pattern = "_", 1),
Gene = stringr::str_split_i(Protein, pattern = "_", 2),
log10adjustP = -1 * log10(p.adj)
)
## Create dataframe of significant Proteins in global environment
WilcoxSignificantFeatures <- WResults %>%
dplyr::filter(p.adj < 0.05) %>%
dplyr::arrange(p.adj) %>%
as.data.frame() %>%
dplyr::mutate(Protein = paste0(UniprotID, "_", Gene))
print(paste(nrow(WilcoxSignificantFeatures), "Significant proteins have been identified"))
FoldChangeData <- dataset %>%
dplyr::group_by(Status, Protein) %>%
dplyr::summarise(meanInt = mean(Intensity, na.rm = TRUE)) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "meanInt") %>%
dplyr::mutate(FC = (.[[Status1]] - .[[Status2]]))
VulconaoPlotData <- merge(WResults, FoldChangeData, by = "Protein") %>%
dplyr::mutate(Direction = ifelse(p.adj > 0.05, "NotSignificant", ifelse(FC < 0, "Down", "Up")))
## Volcano plot of results
vulcanoPlot <- ggplot2::ggplot(data = VulconaoPlotData) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "NotSignificant"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "NotSignificant")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Up"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Up")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Down"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Down")
) +
ggplot2::scale_fill_manual(values = c("Up" = "red", "Down" = "blue", "NotSignificant" = "grey")) +
ggplot2::geom_hline(yintercept = -log10(0.05), alpha = 0.7, linetype = 2) +
ggplot2::geom_hline(yintercept = -log10(0.01), alpha = 0.7, linetype = 2, col = "red") +
## Add Protein names using ggrepel
ggrepel::geom_text_repel(
data = subset(VulconaoPlotData, log10adjustP > 1.3),
ggplot2::aes(label = Gene, x = FC, y = log10adjustP),
box.padding = 0.3,
point.padding = 0.3,
segment.color = "grey50",
segment.size = 0.1,
segment.alpha = 0.1,
size = 3,
angle = 30
) +
ggplot2::ggtitle(plotname) +
ggplot2::xlab(paste("Fold change in", unique(WResults$group1))) +
ggplot2::theme_light(base_size = 13) +
## rename y axis
ggplot2::ylab(ifelse(p.adj.method != "none", "log10 (p.adj)", "log10 (p)"))
}
if("Peptide" %in% colnames(dataset)) {
## Making sure we have at least 2 Observations per group
filter <- datasetW %>%
dplyr::select(c("Sample", "Status", "Peptide", "Intensity")) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "Intensity") %>%
dplyr::group_by(Peptide) %>%
dplyr::summarise(
ObsInStatus1 = sum(!is.na(.data[[Status1]])),
ObsInStatus2 = sum(!is.na(.data[[Status2]]))
) %>%
dplyr::mutate(possible = ifelse(ObsInStatus1 < 2 | ObsInStatus2 < 2, FALSE, TRUE)) %>%
dplyr::filter(possible)
WResults <- datasetW %>%
dplyr::filter(Peptide %in% filter$Peptide) %>%
dplyr::group_by(Peptide) %>%
rstatix::wilcox_test(Intensity ~ Status, detailed = TRUE) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adj.method) %>%
dplyr::mutate(
UniprotID = stringr::str_split_i(Peptide, pattern = "_", 1),
Gene = stringr::str_split_i(Peptide, pattern = "_", 3),
log10adjustP = -1 * log10(p.adj)
)
## Create dataframe of significant Peptides in global environment
WilcoxSignificantFeatures <- WResults %>%
dplyr::filter(p.adj < 0.05) %>%
dplyr::arrange(p.adj) %>%
as.data.frame()
print(paste(nrow(WilcoxSignificantFeatures), "Significant Peptides have been identified"))
FoldChangeData <- dataset %>%
dplyr::group_by(Status, Peptide) %>%
dplyr::summarise(meanInt = mean(Intensity, na.rm = TRUE)) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "meanInt") %>%
dplyr::mutate(FC = (.[[Status1]] - .[[Status2]]))
VulconaoPlotData <- merge(WResults, FoldChangeData, by = "Peptide") %>%
dplyr::mutate(Direction = ifelse(p.adj > 0.05, "NotSignificant", ifelse(FC < 0, "Down", "Up")))
## Volcano plot of results
vulcanoPlot <- ggplot2::ggplot(data = VulconaoPlotData) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "NotSignificant"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "NotSignificant")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Up"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Up")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Down"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Down")
) +
ggplot2::scale_fill_manual(values = c("Up" = "red", "Down" = "blue", "NotSignificant" = "grey")) +
ggplot2::geom_hline(yintercept = -log10(0.05), alpha = 0.7, linetype = 2) +
ggplot2::geom_hline(yintercept = -log10(0.01), alpha = 0.7, linetype = 2, col = "red") +
ggplot2::geom_text(
data = subset(VulconaoPlotData, log10adjustP > 1.3),
ggplot2::aes(label = Gene, x = FC, y = log10adjustP),
vjust = 0.5, hjust = -0.2, size = 3, angle = 30
) +
ggplot2::ggtitle(plotname) +
ggplot2::xlab(paste("Fold change in", unique(WResults$group1))) +
ggplot2::theme_light(base_size = 13) +
ggplot2::ylab(ifelse(p.adj.method != "none", "log10 (p.adj)", "log10 (p)"))
}
## plotting Heatmap using sigificant Proteins or peptides
## NOTE clustering distance c("euclidean", "maximum", "man-hattan", "canberra", "binary", "minkowski", "pearson", "spearman", "kendall")
if("Protein" %in% colnames(dataset)){
Heatmap <- BiomarkR::HeatMap(datasetW %>% select(c(Sample,Protein,Intensity,Status)), PoIs = WilcoxSignificantFeatures$Protein, method = method, clustDist = clustDist, show_column_names = F, show_row_names = F, plotname = plotname, ColPalette = ColPalette)
}
if("Peptide" %in% colnames(dataset)){
Heatmap <- BiomarkR::HeatMap(datasetW %>% select(c(Sample,Peptide,Intensity,Status)), PoIs = WilcoxSignificantFeatures$Peptide, method = method, clustDist = clustDist, show_column_names = F, show_row_names = F,plotname = plotname, ColPalette = ColPalette)
}
## Preparing Output object
Output <- list()
Output$raw <- WResults
Output$Significant <- WilcoxSignificantFeatures
Output$Vulcanoplot <- vulcanoPlot
Output$Heatmap <- Heatmap
return(Output)
}
WTestResults <- WTest(KEGGData %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_3), )
HeatMap(KEGGData, PoIs = WTestResults$Significant$Protein, show_row_names = T)
WTestResults <- WTest(KEGGData %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_3),ColPalette = "Dark2" )
HeatMap(KEGGData, PoIs = WTestResults$Significant$Protein, show_row_names = T)
## add roxygen comments
#' @title WTest
#' @description This function performs differential expression analysis using a Wilcox test.
#' @param dataset The dataset to be tested
#' @param plotname The name to be displayed on created plots
#' @param method The method to be used for the Heatmap (unsupervised, supervised)
#' @param clustDist The distance metric to be used for clustering in the Heatmap ("euclidean", "maximum", "man-hattan", "canberra", "binary", "minkowski", "pearson", "spearman", "kendall")
#' @param p.adj.method The method to be used for p-value adjustment ("BH", "holm", "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", "none")
#' @return A list object containing the results of the Wilcox test, the significant features and a volcano plot
#' @export
WTest <- function(dataset, plotname = "", method = "unsupervised", clustDist = "euclidean", p.adj.method = "BH", ColPalette = "Set1") {
datasetW <- dataset %>% dplyr::arrange(Status)
Status1 <- unique(datasetW$Status)[1] %>% as.character()
Status2 <- unique(datasetW$Status)[2] %>% as.character()
## error if there are more than 2 groups
if(length(unique(datasetW$Status)) > 2) {
stop("Only two groups (Status) are allowed for Wilcox-Test")
}
## Running the W-Test
if("Protein" %in% colnames(dataset)) {
## Making sure we have at least 2 Observations per group
filter <- datasetW %>%
dplyr::select(c("Sample", "Status", "Protein", "Intensity")) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "Intensity") %>%
dplyr::group_by(Protein) %>%
dplyr::summarise(
ObsInStatus1 = sum(!is.na(.data[[Status1]])),
ObsInStatus2 = sum(!is.na(.data[[Status2]]))
) %>%
dplyr::mutate(possible = ifelse(ObsInStatus1 < 2 | ObsInStatus2 < 2, FALSE, TRUE)) %>%
dplyr::filter(possible)
WResults <- datasetW %>%
dplyr::filter(Protein %in% filter$Protein) %>%
dplyr::group_by(Protein) %>%
rstatix::wilcox_test(Intensity ~ Status, detailed = TRUE) %>%
rstatix::adjust_pvalue(method = p.adj.method) %>%
dplyr::mutate(
UniprotID = stringr::str_split_i(Protein, pattern = "_", 1),
Gene = stringr::str_split_i(Protein, pattern = "_", 2),
log10adjustP = -1 * log10(p.adj)
)
## Create dataframe of significant Proteins in global environment
WilcoxSignificantFeatures <- WResults %>%
dplyr::filter(p.adj < 0.05) %>%
dplyr::arrange(p.adj) %>%
as.data.frame() %>%
dplyr::mutate(Protein = paste0(UniprotID, "_", Gene))
print(paste(nrow(WilcoxSignificantFeatures), "Significant proteins have been identified"))
FoldChangeData <- dataset %>%
dplyr::group_by(Status, Protein) %>%
dplyr::summarise(meanInt = mean(Intensity, na.rm = TRUE)) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "meanInt") %>%
dplyr::mutate(FC = (.[[Status1]] - .[[Status2]]))
VulconaoPlotData <- merge(WResults, FoldChangeData, by = "Protein") %>%
dplyr::mutate(Direction = ifelse(p.adj > 0.05, "NotSignificant", ifelse(FC < 0, "Down", "Up")))
## Volcano plot of results
vulcanoPlot <- ggplot2::ggplot(data = VulconaoPlotData) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "NotSignificant"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "NotSignificant")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Up"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Up")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Down"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Down")
) +
ggplot2::scale_fill_manual(values = c("Up" = "red", "Down" = "blue", "NotSignificant" = "grey")) +
ggplot2::geom_hline(yintercept = -log10(0.05), alpha = 0.7, linetype = 2) +
ggplot2::geom_hline(yintercept = -log10(0.01), alpha = 0.7, linetype = 2, col = "red") +
## Add Protein names using ggrepel
ggrepel::geom_text_repel(
data = subset(VulconaoPlotData, log10adjustP > 1.3),
ggplot2::aes(label = Gene, x = FC, y = log10adjustP),
box.padding = 0.3,
point.padding = 0.3,
segment.color = "grey50",
segment.size = 0.1,
segment.alpha = 0.1,
size = 3,
angle = 30
) +
ggplot2::ggtitle(plotname) +
ggplot2::xlab(paste("Fold change in", unique(WResults$group1))) +
ggplot2::theme_light(base_size = 13) +
## rename y axis
ggplot2::ylab(ifelse(p.adj.method != "none", "log10 (p.adj)", "log10 (p)"))
}
if("Peptide" %in% colnames(dataset)) {
## Making sure we have at least 2 Observations per group
filter <- datasetW %>%
dplyr::select(c("Sample", "Status", "Peptide", "Intensity")) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "Intensity") %>%
dplyr::group_by(Peptide) %>%
dplyr::summarise(
ObsInStatus1 = sum(!is.na(.data[[Status1]])),
ObsInStatus2 = sum(!is.na(.data[[Status2]]))
) %>%
dplyr::mutate(possible = ifelse(ObsInStatus1 < 2 | ObsInStatus2 < 2, FALSE, TRUE)) %>%
dplyr::filter(possible)
WResults <- datasetW %>%
dplyr::filter(Peptide %in% filter$Peptide) %>%
dplyr::group_by(Peptide) %>%
rstatix::wilcox_test(Intensity ~ Status, detailed = TRUE) %>%
## Adjusting p-values for multiple testing
dplyr::mutate(Gene = stringr::str_split_i(Peptide, pattern = "_", 2)) %>%
rstatix::adjust_pvalue(method = p.adj.method) %>%
dplyr::mutate(
UniprotID = stringr::str_split_i(Peptide, pattern = "_", 1),
Gene = stringr::str_split_i(Peptide, pattern = "_", 3),
log10adjustP = -1 * log10(p.adj)
)
## Create dataframe of significant Peptides in global environment
WilcoxSignificantFeatures <- WResults %>%
dplyr::filter(p.adj < 0.05) %>%
dplyr::arrange(p.adj) %>%
as.data.frame()
print(paste(nrow(WilcoxSignificantFeatures), "Significant Peptides have been identified"))
FoldChangeData <- dataset %>%
dplyr::group_by(Status, Peptide) %>%
dplyr::summarise(meanInt = mean(Intensity, na.rm = TRUE)) %>%
tidyr::pivot_wider(names_from = "Status", values_from = "meanInt") %>%
dplyr::mutate(FC = (.[[Status1]] - .[[Status2]]))
VulconaoPlotData <- merge(WResults, FoldChangeData, by = "Peptide") %>%
dplyr::mutate(Direction = ifelse(p.adj > 0.05, "NotSignificant", ifelse(FC < 0, "Down", "Up")))
## Volcano plot of results
vulcanoPlot <- ggplot2::ggplot(data = VulconaoPlotData) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "NotSignificant"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "NotSignificant")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Up"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Up")
) +
ggplot2::geom_point(
size = 3.5, shape = 21,
data = subset(VulconaoPlotData, Direction == "Down"),
ggplot2::aes(x = FC, y = log10adjustP, fill = "Down")
) +
ggplot2::scale_fill_manual(values = c("Up" = "red", "Down" = "blue", "NotSignificant" = "grey")) +
ggplot2::geom_hline(yintercept = -log10(0.05), alpha = 0.7, linetype = 2) +
ggplot2::geom_hline(yintercept = -log10(0.01), alpha = 0.7, linetype = 2, col = "red") +
ggplot2::geom_text(
data = subset(VulconaoPlotData, log10adjustP > 1.3),
ggplot2::aes(label = Gene, x = FC, y = log10adjustP),
vjust = 0.5, hjust = -0.2, size = 3, angle = 30
) +
ggplot2::ggtitle(plotname) +
ggplot2::xlab(paste("Fold change in", unique(WResults$group1))) +
ggplot2::theme_light(base_size = 13) +
ggplot2::ylab(ifelse(p.adj.method != "none", "log10 (p.adj)", "log10 (p)"))
}
## plotting Heatmap using sigificant Proteins or peptides
## NOTE clustering distance c("euclidean", "maximum", "man-hattan", "canberra", "binary", "minkowski", "pearson", "spearman", "kendall")
if("Protein" %in% colnames(dataset)){
Heatmap <- BiomarkR::HeatMap(datasetW %>% select(c(Sample,Protein,Intensity,Status)), PoIs = WilcoxSignificantFeatures$Protein, method = method, clustDist = clustDist, show_column_names = F, show_row_names = F, plotname = plotname, ColPalette = ColPalette)
}
if("Peptide" %in% colnames(dataset)){
Heatmap <- BiomarkR::HeatMap(datasetW %>% select(c(Sample,Peptide,Intensity,Status)), PoIs = WilcoxSignificantFeatures$Peptide, method = method, clustDist = clustDist, show_column_names = F, show_row_names = F,plotname = plotname, ColPalette = ColPalette)
}
## Preparing Output object
Output <- list()
Output$raw <- WResults
Output$Significant <- WilcoxSignificantFeatures
Output$Vulcanoplot <- vulcanoPlot
Output$Heatmap <- Heatmap
return(Output)
}
WTestResults <- WTest(KEGGData %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_3),ColPalette = "Dark2")
HeatMap(KEGGData, PoIs = WTestResults$Significant$Protein, show_row_names = T)
WTestResults$Heatmap
HeatMap(KEGGData, PoIs = WTestResults$Significant$Protein, show_row_names = T, ColPalette = "Dark2")
## define color pallet for later use
pellet <- "Dark1"
PoIs <- InteractionANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
filter(p.adj < 0.05) %>%
filter(! grepl("GestationalAge", Effect)) %>%
pull(Protein)
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
scale_fill_manual(values = colors) +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## binning gestational age
AgeData <- CorrectedData %>%
filter(Status %in% c("SIDS", "Healthy Control", "Demise Control")) %>%
## combine controls and call them control
mutate(Status = ifelse(Status %in% c("Healthy Control", "Demise Control"), "Control", Status)) %>%
mutate(GestationalAge = case_when(
GestationalAge <= 31 ~ "very-pre-term",
GestationalAge > 31 & GestationalAge < 37 ~ "pre-term",
GestationalAge >= 37 & GestationalAge < 39 ~ "early-term",
GestationalAge >= 39 & GestationalAge < 41 ~ "full-term",
GestationalAge >= 41 ~ "late-term"
)) %>%
filter(!GestationalAge == "late-term")
## Make GestationalAge a factor and get it into the right order
AgeData$GestationalAge <- factor(AgeData$GestationalAge, levels = c("very-pre-term", "pre-term", "early-term", "full-term", "late-term"))
## plot AgeData
colors <- assign_colors(AgeData %>% arrange(Status) %>% pull(Status) %>% unique(), palette = pellet)
## define color pallet for later use
pellet <- "Dark2"
PoIs <- InteractionANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
filter(p.adj < 0.05) %>%
filter(! grepl("GestationalAge", Effect)) %>%
pull(Protein)
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
scale_fill_manual(values = colors) +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## binning gestational age
AgeData <- CorrectedData %>%
filter(Status %in% c("SIDS", "Healthy Control", "Demise Control")) %>%
## combine controls and call them control
mutate(Status = ifelse(Status %in% c("Healthy Control", "Demise Control"), "Control", Status)) %>%
mutate(GestationalAge = case_when(
GestationalAge <= 31 ~ "very-pre-term",
GestationalAge > 31 & GestationalAge < 37 ~ "pre-term",
GestationalAge >= 37 & GestationalAge < 39 ~ "early-term",
GestationalAge >= 39 & GestationalAge < 41 ~ "full-term",
GestationalAge >= 41 ~ "late-term"
)) %>%
filter(!GestationalAge == "late-term")
## Make GestationalAge a factor and get it into the right order
AgeData$GestationalAge <- factor(AgeData$GestationalAge, levels = c("very-pre-term", "pre-term", "early-term", "full-term", "late-term"))
## plot AgeData
colors <- assign_colors(AgeData %>% arrange(Status) %>% pull(Status) %>% unique(), palette = pellet)
AgeData %>% pivot_wider(names_from = Protein, values_from = Intensity) %>%
## plot distributions of gestational age
group_by(GestationalAge, Status) %>%
summarise(n = n()) %>%
ggplot(aes(x = GestationalAge, y = n, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = colors) +
theme_minimal() +
ggtitle("Distribution of the Gestational Age groups") +
xlab("Gestational Age Group") + ylab("Number of Samples")
for (i in 1:length(names(FilteredSRINGResults))){
module <- names(FilteredSRINGResults[i])
plot(FilteredSRINGResults[[module]]$ProcessPlot)
}
PoIs  <- GoodMarkers
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
colors <- assign_colors(PlotData %>% arrange(Status) %>% pull(Status) %>% unique(), palette = "Dark2")
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
scale_fill_manual(values = colors) +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## use "Dark2" as a color pellet
HeatMap(KEGGData, PoIs = WTestResults$Significant$Protein, show_row_names = T, ColPalette = "Dark2")
HeatMap(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = WTestResults$Significant$Protein, show_row_names = T, ColPalette = "Dark2")
HeatMap(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term") %>% arrange(Status)), PoIs = WTestResults$Significant$Protein, show_row_names = T, ColPalette = "Dark2")
HeatMap(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = WTestResults$Significant$Protein, show_row_names = T, ColPalette = "Dark2")
HeatMap(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = WTestResults$Significant$Protein, show_row_names = T, ColPalette = peppet)
HeatMap(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = WTestResults$Significant$Protein, show_row_names = T, ColPalette = pellet)
## Creating Boxplots of Any Protein from a vector containing Protein names
## add roxygen comments
#' @title BoxPlotsFeatures
#' @description Creates boxplots of any protein from a vector containing protein or peptide names.
#' @param dataset The dataset to be tested
#' @param PoIs The vector containing the protein names
#' @param plotname The name to be displayed on created plots
#' @return A plot object
#' @export
BoxPlotsFeatures <- function(dataset, PoIs, plotname = "", pellet = "Set1") {
## generate colors
colors <- assign_colors(unique(dataset$Status), palette = pellet)
if ("Protein" %in% colnames(dataset)) {
BoxPlotData <- dataset %>%
dplyr::filter(Protein %in% PoIs)
Boxplot <- ggplot2::ggplot(data = BoxPlotData, ggplot2::aes(x = Status, y = Intensity, col = Status)) +
## use colors
ggplot2::scale_color_manual(values = colors) +
ggplot2::geom_violin() +
ggplot2::geom_jitter() +
ggplot2::facet_wrap(~Protein) +
ggplot2::ggtitle(paste("Expressions of Proteins", plotname)) +
ggplot2::theme(legend.position = "none") +
ggplot2::ylab("log 2 Intensity") +
ggplot2::xlab("") +
ggplot2::theme_light(base_size = 13)
}
if ("Peptide" %in% colnames(dataset)) {
BoxPlotData <- dataset %>%
dplyr::filter(Peptide %in% PoIs)
Boxplot <- ggplot2::ggplot(data = BoxPlotData, ggplot2::aes(x = Status, y = Intensity, col = Status)) +
## use colors
ggplot2::scale_color_manual(values = colors) +
ggplot2::geom_violin() +
ggplot2::geom_jitter() +
ggplot2::facet_wrap(~Peptide) +
ggplot2::ggtitle(paste("Expressions of Proteins", plotname)) +
ggplot2::theme(legend.position = "none") +
ggplot2::ylab("log 2 Intensity") +
ggplot2::xlab("") +
ggplot2::theme_light(base_size = 13)
}
return(Boxplot)
}
BoxPlotsFeatures(KEGGData %>%
mutate(Status = ifelse(Status == "Case", "SIDS", Status)), PoIs = c("P13010_XRCC5", "P26583_HMGB2", "P10412_H1.4"),pellet = pellet)
WTestResults <- WTest(KEGGData %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_3),ColPalette = pellet)
GLM(KEGGData, PoIs = c("P13010_XRCC5", "P26583_HMGB2", "P10412_H1.4"), crossvalidation = T, plotname = "Biomarker panel for pre-term SIDS risk")
GLM(KEGGData, PoIs = c("P13010_XRCC5", "P26583_HMGB2", "P10412_H1.4"), crossvalidation = T, plotname = "Biomarker panel for pre-term (< 36 Weeks GA) SIDS risk")
WTestResults <- WTest(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term") %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_3))
HeatMap(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = WTestResults$Significant$Protein, show_row_names = T, ColPalette = pellet)
WTestResults <- WTest(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term") %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_3))
WTestResults <- WTest(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term") %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_3))
HeatMap(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")), PoIs = WTestResults$Significant$Protein, show_row_names = T, ColPalette = pellet)
WTestResults <- WTest(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term") %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_3))
WTestResults <- WTest(AgeData %>% filter(GestationalAge %in% c("very-pre-term", "pre-term")) %>% filter(Protein %in% AgeMEGENAResults$Summary$modules$c1_3))
BoxPlotsFeatures(KEGGData %>%
mutate(Status = ifelse(Status == "Case", "SIDS", Status)), PoIs = c("P13010_XRCC5", "P26583_HMGB2", "P10412_H1.4"),pellet = pellet)
detach("package:BiomarkR", unload = TRUE)
remotes::install_github("OliSchott/BiomarkR")
remotes::install_github("OliSchott/BiomarkR")
