SIDSGroups <- cutree(SIDSOnlyDendrogram, k = 6) %>% data.frame() %>%
rownames_to_column(var = "Sample")
## Add the Samples to the group information
SIDSDataWithGroups <- merge(SIDSonlyData, SIDSGroups, bu = "Sample")
## Rename the columns
colnames(SIDSDataWithGroups)[ncol(SIDSDataWithGroups)] <- c("Group")
## Add the group information to the main data
CorrectedDataWithGroups <- merge(CorrectedData, SIDSGroups, by = "Sample")
colnames(CorrectedDataWithGroups)[ncol(CorrectedDataWithGroups)] <- c("Group")
## Renaming the Groups to "SIDS1" "SIDS2" etc
CorrectedDataWithGroups$Group <- paste0("SIDS", CorrectedDataWithGroups$Group)
SIDSOnlyHeatmapWithGroups <- HeatMap(CorrectedDataWithGroups %>% mutate(Status = Group), PoIs = unique(CorrectedDataWithGroups$Protein), plotname = "GroupedHeatMap", show_row_names = F, method = "supervised", cluster_columns = T, show_column_names = FALSE)
SIDSOnlyHeatmapWithGroups
##
CorrectedDataWithGroups <- CorrectedDataWithGroups %>%
## combine SIDS1 and SIDS6 and call it SIDS 1
mutate(Group = ifelse(Group %in% c("SIDS1","SIDS2", "SIDS4"), "SIDS1", Group)) %>%
## combine SIDS 2, 4, 5 and 6 and call it SIDS2
mutate(Group = ifelse(Group %in% c("SIDS5", "SIDS6"), "SIDS2", Group)) %>%
## combine SIDS 4 and 5 and call it SIDS3
mutate(Group = ifelse(Group %in% c("SIDS3"), "SIDS3", Group))
## Heatmap of the combined SIDS subgroups
HeatMap(CorrectedDataWithGroups %>% mutate(Status = Group), PoIs = unique(CorrectedDataWithGroups$Protein), plotname = "GroupedHeatMap", show_row_names = F, method = "supervised", cluster_columns = T, show_column_names = FALSE)
UMAPSIDSGroups <- UMAP(CorrectedDataWithGroups %>% mutate(Status = Group) %>% ImputeFeatureIntensity(), plotname = "GroupedData")
UMAPSIDSGroups$UMAPPlot3D
## Differential Expression Analysis
Test <- CorrectedDataWithGroups %>% mutate(Status = Group) %>% KruskalTest()
Test$Heatmap
## Combine SIDS and Control Data
SIDSGroupAndControlData <- rbind(CorrectedDataWithGroups %>%
mutate(Status = Group) %>%
select(- "Group"), ControlData)
MuliwayComparisonSIDSandControl <- KruskalTest(SIDSGroupAndControlData)
UMAPSIDSSIDSGroupsAndControls <- UMAP(SIDSGroupAndControlData %>% ImputeFeatureIntensity())
MuliwayComparisonSIDSandControl$Heatmap
UMAPSIDSSIDSGroupsAndControls$UMAPPlot3D
ControlOnlyHeatMap <- HeatMap(ControlData, PoIs = unique(ControlData$Protein) ,plotname = "ControlOnlyHeatMap", show_row_names = F)
ControlOnlyHeatMap
## Get Dendrogram
ControlOnlyDendrogram <- ComplexHeatmap::column_dend(ControlOnlyHeatMap)
## Cut the Dendrogram into 3 groups
ControlGroups <- cutree(ControlOnlyDendrogram, k = 8) %>% data.frame() %>%
rownames_to_column(var = "Sample")
## Add the Samples to the group information
ControlDataWithGroups <- merge(ControlData, ControlGroups, by = "Sample")
colnames(ControlDataWithGroups)[ncol(ControlDataWithGroups)] <- c("Group")
## Renaming the Groups to "Control1" "Control2" etc
ControlDataWithGroups$Group <- paste0("Control", ControlDataWithGroups$Group)
ControlOnlyHeatMapWithGroups <- HeatMap(ControlDataWithGroups %>% mutate(Status = Group), PoIs = unique(ControlDataWithGroups$Protein), plotname = "ControlGroupedHeatMap", show_row_names = F, method = "supervised", show_column_names = FALSE)
ControlOnlyHeatMapWithGroups
ControlDataWithGroups <- ControlDataWithGroups %>%
## filter out groups 3, 6, 7 and 8
filter(Group %in% c("Control1", "Control2", "Control4", "Control5")) %>%
## combine Control5 and Control3 and call it Control3
mutate(Group = ifelse(Group %in% c("Control2","Control5"), "Control2", Group)) %>%
## Call control4 control3
mutate(Group = ifelse(Group %in% c("Control4"), "Control3", Group))
HeatMap(ControlDataWithGroups %>% mutate(Status = Group), PoIs = unique(ControlDataWithGroups$Protein), plotname = "ControlGroupedHeatMap", show_row_names = F, method = "supervised", show_column_names = FALSE)
## prepare data
SIDSandControlDataWithGroups <- rbind(CorrectedDataWithGroups, ControlDataWithGroups)
CorrelationData <- SIDSandControlDataWithGroups %>%
## calculate mean expression values per group
group_by(Protein, Group) %>%
summarise(Intensity = mean(Intensity, na.rm = T)) %>%
## pivot wider
pivot_wider(names_from = Protein, values_from = Intensity) %>%
column_to_rownames("Group") %>%
t()
## calculate correlation
CorrelationMatrix <- cor(CorrelationData, method = "pearson", use = "pairwise.complete.obs")
## plot results and use color gradient
ComplexHeatmap::Heatmap(CorrelationMatrix, name = "Correlation")
## calculating pairwise comparison
ControlGroups <- c("Control2", "Control3", "Control1")
SIDSgroups <- c("SIDS3", "SIDS1", "SIDS2")
Results <- list()
for(i in 1: length(ControlGroups)){
Control = ControlGroups[i]
SIDS = SIDSgroups[i]
## filter data for comparison
Data <- rbind(SIDSandControlDataWithGroups %>%
filter(Group == Control),
SIDSandControlDataWithGroups %>%
filter(Group == SIDS))
Results[[paste0(Control," vs ",SIDS)]] <- WTest(Data, plotname = paste0(Control,"_",SIDS))
}
Results$`Control2 vs SIDS3`$Vulcanoplot
Results$`Control3 vs SIDS1`$Vulcanoplot
Results$`Control1 vs SIDS2`$Vulcanoplot
## regress out group effect
AllData <- rbind(SIDSandControlDataWithGroups)
NoGroupEffectData <- AllData %>%
group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Group)) + mean(Intensity, na.rm = T)) %>%
ungroup()
TwoWayComparisonSIDSVSControlNoGroupEffect <- BiomarkR::KruskalTest(NoGroupEffectData %>% mutate(Status = Group), plotname = "SIDS vs Control No Group Effect")
UMAPNoGroupEffectData <- UMAP(NoGroupEffectData %>% ImputeFeatureIntensity()%>% mutate(Status = Group))
UMAPNoGroupEffectData$UMAPPlot3D
## Correlation between the groups
CorrelationData <- NoGroupEffectData %>%
## calculate mean expressin values per group
group_by(Protein, Group) %>%
## get mean expression per group
summarise(Intensity = mean(Intensity, na.rm = T)) %>%
## preparea data for correlation analysis
pivot_wider(names_from = Protein, values_from = Intensity) %>%
column_to_rownames("Group") %>%
t()
CorrelationMatrix <- cor(CorrelationData, method = "pearson", use = "pairwise.complete.obs")
ComplexHeatmap::Heatmap(CorrelationMatrix, name = "Correlation")
## provide bin data
HistData <- DataClin %>% filter(GestationalAge != -9) %>%
mutate(GestationalAge = as.numeric(GestationalAge)) %>%
mutate(GestationalAge = round(GestationalAge, 0)) %>%
filter(Status %in% c("SIDS", "Healthy Control")) %>%
group_by(GestationalAge) %>%
summarise(count = n())
HistData %>% knitr::kable(caption = "Distribution of Gestational Ages")
## plot HistData
HistData %>%
ggplot(aes(x = GestationalAge, y = count)) +
geom_col(stat = "identity") +
ggtitle("Distribution of the Gestational Age") +
theme_minimal()
## make nice table with the binning information
knitr::kable(tibble(
"Gestational Age" = c("28 to 32 weeks", "33 to 36 weeks", "37 to 39 weeks", "39 to 41 weeks", "above 40 weeks"),
"Group" = c("extreme-pre-term", "pre-term", "early-term", "full-term", "late-term")
))
## Correct Batch effect
CorrectedData <-
## Long form dataframe here
DataCombined %>%
## perform NA Cutoff
## (not strictly necessary, but we need a certain number of datapoints per Protein for the linear regression)
NaCutoff(70) %>% ## 70 for usual results
## filter out rows with NA in intensity
filter(!is.na(Intensity)) %>%
## group by protein
group_by(Protein) %>%
## correct for gestational age and Plate
mutate(Intensity = residuals(lm(Intensity ~ Plate))) %>%
## (optional) add mean back to the Intensity to get data back to original scale
mutate(Intensity = Intensity + mean(Intensity, na.rm = T)) %>%
## Ungroup
ungroup()
## binning gestational age
AgeData <- CorrectedData %>%
filter(Status %in% c("SIDS", "Healthy Control", "Demise Control")) %>%
## combine controls and call them control
mutate(Status = ifelse(Status %in% c("Healthy Control", "Demise Control"), "Control", Status)) %>%
mutate(GestationalAge = case_when(
GestationalAge <= 31 ~ "extreme-pre-term",
GestationalAge > 31 & GestationalAge < 37 ~ "pre-term",
GestationalAge >= 37 & GestationalAge < 39 ~ "early-term",
GestationalAge >= 39 & GestationalAge < 41 ~ "full-term",
GestationalAge >= 41 ~ "late-term"
))
## Make GestationalAge a factor and get it into the right order
AgeData$GestationalAge <- factor(AgeData$GestationalAge, levels = c("extreme-pre-term", "pre-term", "early-term", "full-term", "late-term"))
## plot AgeData
AgeData %>% pivot_wider(names_from = Protein, values_from = Intensity) %>%
## plot distributions of gestational age
group_by(GestationalAge, Status) %>%
summarise(n = n()) %>%
ggplot(aes(x = GestationalAge, y = n, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
ggtitle("Distribution of the Gestational Age groups") +
xlab("Gestational Age Group") + ylab("Number of Samples")
## count cases and controls in each gestational age group
Breakdown <- AgeData %>% pivot_wider(names_from = Protein, values_from = Intensity) %>%
## count cases and controls in each gestational age group
group_by(GestationalAge, Status) %>%
summarise(Count = n()) %>%
## make nice table
knitr::kable()
Breakdown
##
WtestResultsEarlyTerm <- AgeData %>%
filter(GestationalAge %in% c("early-term", "pre-term","extreme-pre-term")) %>%
WTest(plotname = "Premature SIDS vs Control")
WtestResultsFullTerm <- AgeData %>%
filter(GestationalAge == "full-term") %>%
WTest(plotname = "Full Term SIDS vs Control")
WtestResultsEarlyTerm$Vulcanoplot
WtestResultsFullTerm$Vulcanoplot
## comparison between premature and mature sIDS
WtestResultsPrematureVsMatureSIDS <- AgeData %>% filter(Status == "SIDS") %>% mutate(GestationalAge = ifelse(GestationalAge %in% c("early-term", "pre-term","extreme-pre-term"), "premature", "mature")) %>% mutate(Status = GestationalAge) %>% WTest(plotname = "Premature vs mature SIDS")
WtestResultsPrematureVsMatureSIDS$Vulcanoplot
AgeData %>% filter(Protein %in% c("P00915_CA1", "P00918_CA2", "P07451_CA3")) %>% normalizeIntensityOnFeature() %>%
ggplot(aes(x = GestationalAge, y = Intensity, fill = GestationalAge)) +
## wrap panel to protein
facet_wrap(~Protein) +
geom_boxplot() +
ggtitle("Expression of Carbonic anhydrases in premature and mature SIDS and Controls") + theme_minimal() +
## draw borders around panels
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
## rotate x-axis label by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## plot AgeData
AgeData %>% pivot_wider(names_from = Protein, values_from = Intensity) %>%
## plot distributions of gestational age
group_by(GestationalAge, Status) %>%
summarise(n = n()) %>%
ggplot(aes(x = GestationalAge, y = n, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
ggtitle("Distribution of the Gestational Age groups") +
xlab("Gestational Age Group") + ylab("Number of Samples")
## Loop through the Gestational ages and perform Analysis
## create folders for the Output to be saved
setwd(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Biomarker)")
dir.create("SIDS_VS_Control_in_gestationalAges", showWarnings = F)
setwd("SIDS_VS_Control_in_gestationalAges")
## Create output list
WTestResultList <- list()
## define Gestational age groups
GestAges <- unique(as.character(AgeData$GestationalAge))
for (i in 1:length(GestAges)) {
GestAge <- GestAges[i]
WTestData <- AgeData %>%
dplyr::filter(GestationalAge == GestAge) %>%
arrange(Status)
WTestResults <- BiomarkR::WTest(dataset = WTestData, plotname = paste0("SIDS vs Control ", GestAge), p.adj.method = "none")
Vulcanoplot <- WTestResults$Vulcanoplot
Heatmap <- BiomarkR::HeatMap(WTestData, PoIs = WTestResults$Significant$Protein, plotname = paste0("Heatmap_ ", GestAge), show_row_names = T, fontsize = 6)
Results <- WTestResults$Significant
AUCs <- BiomarkR::AUCs(WTestData, PoIs = WTestResults$Significant$Protein)
PCA <- BiomarkR::PCA(WTestData %>% filter(Protein %in% Results$Protein) %>%
BiomarkR::ImputeFeatureIntensity(), plotname = paste("PCA", GestAge))
## Optional STring of Up and down regulated Proteins
# UpProt <- Results %>% filter(estimate > 0) %>% pull(Protein)
# DownProt <- Results %>% filter(estimate < 0) %>% pull(Protein)
# StringResultsUp <- STRING(UpProt, STRINGBackground = unique(AgeData$Protein), plotname = paste("STRING Up", GestAge))
#  StringResultsDown <- STRING(DownProt, STRINGBackground = unique(AgeData$Protein), plotname = paste("STRING Down", GestAge))
# StringResultsCombined <- STRING(unique(Results$Protein), STRINGBackground = unique(AgeData$Protein), plotname = paste("STRING Combined", GestAge))
## store results in Output list
WTestResultList[[GestAge]] <- list(Vulcanoplot = Vulcanoplot,
Heatmap = Heatmap,
Results = Results,
AUCs = AUCs,
# StringResultsUp = StringResultsUp,
# StringResultsDown = StringResultsDown,
# StringResultsCombined=StringResultsCombined,
PCA = PCA)
## save Results
### write.csv(Results, file = paste0("Results ", GestAge, ".csv"))
## save VulconaPlot as png
### ggsave(paste0("Vulcanoplot ", GestAge, ".png"), plot = Vulcanoplot)
## Save HeatMap as png
### png(paste0("heatmap_plot", GestAge,".png"), width = 800, height = 600, res = 150) # Adjust resolution as needed
### draw(Heatmap)
###dev.off()
## Save PCA$ScorePlot2D as png
### plot <- PCA$ScorePlot_12 +
## make points bigger
### geom_point(size = 5) +
## make font bigger
### theme(text = element_text(size = 20))
### ggsave(paste0("PCA ", GestAge, ".png"), plot = plot)
## Save AUCs
### write.csv(AUCs$results %>% data.frame(), file= paste0("AUCs", GestAge, ".csv"))
}
## get number of "significant" proteins in each gestational age
WTestResultList %>%
map("Results") %>%
map("Protein") %>%
map_dbl(length) %>%
## rearrange chronologically
.[c(3,2,4,1)] %>%
## make nice table
knitr::kable(caption = "Number of significant Protins in each gestational age group", col.names = c("Gestational Age Group", "N"))
## plot Heat maps in each gestational age group
WTestResultList %>%
map("Heatmap")
PCAs <- WTestResultList %>%
map("PCA") %>% map("ScorePlot_12")
PCAs
PoIs1 <- WTestResultList$`extreme-pre-term`$Results$Protein
PoIs2 <- WTestResultList$`full-term`$Results$Protein
ExPretermData <- AgeData %>% filter(GestationalAge == "extreme-pre-term") %>%
## Call SIDS cases "Extreme-pre-term-SIDS"
mutate(Status = ifelse(Status == "SIDS", "Extreme-pre-term-SIDS", "Extreme-pre-term-Control"))
FullTermData <- AgeData %>% filter(GestationalAge == "full-term") %>%
## call SIDS cases "pre-term-SIDS"
mutate(Status = ifelse(Status == "SIDS", "Full-term-SIDS", "Full-term-Control"))
PCADAta <- rbind(ExPretermData, FullTermData) %>% filter(Protein %in% c(PoIs1, PoIs2)) %>% ImputeFeatureIntensity()
PCA <- PCA(PCADAta)
PCA$ScorePlot2D
## compare AUCs of significant proteins in different gestational age groups
AUCsList <- WTestResultList %>%
map("AUCs") %>%
map("results")
## make Data frame
AUCs <- do.call(rbind, AUCsList) %>%
rownames_to_column(var = "GestationalAge") %>%
mutate(GestationalAge = str_split_i(GestationalAge,"\\.",1))
## plot AUCs
AUCs %>%
ggplot(aes(x = Protein, y = AUC, colour = GestationalAge)) +
geom_point() +
theme_minimal() +
## angle x axis text by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## delete x axis text
theme(axis.text.x = element_blank()) +
ggtitle("AUCs of significant proteins in different gestational age groups")
## Check if proteins occur more than once in the significant results
Proteins <- WTestResultList %>%
map("Results") %>%
map("Protein")
# Create an UpSet plot
UpSetPlot <- UpSetR::upset(UpSetR::fromList(Proteins),
order.by = "freq",
main.bar.color = "steelblue",
sets.bar.color = "gold",
text.scale = 1.5)
UpSetPlot
## get intersection of significant porteins
Proteins <- WTestResultList %>%
map("Results") %>%
map("Protein")
View(Proteins)
## get intersection of significant proteins
ProteinsIntersection <- Reduce(intersect, Proteins)
GestAges[1]
late-termprote <- Proteins[GestAges[1]]
late-termprote <- Proteins[[GestAges[1]]]
?reduce
## get intersection of significant proteins
ProteinsIntersection <- Reduce(intersect, Proteins)
ProteinsIntersection
## loop throuth all combinations of GestAges
?ncomp()
## create combinataions of gestages
Combinations <- combn(names(GestAge), 5, simplify = F)
## create combinataions of gestages
Combinations <- combn(names(GestAge), 4, simplify = F)
## create combinataions of gestages
Combinations <- combn(names(GestAge), 2, simplify = F)
## create combinataions of gestages
Combinations <- combn(GestAges)
## create combinataions of gestages
Combinations <- combn(GestAgesn m = 2)
## create combinataions of gestages
Combinations <- combn(GestAgesn, m = 2)
## create combinataions of gestages
Combinations <- combn(GestAges, m = 2)
View(Combinations)
## create combinataions of gestages
Combinations <- combn(GestAges, m = 5)
View(Combinations)
## create combinataions of gestages
Combinations <- combn(GestAges, m = 1)
View(Combinations)
## create combinataions of gestages
Combinations <- combn(GestAges, m = 3)
View(Combinations)
## create combinataions of gestages
Combinations <- combn(GestAges, m = 4)
View(Combinations)
## create combinataions of gestages
Combinations <- combn(GestAges, m = 4, simplify = F)
View(Combinations)
?combn
## create combinataions of gestages
Combinations <- combn(GestAges, m = 2, simplify = F)
## create combinataions of gestages
Combinations <- combn(GestAges, m = 2, simplify = F)
## create combinataions of gestages
Combinations <- combn(GestAges, m = 2, simplify = F)
## create combinataions of gestages
Combinations <- combn(GestAges, m = 2, simplify = T)
## create combinataions of gestages
Combinations2 <- combn(GestAges, m = 2, simplify = T)
Combinations3 <- combn(GestAges, m = 3, simplify = T)
View(Combinations3)
## go through combinations and get incersecting proteins
IntersectingProteins2 <- list()
for(i in 1:ncol(Combinations2)){
## get intersection of proteins
IntersectingProteins2[[i]] <- Reduce(intersect, Proteins[Combinations2[,i]])
}
IntersectingProteins2
## go through combinations and get incersecting proteins
IntersectingProteins2 <- list()
for(i in 1:ncol(Combinations2)){
## get intersection of proteins
IntersectingProteins2[[i]] <- Reduce(intersect, Proteins[Combinations2[,i]])
Group1 <- Combinations2[1,i]
Group2 <- Combinations2[2,i]
}
IntersectingProteins2
Group1 <- Combinations2[1,i]
Group2 <- Combinations2[2,i]
title <- paste0("Intersect",Group1,"_",Group2)
title <- paste0("Intersect",Group1,"__",Group2)
title <- paste0("Intersect__",Group1,"__",Group2)
## go through combinations and get incersecting proteins
IntersectingProteins2 <- list()
for(i in 1:ncol(Combinations2)){
Group1 <- Combinations2[1,i]
Group2 <- Combinations2[2,i]
title <- paste0("Intersect__",Group1,"__",Group2)
## get intersection of proteins
IntersectingProteins2[[title]] <- Reduce(intersect, Proteins[Combinations2[,i]])
}
IntersectingProteins2
for(i in 1:ncol(Combinations3)){
Group1 <- Combinations3[1,i]
Group2 <- Combinations3[2,i]
Group3 <- Combinations3[3,i]
title <- paste0("Intersect__",Group1,"__",Group2,"__",Group3)
## get intersection of proteins
IntersectingProteins3[[title]] <- Reduce(intersect, Proteins[Combinations3[,i]])
}
IntersectingProteins3 <- list()
for(i in 1:ncol(Combinations3)){
Group1 <- Combinations3[1,i]
Group2 <- Combinations3[2,i]
Group3 <- Combinations3[3,i]
title <- paste0("Intersect__",Group1,"__",Group2,"__",Group3)
## get intersection of proteins
IntersectingProteins3[[title]] <- Reduce(intersect, Proteins[Combinations3[,i]])
}
IntersectingProteins3
## select nonly non empty entries
IntersectingProteins2 <- IntersectingProteins2[sapply(IntersectingProteins2, length) > 0]
IntersectingProteins3 <- IntersectingProteins3[sapply(IntersectingProteins3, length) > 0]
IntersectingProteins2
IntersectingProteins3
## combine the lists
IntersectingProteins <- c(IntersectingProteins2, IntersectingProteins3)
## make nice table
IntersectingProteins %>%
map_dbl(length) %>%
## make nice table
knitr::kable(caption = "Number of proteins that are significant in multiple gestational age groups", col.names = c("Gestational Age Group", "N"))
## make nice table
IntersectingProteins %>%
## make nice table
knitr::kable(caption = "Number of proteins that are significant in multiple gestational age groups", col.names = c("Gestational Age Group", "N"))
?map_dbl
## make nice table
IntersectingProteins %>% data.frame()
## make nice table
IntersectingProteins %>% unlist()
View(IntersectingProteins)
## make dataframe containing the groups and the proteins
IntersectingProteinsDF <- data.frame(Group = names(IntersectingProteins), Proteins = unlist(IntersectingProteins))
## make dataframe containing the groups and the proteins
IntersectingProteinsDF <- data.frame(Group = names(IntersectingProteins), Proteins = unlist(IntersectingProteins))
## make dataframe containing the groups and the proteins
IntersectingProteinsDF <- data.frame(
Group = rep(names(IntersectingProteins), lengths(IntersectingProteins)),
Proteins = unlist(IntersectingProteins)
)
IntersectingProteinsDF
## make dataframe containing the groups and the proteins
IntersectingProteinsDF <- data.frame(
Group = rep(names(IntersectingProteins), lengths(IntersectingProteins)),
Proteins = unlist(IntersectingProteins)
) %>% knittr::kable()
?kable
## make dataframe containing the groups and the proteins
IntersectingProteinsDF <- data.frame(
Group = rep(names(IntersectingProteins), lengths(IntersectingProteins)),
Proteins = unlist(IntersectingProteins)
) %>% knitr::kable()
IntersectingProteinsDF
## make dataframe containing the groups and the proteins
IntersectingProteinsDF <- data.frame(
Group = rep(names(IntersectingProteins), lengths(IntersectingProteins)),
Proteins = unlist(IntersectingProteins)
)
View(IntersectingProteinsDF)
## make dataframe containing the groups and the proteins
IntersectingProteinsDF <- data.frame(
Group = rep(names(IntersectingProteins), lengths(IntersectingProteins)),
Proteins = unlist(IntersectingProteins)
) %>% pivot_wider(names_from = Group, values_from = Proteins)
View(IntersectingProteinsDF)
## make dataframe containing the groups and the proteins
IntersectingProteinsDF <- data.frame(
Group = rep(names(IntersectingProteins), lengths(IntersectingProteins)),
Proteins = unlist(IntersectingProteins)
)
View(IntersectingProteinsDF)
IntersectingProteinsDF %>% pivot_wider(names_from = Group, values_from = Proteins) %>% knitr::kable()
IntersectingProteinsDF %>% pivot_wider(names_from = Protein, values_from = Group) %>% knitr::kable()
IntersectingProteinsDF %>% pivot_wider(names_from = Proteins, values_from = Group) %>% knitr::kable()
IntersectingProteinsDF %>% pivot_wider(names_from = Group, values_from = Proteins) %>% knitr::kable()
IntersectingProteinsDF %>% pivot_wider(names_from = Group, values_from = Proteins)
X <- IntersectingProteinsDF %>% pivot_wider(names_from = Group, values_from = Proteins)
View(X)
## make dataframe containing the groups and the proteins
IntersectingProteinsDF <- data.frame(
Group = rep(names(IntersectingProteins), lengths(IntersectingProteins)),
Proteins = unlist(IntersectingProteins)
)
View(IntersectingProteinsDF)
View(X)
X <- IntersectingProteinsDF %>% t()
View(X)
View(IntersectingProteinsDF)
CollapsedTable <- IntersectingProteinsDF %>%
group_by(Group) %>%
summarise(Proteins = paste(Proteins, collapse = ", "))
View(CollapsedTable)
CollapsedTable %>% knitr::kable()
CollapsedTable %>% knitr::kable()
