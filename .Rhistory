}
if("Peptide" %in% colnames(dataset)){
CorrelationData <- dataset  %>%
tidyr::pivot_wider(names_from = Peptide, values_from = Intensity) %>%
dplyr::select(!dplyr::contains("_")) %>%
dplyr::filter(Sample %in% dataset$Sample) %>%
cbind(PCs)
}
## Replace " " with "." in colnames(dataset)
colnames(CorrelationData) <- gsub(" ", ".", colnames(CorrelationData))
## make all columns numeric
for(i in 1 : ncol(CorrelationData)){
if(!is.numeric(CorrelationData[[i]])){
## make factor
CorrelationData[[i]] <- as.numeric(factor(CorrelationData[[i]]))
}
}
## calculate correlations between PCs and clinical variables
CorResults <- CorrelationData %>%
ungroup() %>%
dplyr::select(-Sample) %>%
rstatix::cor_test(vars = dplyr::contains("PC"), vars2 = !dplyr::contains("PC")) %>%
dplyr::mutate(var1 = ifelse(var1 == "PC1", paste("PC1 (", round(ExplainedVariances[1], digits = 2)*100, " %)", sep = ""), var1),
var1 = ifelse(var1 == "PC2", paste("PC2 (", round(ExplainedVariances[2], digits = 2)*100, " %)", sep = ""), var1),
var1 = ifelse(var1 == "PC3", paste("PC3 (", round(ExplainedVariances[3], digits = 2)*100, " %)", sep = ""), var1)) %>%
rstatix::adjust_pvalue()
## plot results
EffectPlot <- ggplot2::ggplot(CorResults) +
ggplot2::geom_tile(ggplot2::aes(x = var1, y = var2, fill = cor)) +
## use color gradient
ggplot2::scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
limits = c(-1, 1)) +
## highlight cells with significant p-values
ggplot2::geom_text(ggplot2::aes(x = var1, y = var2, label = ifelse(p.adj < 0.05, "*", "")), size = 10) +
## add second star if p.adj < 0.01
ggplot2::geom_text(ggplot2::aes(x = var1, y = var2, label = ifelse(p.adj < 0.01, "  *", "")), size = 10) +
## add grid of cells
ggplot2::geom_vline(xintercept = seq(0.5, nrow(CorResults) + 0.5, 1), color = "white") +
ggplot2::geom_hline(yintercept = seq(0.5, nrow(CorResults) + 0.5, 1), color = "white") +
## rename axis
ggplot2::xlab("PCs") +
ggplot2::ylab("Variables") +
ggplot2::ggtitle("Correlation between principal components and metadata", "\n *p.adj < 0.05 | **p.adj < 0.01") +
ggplot2::theme_minimal()
## Calculate correlations between clinical variables
CorrResultsClin <- CorrelationData %>%
ungroup() %>%
dplyr::select(-Sample) %>%
rstatix::cor_test(vars = !dplyr::contains("PC"), vars2 = !dplyr::contains("PC")) %>%
rstatix::adjust_pvalue(method = "BH") %>%
## Filter out NA correlations
dplyr::filter(!is.na(cor))
## make matrix of correlations
CorrMatrix <- CorrResultsClin %>%
dplyr::select(var1, var2, cor) %>%
tidyr::pivot_wider(names_from = var2, values_from = cor) %>%
tibble::column_to_rownames("var1") %>%
as.matrix()
## plot CorrMatrix using complexheatmapl
CorrMatrixPlot <- ComplexHeatmap::Heatmap(CorrMatrix, name = "correlation", column_title = "Correlation between clinical variables")
output <- list(CorResults, EffectPlot = EffectPlot, PCA = PCA, EffectCorrelationsPlot = CorrMatrixPlot, CorrResultsClin = CorrResultsClin)
return(output)
}
PCA <- PCA(dataset)
## extract first 3 PCs
PCs <- PCA$PCA@scores[,1:3] %>% data.frame
## Extract explained variances
ExplainedVariances <- PCA$PCA@R2
##
if ("Protein" %in% colnames(dataset)) {
CorrelationData <- dataset  %>%
tidyr::pivot_wider(names_from = Protein, values_from = Intensity) %>%
dplyr::select(!dplyr::contains("_")) %>%
dplyr::filter(Sample %in% dataset$Sample) %>%
cbind(PCs)
}
if("Peptide" %in% colnames(dataset)){
CorrelationData <- dataset  %>%
tidyr::pivot_wider(names_from = Peptide, values_from = Intensity) %>%
dplyr::select(!dplyr::contains("_")) %>%
dplyr::filter(Sample %in% dataset$Sample) %>%
cbind(PCs)
}
## Replace " " with "." in colnames(dataset)
colnames(CorrelationData) <- gsub(" ", ".", colnames(CorrelationData))
## make all columns numeric
for(i in 1 : ncol(CorrelationData)){
if(!is.numeric(CorrelationData[[i]])){
## make factor
CorrelationData[[i]] <- as.numeric(factor(CorrelationData[[i]]))
}
}
View(CorrelationData)
## Replace " " with "." in colnames(dataset)
colnames(CorrelationData) <- gsub(" ", ".", colnames(CorrelationData))
## make all columns numeric
for(i in 1 : ncol(CorrelationData)){
if(!is.numeric(CorrelationData[[i]])){
## get unique Entries of the column
uniqueEntries <- unique(CorrelationData[[i]])
## make factor
CorrelationData[[i]] <- as.numeric(factor(CorrelationData[[i]], levels = uniqueEntries))
}
}
PCA <- PCA(dataset)
## extract first 3 PCs
PCs <- PCA$PCA@scores[,1:3] %>% data.frame
## Extract explained variances
ExplainedVariances <- PCA$PCA@R2
##
if ("Protein" %in% colnames(dataset)) {
CorrelationData <- dataset  %>%
tidyr::pivot_wider(names_from = Protein, values_from = Intensity) %>%
dplyr::select(!dplyr::contains("_")) %>%
dplyr::filter(Sample %in% dataset$Sample) %>%
cbind(PCs)
}
if("Peptide" %in% colnames(dataset)){
CorrelationData <- dataset  %>%
tidyr::pivot_wider(names_from = Peptide, values_from = Intensity) %>%
dplyr::select(!dplyr::contains("_")) %>%
dplyr::filter(Sample %in% dataset$Sample) %>%
cbind(PCs)
}
## Replace " " with "." in colnames(dataset)
colnames(CorrelationData) <- gsub(" ", ".", colnames(CorrelationData))
## make all columns numeric
for(i in 1 : ncol(CorrelationData)){
if(!is.numeric(CorrelationData[[i]])){
## get unique Entries of the column
uniqueEntries <- unique(CorrelationData[[i]])
## make factor
CorrelationData[[i]] <- as.numeric(factor(CorrelationData[[i]], levels = uniqueEntries))
}
}
View(CorrectedData)
## Replace " " with "." in colnames(dataset)
colnames(CorrelationData) <- gsub(" ", ".", colnames(CorrelationData))
## make all columns numeric
for(i in 1 : ncol(CorrelationData)){
if(!is.numeric(CorrelationData[[i]])){
## get unique Entries of the column
uniqueEntries <- unique(CorrelationData[[i]])
## make factor
CorrelationData[[i]] <- as.numeric(factor(CorrelationData[[i]], levels = uniqueEntries))
}
}
View(CorrelationData)
## EffectAnalysis
## Correlates clinical Variables with principal components to visualize the main effects in the Dataset
## add roxygen comments
#' @title EffectAnalysis
#' @description Calculates the correlation of clinical variables with principal components.
#' @param dataset The dataset to be tested
#' @return A list object containing the results of the effect analysis
#' @export
EffectAnalysis <- function(dataset){
PCA <- PCA(dataset)
## extract first 3 PCs
PCs <- PCA$PCA@scores[,1:3] %>% data.frame
## Extract explained variances
ExplainedVariances <- PCA$PCA@R2
##
if ("Protein" %in% colnames(dataset)) {
CorrelationData <- dataset  %>%
tidyr::pivot_wider(names_from = Protein, values_from = Intensity) %>%
dplyr::select(!dplyr::contains("_")) %>%
dplyr::filter(Sample %in% dataset$Sample) %>%
cbind(PCs)
}
if("Peptide" %in% colnames(dataset)){
CorrelationData <- dataset  %>%
tidyr::pivot_wider(names_from = Peptide, values_from = Intensity) %>%
dplyr::select(!dplyr::contains("_")) %>%
dplyr::filter(Sample %in% dataset$Sample) %>%
cbind(PCs)
}
## Replace " " with "." in colnames(dataset)
colnames(CorrelationData) <- gsub(" ", ".", colnames(CorrelationData))
## make all columns numeric
for(i in 1 : ncol(CorrelationData)){
if(!is.numeric(CorrelationData[[i]])){
## get unique Entries of the column
uniqueEntries <- unique(CorrelationData[[i]])
## make factor
CorrelationData[[i]] <- as.numeric(factor(CorrelationData[[i]], levels = uniqueEntries))
}
}
## calculate correlations between PCs and clinical variables
CorResults <- CorrelationData %>%
ungroup() %>%
dplyr::select(-Sample) %>%
rstatix::cor_test(vars = dplyr::contains("PC"), vars2 = !dplyr::contains("PC")) %>%
dplyr::mutate(var1 = ifelse(var1 == "PC1", paste("PC1 (", round(ExplainedVariances[1], digits = 2)*100, " %)", sep = ""), var1),
var1 = ifelse(var1 == "PC2", paste("PC2 (", round(ExplainedVariances[2], digits = 2)*100, " %)", sep = ""), var1),
var1 = ifelse(var1 == "PC3", paste("PC3 (", round(ExplainedVariances[3], digits = 2)*100, " %)", sep = ""), var1)) %>%
rstatix::adjust_pvalue()
## plot results
EffectPlot <- ggplot2::ggplot(CorResults) +
ggplot2::geom_tile(ggplot2::aes(x = var1, y = var2, fill = cor)) +
## use color gradient
ggplot2::scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
limits = c(-1, 1)) +
## highlight cells with significant p-values
ggplot2::geom_text(ggplot2::aes(x = var1, y = var2, label = ifelse(p.adj < 0.05, "*", "")), size = 10) +
## add second star if p.adj < 0.01
ggplot2::geom_text(ggplot2::aes(x = var1, y = var2, label = ifelse(p.adj < 0.01, "  *", "")), size = 10) +
## add grid of cells
ggplot2::geom_vline(xintercept = seq(0.5, nrow(CorResults) + 0.5, 1), color = "white") +
ggplot2::geom_hline(yintercept = seq(0.5, nrow(CorResults) + 0.5, 1), color = "white") +
## rename axis
ggplot2::xlab("PCs") +
ggplot2::ylab("Variables") +
ggplot2::ggtitle("Correlation between principal components and metadata", "\n *p.adj < 0.05 | **p.adj < 0.01") +
ggplot2::theme_minimal()
## Calculate correlations between clinical variables
CorrResultsClin <- CorrelationData %>%
ungroup() %>%
dplyr::select(-Sample) %>%
rstatix::cor_test(vars = !dplyr::contains("PC"), vars2 = !dplyr::contains("PC")) %>%
rstatix::adjust_pvalue(method = "BH") %>%
## Filter out NA correlations
dplyr::filter(!is.na(cor))
## make matrix of correlations
CorrMatrix <- CorrResultsClin %>%
dplyr::select(var1, var2, cor) %>%
tidyr::pivot_wider(names_from = var2, values_from = cor) %>%
tibble::column_to_rownames("var1") %>%
as.matrix()
## plot CorrMatrix using complexheatmapl
CorrMatrixPlot <- ComplexHeatmap::Heatmap(CorrMatrix, name = "correlation", column_title = "Correlation between clinical variables")
output <- list(CorResults, EffectPlot = EffectPlot, PCA = PCA, EffectCorrelationsPlot = CorrMatrixPlot, CorrResultsClin = CorrResultsClin)
return(output)
}
## combine with clinical Data
DataQuant <- DataQuant %>% NaCutoff(70)
DataCombined <- merge(DataQuant, DataClinRaw, by = "Sample")
PrimaryEffects <- EffectAnalysis(DataCombined)
PrimaryEffects$EffectPlot
PrimaryEffects$EffectPlot
PrimaryEffects$EffectCorrelationsPlot
PCA(CorrectedData %>% mutate(Status = Shipped.From))
PCA(CorrectedData %>% mutate(Status = Shipped.From))$ScorePlot2D
## combine with clinical Data
DataQuant <- DataQuant %>% NaCutoff(70)
DataCombined <- merge(DataQuant, DataClinRaw, by = "Sample")
PrimaryEffects <- EffectAnalysis(DataCombined)
PrimaryEffects$EffectPlot
## Correct Data for plate, age and sex
CorrectedData <- DataCombined %>% NaCutoff(70) %>%
filter(!is.na(Intensity)) %>%
dplyr::group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Plate + Shipped.From )))
## Correct Data for plate, age and sex
CorrectedData <- DataCombined %>% NaCutoff(70) %>%
filter(!is.na(Intensity)) %>%
dplyr::group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Shipped.From )))
View(DataCombined)
## Correct Data for plate, age and sex
CorrectedData <- DataCombined %>% NaCutoff(70) %>%
filter(!is.na(Intensity)) %>%
mutata(Shipped.From = ifelse(Shipped.From == NA), "NA", Shipped.From)
## Correct Data for plate, age and sex
CorrectedData <- DataCombined %>% NaCutoff(70) %>%
filter(!is.na(Intensity)) %>%
mutate(Shipped.From = ifelse(Shipped.From == NA), "NA", Shipped.From) %>%
dplyr::group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Shipped.From )))
## Correct Data for plate, age and sex
CorrectedData <- DataCombined %>% NaCutoff(70) %>%
filter(!is.na(Intensity)) %>%
mutate(Shipped.From = ifelse(Shipped.From == NA), "NA", Shipped.From)
View(CorrectedData)
## Correct Data for plate, age and sex
CorrectedData <- DataCombined %>% NaCutoff(70) %>%
filter(!is.na(Intensity)) %>%
mutate(Shipped.From = ifelse(Shipped.From == NA), NA_character_, Shipped.From)
View(CorrectedData)
## Correct Data for plate, age and sex
CorrectedData <- DataCombined %>% NaCutoff(70) %>%
filter(!is.na(Intensity)) %>%
filter(!is.na(Shipped.From)) %>%
dplyr::group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Shipped.From )))
EffectAnalysis(CorrectedData)$EffectPlot
View(DataCombined)
View(DataClinRaw)
## Correct Data for plate, age and sex
CorrectedData <- DataCombined %>% NaCutoff(70) %>%
filter(!is.na(Intensity)) %>%
dplyr::group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Shipped.From )))
## Correct Data for plate, age and sex
CorrectedData <- DataCombined %>% NaCutoff(70) %>%
filter(!is.na(Intensity)) %>%
dplyr::group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Plate)))
EffectAnalysis(CorrectedData)$EffectPlot
PCA(DataCombined %>% mutate(Status = Shipped.From))
## combine with clinical Data
DataQuant <- DataQuant %>% NaCutoff(70)
DataCombined <- merge(DataQuant, DataClinRaw, by = "Sample")
PrimaryEffects <- EffectAnalysis(DataCombined)
PrimaryEffects$EffectPlot
PrimaryEffects$EffectPlot
## include Image
knitr::include_graphics(filepath)
filepath <- r"(G:\Shared drives\Path-Steen-OliverSchott\HSP_Plasma\PCA_by_Shipped_from.png)"
## include Image
knitr::include_graphics(filepath)
PCA(DataCombined)
PCA(DataCombined)$ScorePlot2D
## exclude code from final document
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(include = TRUE)
## exclude messages and warnings
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(BiomarkR)
### import raw data
DataQuantRaw <- BiomarkR::ImportMSData(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP_Plasma\HSP_perCA_Plasma_Diann_Results\report.pg_matrix.tsv)", programm = "diann", SampleID = T)
DataQuant <- DataQuantRaw %>%
## filter out the following samples c("AEZCV","BQUWN", "USOEI"))
filter(Sample != "AEZCV" & Sample != "BQUWN" & Sample != "USOEI") %>%
RemoveOutliers(Stdev = 1.5)
OutlierPlot <- DataQuant$OutlierPlot
DataQuant <- DataQuant$Dataset
DataClinRaw <- read_tsv(r"(G:\Shared drives\Path-Steen-OliverSchott\HSP_Plasma\DataClinWithSampleIDs)") %>%
mutate(Sample = str_split_i(Sample, "__", 2)) %>%
mutate(Status = ifelse(`X...SPG` == "control", "Control", "HSP"))
colnames(DataClinRaw)[8] <- "Age"
colnames(DataClinRaw)[3] <- "SPG"
TotalProt <- length(unique(DataQuant$Protein))
CompletenessAnalysis <- BiomarkR::CompletenessAnalysis(DataQuant)
CompletenessAnalysis$Plot
## plot distribution of Protein Intensities
DataQuant %>%  ggplot(aes(x = Intensity)) +
geom_density() +
## overlay normal distribution
stat_function(fun = dnorm, args = list(mean = mean(DataQuant$Intensity, na.rm = T), sd = sd(DataQuant$Intensity, na.rm = T)), color = "red") +
theme_minimal() +
ggtitle("Density of Intensity") +
## add axis titles
labs(x = "Log2 Intensity",
y = "Density")
## plot distribution of Protein Intensities
DataQuant %>% NaCutoff(70) %>%  ggplot(aes(x = Intensity)) +
geom_density() +
## overlay normal distribution
stat_function(fun = dnorm, args = list(mean = mean(DataQuant$Intensity, na.rm = T), sd = sd(DataQuant$Intensity, na.rm = T)), color = "red") +
theme_minimal() +
ggtitle("Density of Intensity") +
## add axis titles
labs(x = "Log2 Intensity",
y = "Density")
## combine with clinical Data
DataQuant <- DataQuant %>% NaCutoff(70)
DataCombined <- merge(DataQuant, DataClinRaw, by = "Sample")
PrimaryEffects <- EffectAnalysis(DataCombined)
PrimaryEffects$EffectPlot
filepath <- r"(G:\Shared drives\Path-Steen-OliverSchott\HSP_Plasma\PCA_by_Shipped_from.png)"
## include Image
knitr::include_graphics(filepath)
PCA(DataCombined)$ScorePlot2D
PrimaryEffects$EffectCorrelationsPlot
## Correct Data for plate, age and sex
CorrectedData <- DataCombined %>% NaCutoff(70) %>%
filter(!is.na(Intensity)) %>%
dplyr::group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Plate)))
EffectAnalysis(CorrectedData)$EffectPlot
## Plot Boxplot of Age per status
CorrectedData %>% ggplot(aes(x = Status, y = Age, fill = Status)) +
geom_violin() +
theme_minimal() +
ggtitle("Age Distribution per Status") +
labs(x = "Status",
y = "Age [Months]") +
ggsignif::geom_signif(comparisons = list(c("Control", "HSP")))
WtestResutls <- WTest(CorrectedData, p.adj.method = "bonferroni")
WtestResutls$Vulcanoplot
BoxPlotsFeatures(CorrectedData, PoIs = WtestResutls$Significant$Protein %>% head(6))
## make count of samples per shipping location
DataCombined %>%
group_by(Shipped_from) %>%
summarise(n = n()) %>%
arrange(desc(n))
## make count of samples per shipping location
DataCombined %>%
group_by(Shipped.From) %>%
summarise(n = n()) %>%
arrange(desc(n))
## make count of samples per shipping location
DataClinRaw %>%
group_by(Shipped.From) %>%
summarise(n = n()) %>%
arrange(desc(n))
PCA(DataCombined %>% filter(Shipped.From %in% c("BCH", "Poland")) %>% mutate(Status = Shipped.From))
Shipped.From
PCA(DataCombined %>% filter(Shipped.From %in% c("BCH", "NA")) %>% mutate(Status = Shipped.From))$ScorePlot2D
PCA(DataCombined %>% filter(Shipped.From %in% c("BCH", NA)) %>% mutate(Status = Shipped.From))$ScorePlot2D
## make count of samples per shipping location
DataClinRaw %>%
group_by(Shipped.From) %>%
summarise(n = n()) %>%
arrange(desc(n))
## make count of samples per shipping location
DataClinRaw %>%
group_by(Shipped.From) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>% head(5)
## make count of samples per shipping location
DataClinRaw %>%
group_by(Shipped.From) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>% head(5) %>%
## make nice table
kable()
## make count of samples per shipping location
DataClinRaw %>%
group_by(Shipped.From) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>% head(5) %>%
## make nice table
knittr::kable()
?kable
## make count of samples per shipping location
DataClinRaw %>%
group_by(Shipped.From) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>% head(5) %>%
## make nice table
knitr::kable()
```{r}
PCA(DataCombined)$ScorePlot2D
CorrectedData <- DataCombined %>%
filter(Shipped.From %in% c(NA,"BCH")) %>%
filter(!is.na(Intensity))
CorrectedData <- DataCombined %>%
filter(Shipped.From %in% c(NA,"BCH")) %>%
filter(!is.na(Intensity)) %>%
group_by(Protein) %>%
mutate(Intensity = residuals(lm(Intensity ~ Shipped.From)))
CorrectedData <- DataCombined %>%
filter(Shipped.From %in% c(NA,"BCH")) %>%
filter(!is.na(Intensity)) %>%
## filter for Proteins found in both shipping locations
filter(Protein %in% DataCombined %>% filter(Shipped.From %in% c(NA,"BCH")) %>% filter(!is.na(Intensity)) %>% group_by(Protein) %>% filter(n() == 2) %>% pull(Protein))
CorrectedData <- DataCombined %>%
filter(Shipped.From %in% c(NA,"BCH")) %>%
pivot_wider(names_from = Shipped.From, values_from = Intensity)
View(CorrectedData)
CorrectedData <- DataCombined %>%
filter(Shipped.From %in% c(NA,"BCH")) %>%
pivot_wider(names_from = Shipped.From, values_from = Intensity) %>%
## filter for BCH and NA not empty
filter(!is.na(BCH) & !is.na(NA)) %>%
pivot_longer(cols = c("BCH", "NA"), names_to = "Shipped.From", values_to = "Intensity")
CorrectedData <- DataCombined %>%
filter(Shipped.From %in% c(NA,"BCH")) %>%
pivot_wider(names_from = Shipped.From, values_from = Intensity) %>%
## filter for BCH and NA not empty
filter(!is.na(BCH) & !is.na(NA))
CorrectedData <- DataCombined %>%
filter(Shipped.From %in% c(NA,"BCH")) %>%
pivot_wider(names_from = Shipped.From, values_from = Intensity)
View(CorrectedData)
View(CorrectedData)
CorrectedData <- DataCombined %>%
filter(Shipped.From %in% c(NA,"BCH")) %>%
select(Protein,Intensity, Shipped.From) %>%
pivot_wider(names_from = Shipped.From, values_from = Intensity)
View(CorrectedData)
CorrectedData <- DataCombined %>%
filter(Shipped.From %in% c(NA,"BCH")) %>%
select(Sample,Protein,Intensity, Shipped.From) %>%
pivot_wider(names_from = Shipped.From, values_from = Intensity)
View(CorrectedData)
CorrectedData <- DataCombined %>%
filter(Shipped.From %in% c(NA,"BCH")) %>%
select(Status,Protein,Intensity, Shipped.From) %>%
pivot_wider(names_from = Shipped.From, values_from = Intensity)
View(CorrectedData)
## Get list of BCH exclusive Proteins
BCHProteins <- CorrectedData %>%
filter(!is.na(BCH)) %>%
select(Protein) %>%
pull()
## get list of NA exclusive Proteins
NAProteins <- CorrectedData %>%
filter(!is.na(NA)) %>%
select(Protein) %>%
pull()
## get list of NA exclusive Proteins
NAProteins <- CorrectedData %>%
filter(!is.na("NA")) %>%
select(Protein) %>%
pull()
## get list of NA exclusive Proteins
NAProteins <- CorrectedData %>%
filter(!is.na("")) %>%
select(Protein) %>%
pull()
View(CorrectedData)
CorrectedData <- DataCombined %>%
filter(Shipped.From %in% c(NA,"BCH")) %>%
select(Status,Protein,Intensity, Shipped.From) %>%
group_by(Shipped.From) %>%
summarise(mean = mean(Intensity))
View(CorrectedData)
