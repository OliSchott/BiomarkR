GestationalAge >= 41 ~ "late-term"
))
## Make GestationalAge a factor and get it into the right order
AgeData$GestationalAge <- factor(AgeData$GestationalAge, levels = c("extreme-pre-term", "pre-term", "early-term", "full-term", "late-term"))
## plot AgeData
AgeData %>% pivot_wider(names_from = Protein, values_from = Intensity) %>%
## plot distributions of gestational age
group_by(GestationalAge, Status) %>%
summarise(n = n()) %>%
ggplot(aes(x = GestationalAge, y = n, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
ggtitle("Distribution of the Gestational Age groups") +
xlab("Gestational Age Group") + ylab("Number of Samples")
## count cases and controls in each gestational age group
Breakdown <- AgeData %>% pivot_wider(names_from = Protein, values_from = Intensity) %>%
## count cases and controls in each gestational age group
group_by(GestationalAge, Status) %>%
summarise(Count = n()) %>%
## make nice table
knitr::kable()
Breakdown
##
WtestResultsEarlyTerm <- AgeData %>%
filter(GestationalAge %in% c("early-term", "pre-term","extreme-pre-term")) %>%
WTest(plotname = "Premature SIDS vs Control")
WtestResultsFullTerm <- AgeData %>%
filter(GestationalAge == "full-term") %>%
WTest(plotname = "Full Term SIDS vs Control")
WtestResultsEarlyTerm$Vulcanoplot
WtestResultsFullTerm$Vulcanoplot
## comparison between premature and mature sIDS
WtestResultsPrematureVsMatureSIDS <- AgeData %>% filter(Status == "SIDS") %>% mutate(GestationalAge = ifelse(GestationalAge %in% c("early-term", "pre-term","extreme-pre-term"), "premature", "mature")) %>% mutate(Status = GestationalAge) %>% WTest(plotname = "Premature vs mature SIDS")
WtestResultsPrematureVsMatureSIDS$Vulcanoplot
AgeData %>% filter(Protein %in% c("P00915_CA1", "P00918_CA2", "P07451_CA3")) %>% normalizeIntensityOnFeature() %>%
ggplot(aes(x = GestationalAge, y = Intensity, fill = GestationalAge)) +
## wrap panel to protein
facet_wrap(~Protein) +
geom_boxplot() +
ggtitle("Expression of Carbonic anhydrases in premature and mature SIDS and Controls") + theme_minimal() +
## draw borders around panels
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
## rotate x-axis label by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## plot AgeData
AgeData %>% pivot_wider(names_from = Protein, values_from = Intensity) %>%
## plot distributions of gestational age
group_by(GestationalAge, Status) %>%
summarise(n = n()) %>%
ggplot(aes(x = GestationalAge, y = n, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
ggtitle("Distribution of the Gestational Age groups") +
xlab("Gestational Age Group") + ylab("Number of Samples")
## Loop through the Gestational ages and perform Wilcox test
## Create output list
WTestResultList <- list()
## define Gestational age groups
GestAges <- unique(as.character(AgeData$GestationalAge))
for (i in 2:length(GestAges)) {
GestAge <- GestAges[i]
WTestData <- AgeData %>%
dplyr::filter(GestationalAge == GestAge)
WTestResults <- BiomarkR::WTest(dataset = WTestData, plotname = paste0("SIDS vs Control ", GestAge), p.adj.method = "none")
Vulcanoplot <- WTestResults$Vulcanoplot
Heatmap <- BiomarkR::HeatMap(WTestData, PoIs = WTestResults$Significant$Protein, plotname = paste0("Heatmap ", GestAge), show_row_names = T, fontsize = 6)
Results <- WTestResults$Significant
AUCs <- AUCs(WTestData, PoIs = WTestResults$Significant$Protein)
PCA <- PCA(WTestData %>% filter(Protein %in% Results$Protein) %>%
ImputeFeatureIntensity(), plotname = paste("PCA", GestAge))
## store results in Output list
WTestResultList[[GestAge]] <- list(Vulcanoplot = Vulcanoplot,
Heatmap = Heatmap,
Results = Results,
AUCs = AUCs,
STRING = STRING,
PCA = PCA)
}
## get number of "significant" proteins in each gestational age
WTestResultList %>%
map("Results") %>%
map("Protein") %>%
map_dbl(length) %>%
## rearrange chronologically
.[c(3,2,4,1)] %>%
## make nice table
knitr::kable(caption = "Number of significant Protins in each gestational age group", col.names = c("Gestational Age Group", "N"))
## plot Heat maps in each gestational age group
WTestResultList %>%
map("Heatmap")
PCAs <- WTestResultList %>%
map("PCA") %>% map("ScorePlot2D")
PCAs
PoIs1 <- WTestResultList$`extreme-pre-term`$Results$Protein
PoIs2 <- WTestResultList$`pre-term`$Results$Protein
ExPretermData <- AgeData %>% filter(GestationalAge == "extreme-pre-term") %>%
## Call SIDS cases "Extreme-pre-term-SIDS"
mutate(Status = ifelse(Status == "SIDS", "Extreme-pre-term-SIDS", Status))
PretermData <- AgeData %>% filter(GestationalAge == "pre-term") %>%
## call SIDS cases "pre-term-SIDS"
mutate(Status = ifelse(Status == "SIDS", "Pre-term-SIDS", Status))
PCADAta <- rbind(ExPretermData, PretermData) %>% filter(Protein %in% c(PoIs1, PoIs2)) %>% ImputeFeatureIntensity()
PCA <- PCA(PCADAta)
PCA$ScorePlot2D
## compare AUCs of significant proteins in different gestational age groups
AUCsList <- WTestResultList %>%
map("AUCs") %>%
map("results")
## make Data frame
AUCs <- do.call(rbind, AUCsList) %>%
rownames_to_column(var = "GestationalAge") %>%
mutate(GestationalAge = str_split_i(GestationalAge,"\\.",1))
## plot AUCs
AUCs %>%
ggplot(aes(x = Protein, y = AUC, colour = GestationalAge)) +
geom_point() +
theme_minimal() +
## angle x axis text by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## delete x axis text
theme(axis.text.x = element_blank()) +
ggtitle("AUCs of significant proteins in different gestational age groups")
## Check if proteins occur more than once in the significant results
Proteins <- WTestResultList %>%
map("Results") %>%
map("Protein")
# Create an UpSet plot
UpSetPlot <- UpSetR::upset(UpSetR::fromList(Proteins),
order.by = "freq",
main.bar.color = "steelblue",
sets.bar.color = "gold",
text.scale = 1.5)
UpSetPlot
KruskalResults <- KruskalTest(AgeData %>% mutate(Status= GestationalAge))
KruskalResults$Significant %>% select(Protein, p.adj) %>%
## make nice table
knitr::kable()
PoIs <- KruskalResults$Significant$Protein %>% head(9)
AgeData %>% filter(Protein %in% PoIs) %>% normalizeIntensityOnFeature() %>%
ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
## wrap panel to protein
facet_wrap(~Protein) +
geom_boxplot() +
ggtitle("Expression of Kruskal sig. Proteins over gestational age 1/2") + theme_minimal() +
## draw borders around panels
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
## rotate x-axis label by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## name x and y axis
xlab("Gestational Age Group") + ylab("Normalized Intensity")
PoIs <- KruskalResults$Significant$Protein %>%
## select rows 9 to 18
tail(9)
AgeData %>% filter(Protein %in% PoIs) %>% normalizeIntensityOnFeature() %>%
ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
## wrap panel to protein
facet_wrap(~Protein) +
geom_boxplot() +
ggtitle("Expression of Kruskal sig. Proteins over gestational age 2/2") + theme_minimal() +
## draw borders around panels
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
## rotate x-axis label by 45 degrees
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
## name x and y axis
xlab("Gestational Age Group") + ylab("Normalized Intensity")
ANOVAResults <- AgeData %>%
group_by(Protein) %>%
rstatix::anova_test(Intensity ~  GestationalAge + Status) %>%
rstatix::adjust_pvalue(method = "BH") %>%
rstatix::add_significance(p.col = "p.adj")
ANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(GestationalAge < 0.05 & Status < 0.05)
PoIs <- c("P80511_S100A12")
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
PoIs <- c("P26583_HMGB2","P43490_NAMPT")
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
InteractionANOVAResults <- AgeData %>%
group_by(Protein) %>%
rstatix::anova_test(Intensity ~  GestationalAge * Status) %>%
rstatix::adjust_pvalue(method = "BH") %>%
rstatix::add_significance(p.col = "p.adj")
InteractionANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(`GestationalAge:Status` < 0.05)
PoIs  <- c("P12111_COL6A3", "Q93008_USP9X")
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
InteractionANOVAResults %>% data.frame() %>%
select(Protein, Effect, p.adj, p.adj.signif) %>%
mutate(p.adj = round(p.adj, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p.adj) %>%
filter(Status < 0.05) %>%
knitr::kable()
PoIs  <- InteractionANOVAResults %>% data.frame()%>% filter(Effect == "Status") %>% filter(p.adj < 0.05) %>% arrange(p.adj) %>% head(9) %>% pull(Protein)
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
LiberalANOVAResults <- AgeData %>%
group_by(Protein) %>%
rstatix::anova_test(Intensity ~  GestationalAge * Status)
BothANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(Status < 0.05 & GestationalAge < 0.05) %>%
arrange(Status)
BothANOVAProteins <- BothANOVAResults %>% pull(Protein)
## include graphic
knitr::include_graphics(r"(G:\Shared drives\Path-Steen-OliverSchott\SIDS\Biomarker\ANOVA_Significant_Proteins\string_network_vector_graphic.svg)")
StringResults <- STRING(BothANOVAProteins, STRINGBackground = unique(CorrectedData$Protein))
StringResults$ProcessPlot
StringResults$FunctionPlot
## for convenience, we are going to define a function that plots the anova results
PlotResults <- function(PoIs , n = 9){
PoIs <- PoIs %>% head(n)
PlotData <- AgeData %>%
mutate(Status = factor(Status)) %>%
mutate(GestationalAge = factor(GestationalAge)) %>%
filter(Protein %in% PoIs) %>%
normalizeIntensityOnFeature()
PlotData %>%  ggplot(aes(x = GestationalAge, y = Intensity, fill = Status)) +
geom_boxplot() +
facet_wrap(~Protein)+
## Titles and axis labels
ggtitle("Expression of Proteins over gestational age") +
xlab("Gestational Age Group") + ylab("Normalized Intensity") +
theme_minimal() +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
StatusANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(Status < 0.05) %>%
arrange(Status)
StatusANOVAProteins <- StatusANOVAResults %>% pull(Protein)
print(paste(length(StatusANOVAProteins),"Proteins were found to be significant"))
PlotResults(StatusANOVAProteins)
AllANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(Status < 0.05 & GestationalAge < 0.05 & `GestationalAge:Status` < 0.05) %>%
arrange(Status)
AllANOVAProteins <- AllANOVAResults %>% pull(Protein)
print(paste(length(AllANOVAProteins),"Proteins were found to be significant"))
PlotResults(AllANOVAProteins)
StatusAndInteractionANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(Status < 0.05 & `GestationalAge:Status` < 0.05) %>%
arrange(Status)
StatusAndInteractionProteins <- StatusAndInteractionANOVAResults %>% pull(Protein)
print(paste(length(StatusAndInteractionProteins),"Proteins were found to be significant"))
PlotResults(StatusAndInteractionProteins)
InteractionANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(`GestationalAge:Status` < 0.05) %>%
arrange(`GestationalAge:Status` )
InteractionANOVAProteins <- InteractionANOVAResults %>% pull(Protein)
print(paste(length(InteractionANOVAProteins),"Proteins were found to be significant"))
PlotResults(InteractionANOVAProteins)
StatusOrGAANOVAResults <- LiberalANOVAResults %>% data.frame() %>%
select(Protein, Effect, p) %>%
mutate(p = round(p, 3)) %>%
## filter for both effects significant
pivot_wider(names_from = Effect, values_from = p) %>%
filter(`GestationalAge` < 0.05 | Status < 0.05 ) %>%
arrange(Status)
StatusOrGAANOVAANOVAProteins <- StatusOrGAANOVAResults %>% pull(Protein)
print(paste(length(StatusOrGAANOVAANOVAProteins),"Proteins were found to be significant"))
PlotResults(InteractionANOVAProteins)
##### Overlap of the ANOVA significant Proteins
## Make list of different ANOVASignificant proteins
AllSignificantProteins <- list(Status = StatusANOVAProteins,
AllTerms = AllANOVAProteins,StatusAndInteraction = StatusAndInteractionProteins, Interaction = InteractionANOVAProteins, StatusAndGA = BothANOVAProteins)
# Create an UpSet plot
UpSetPlot <- UpSetR::upset(UpSetR::fromList(AllSignificantProteins),
order.by = "freq",
main.bar.color = "steelblue",
sets.bar.color = "gold",
text.scale = 1.5)
UpSetPlot
i = 2
i = 1
GestAge <- GestAges[i]
WTestData <- AgeData %>%
dplyr::filter(GestationalAge == GestAge)
WTestResults <- BiomarkR::WTest(dataset = WTestData, plotname = paste0("SIDS vs Control ", GestAge), p.adj.method = "none")
Vulcanoplot <- WTestResults$Vulcanoplot
Heatmap <- BiomarkR::HeatMap(WTestData, PoIs = WTestResults$Significant$Protein, plotname = paste0("Heatmap ", GestAge), show_row_names = T, fontsize = 6)
Results <- WTestResults$Significant
AUCs <- AUCs(WTestData, PoIs = WTestResults$Significant$Protein)
AUCs <- AUCs(WTestData, PoIs = WTestResults$Significant$Protein)
PCA <- PCA(WTestData %>% filter(Protein %in% Results$Protein) %>%
ImputeFeatureIntensity(), plotname = paste("PCA", GestAge))
PCA
UpProt <- Results %>% filter(estimate < 0) %>% pull(Protein)
UpProt <- Results %>% filter(estimate > 0) %>% pull(Protein)
DownProt <- Results %>% filter(estimate < 0) %>% pull(Protein)
StringResultsUp <- STRING(UpProt, STRINGBackground = unique(AgeData$Protein))
StringResultsDown <- STRING(DownProt, STRINGBackground = unique(AgeData$Protein))
StringResultsUp
StringResultsDown
## Loop through the Gestational ages and perform Wilcox test
## Create output list
WTestResultList <- list()
## define Gestational age groups
GestAges <- unique(as.character(AgeData$GestationalAge))
for (i in 1:length(GestAges)) {
GestAge <- GestAges[i]
WTestData <- AgeData %>%
dplyr::filter(GestationalAge == GestAge)
WTestResults <- BiomarkR::WTest(dataset = WTestData, plotname = paste0("SIDS vs Control ", GestAge), p.adj.method = "none")
Vulcanoplot <- WTestResults$Vulcanoplot
Heatmap <- BiomarkR::HeatMap(WTestData, PoIs = WTestResults$Significant$Protein, plotname = paste0("Heatmap ", GestAge), show_row_names = T, fontsize = 6)
Results <- WTestResults$Significant
AUCs <- AUCs(WTestData, PoIs = WTestResults$Significant$Protein)
PCA <- PCA(WTestData %>% filter(Protein %in% Results$Protein) %>%
ImputeFeatureIntensity(), plotname = paste("PCA", GestAge))
UpProt <- Results %>% filter(estimate > 0) %>% pull(Protein)
DownProt <- Results %>% filter(estimate < 0) %>% pull(Protein)
StringResultsUp <- STRING(UpProt, STRINGBackground = unique(AgeData$Protein))
StringResultsDown <- STRING(DownProt, STRINGBackground = unique(AgeData$Protein))
## store results in Output list
WTestResultList[[GestAge]] <- list(Vulcanoplot = Vulcanoplot,
Heatmap = Heatmap,
Results = Results,
AUCs = AUCs,
StringResultsUp = StringResultsUp,
StringResultsDown = StringResultsDown,
PCA = PCA)
}
WTestResultList %>% map(StringResultsUp)
View(WTestResultList)
WTestResultList %>% map("StringResultsUp")
WTestResultList %>% map("StringResultsDown")
## Loop through the Gestational ages and perform Wilcox test
## Create output list
WTestResultList <- list()
## define Gestational age groups
GestAges <- unique(as.character(AgeData$GestationalAge))
for (i in 1:length(GestAges)) {
GestAge <- GestAges[i]
WTestData <- AgeData %>%
dplyr::filter(GestationalAge == GestAge)
WTestResults <- BiomarkR::WTest(dataset = WTestData, plotname = paste0("SIDS vs Control ", GestAge), p.adj.method = "none")
Vulcanoplot <- WTestResults$Vulcanoplot
Heatmap <- BiomarkR::HeatMap(WTestData, PoIs = WTestResults$Significant$Protein, plotname = paste0("Heatmap ", GestAge), show_row_names = T, fontsize = 6)
Results <- WTestResults$Significant
AUCs <- AUCs(WTestData, PoIs = WTestResults$Significant$Protein)
PCA <- PCA(WTestData %>% filter(Protein %in% Results$Protein) %>%
ImputeFeatureIntensity(), plotname = paste("PCA", GestAge))
UpProt <- Results %>% filter(estimate > 0) %>% pull(Protein)
DownProt <- Results %>% filter(estimate < 0) %>% pull(Protein)
StringResultsUp <- STRING(UpProt, STRINGBackground = unique(AgeData$Protein), plotname = paste("STRING Up", GestAge))
StringResultsDown <- STRING(DownProt, STRINGBackground = unique(AgeData$Protein), plotname = paste("STRING Down", GestAge))
## store results in Output list
WTestResultList[[GestAge]] <- list(Vulcanoplot = Vulcanoplot,
Heatmap = Heatmap,
Results = Results,
AUCs = AUCs,
StringResultsUp = StringResultsUp,
StringResultsDown = StringResultsDown,
PCA = PCA)
}
WTestResultList %>% map("PCA")
WTestResultList %>% map("Heatmap")
WTestData <- AgeData %>%
dplyr::filter(GestationalAge == GestAge) %>%
arrange(Status)
## Loop through the Gestational ages and perform Wilcox test
## Create output list
WTestResultList <- list()
## define Gestational age groups
GestAges <- unique(as.character(AgeData$GestationalAge))
for (i in 1:length(GestAges)) {
GestAge <- GestAges[i]
WTestData <- AgeData %>%
dplyr::filter(GestationalAge == GestAge) %>%
arrange(Status)
WTestResults <- BiomarkR::WTest(dataset = WTestData, plotname = paste0("SIDS vs Control ", GestAge), p.adj.method = "none")
Vulcanoplot <- WTestResults$Vulcanoplot
Heatmap <- BiomarkR::HeatMap(WTestData, PoIs = WTestResults$Significant$Protein, plotname = paste0("Heatmap ", GestAge), show_row_names = T, fontsize = 6)
Results <- WTestResults$Significant
AUCs <- AUCs(WTestData, PoIs = WTestResults$Significant$Protein)
PCA <- PCA(WTestData %>% filter(Protein %in% Results$Protein) %>%
ImputeFeatureIntensity(), plotname = paste("PCA", GestAge))
UpProt <- Results %>% filter(estimate > 0) %>% pull(Protein)
DownProt <- Results %>% filter(estimate < 0) %>% pull(Protein)
StringResultsUp <- STRING(UpProt, STRINGBackground = unique(AgeData$Protein), plotname = paste("STRING Up", GestAge))
StringResultsDown <- STRING(DownProt, STRINGBackground = unique(AgeData$Protein), plotname = paste("STRING Down", GestAge))
## store results in Output list
WTestResultList[[GestAge]] <- list(Vulcanoplot = Vulcanoplot,
Heatmap = Heatmap,
Results = Results,
AUCs = AUCs,
StringResultsUp = StringResultsUp,
StringResultsDown = StringResultsDown,
PCA = PCA)
}
unique(DataClin$Status)
## provide bin data
HistData <- DataClin %>% filter(GestationalAge != -9) %>%
mutate(GestationalAge = as.numeric(GestationalAge)) %>%
mutate(GestationalAge = round(GestationalAge, 0)) %>%
group_by(GestationalAge) %>%
summarise(count = n())
View(HistData)
## provide bin data
HistData <- DataClin %>% filter(GestationalAge != -9) %>%
mutate(GestationalAge = as.numeric(GestationalAge)) %>%
mutate(GestationalAge = round(GestationalAge, 0)) %>%
group_by(GestationalAge, Status) %>%
summarise(count = n())
View(HistData)
## plot HistData
ggplot(HistData, aes(x = GestationalAge, y = count, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribution of Gestational Ages", x = "Gestational Age (weeks)", y = "Count") +
theme_minimal() +
theme(legend.position = "top")
View(WTestResultList)
WTestResultList %>% map("VulcanoPlot")
WTestResultList %>% map("Vulcanoplot")
WTestResultList %>% map("StringResultsUp")
WTestResultList %>% map("StringResultsDown")
intersect(WTestResultList %>% map(Results$Protein))
extreme-pre-term-PoIs <- WTestResultList$`extreme-pre-term`$Results$Protein
extremePreTermPoIsPoIs <- WTestResultList$`extreme-pre-term`$Results$Protein
earlyTermPoIs <- WTestResultList$`early-term`$Results$Protein
preTermPoIs <- WTestResultList$`pre-term`$Results$Protein
intersect(extremePreTermPoIsPoIs ,earlyTermPoIs ,preTermPoIs )
intersect(extremePreTermPoIsPoIs ,earlyTermPoIs)
intersect(extremePreTermPoIsPoIs ,preTermPoIs)
PROTEIN <- "P13010_XRCC5"
GLM(AgeData, PoIs = PROTEIN)
GLM(AgeData, PoIs = PROTEIN, crossvalidation = T)
View(LiberalANOVAResults)
View(ANOVAResults)
## write Results to cvs
PoIs <- Results$Protein
write.csv(PoIs %>% data.frame(), file = paste0("SIDS_VS_Control_in_", GestAge, ".csv"))
library(BiomarkR)
detach("package:BiomarkR", unload = TRUE)
remotes::install_github("OliSchott/BiomarkR")
